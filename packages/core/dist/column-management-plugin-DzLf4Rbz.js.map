{"version":3,"file":"column-management-plugin-DzLf4Rbz.js","names":["resizeFrame: number | null","pendingWidth: number | null","resizeEdge: 'left' | 'right'","columnManagementPlugin: GridPlugin","columnState: InternalColumnState","cleanupFns: Array<() => void>","left: string[]","right: string[]"],"sources":["../src/utils/column-constants.ts","../src/plugins/core/column-management-plugin.ts"],"sourcesContent":["/**\n * Column Width Constants\n *\n * Centralized configuration for column width defaults across the codebase.\n * Following the Single Source of Truth principle.\n */\n\n/**\n * Default column width in pixels\n * Used when column.width is not specified\n */\nexport const DEFAULT_COLUMN_WIDTH = 150\n\n/**\n * Minimum column width in pixels\n * Used for column resizing constraints\n */\nexport const DEFAULT_MIN_COLUMN_WIDTH = 50\n\n/**\n * Maximum column width in pixels\n * Used for column resizing constraints\n */\nexport const DEFAULT_MAX_COLUMN_WIDTH = 500\n\n/**\n * Column width estimation range\n */\nexport const COLUMN_WIDTH_RANGE = {\n  MIN: 80,\n  MAX: 300,\n  DEFAULT: DEFAULT_COLUMN_WIDTH,\n} as const\n/**\n * Normalize column definition with default width values\n * This ensures all columns have width/minWidth/maxWidth defined\n * @param column - Column definition to normalize\n * @returns Normalized column with default values applied\n */\nexport function normalizeColumn<T extends { width?: number; minWidth?: number; maxWidth?: number }>(\n  column: T\n): T & { width: number; minWidth: number; maxWidth: number } {\n  return {\n    ...column,\n    width: column.width ?? DEFAULT_COLUMN_WIDTH,\n    minWidth: column.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH,\n    maxWidth: column.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH,\n  } as T & { width: number; minWidth: number; maxWidth: number }\n}\n","/**\n * Column Management Plugin - Core functionality\n *\n * Provides column operations including reordering, resizing, visibility,\n * and pinning. Integrates with the data pipeline for column-based operations.\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../index'\nimport type { GridAPI, ColumnDef, ExtendedGridAPI, ColumnState } from '../../types'\nimport { createLogger } from '../../utils/logger'\nimport {\n  DEFAULT_COLUMN_WIDTH,\n  DEFAULT_MIN_COLUMN_WIDTH,\n  DEFAULT_MAX_COLUMN_WIDTH,\n} from '../../utils/column-constants'\n\ninterface InternalColumnState {\n  order: string[]\n  widths: Map<string, number>\n  visibility: Map<string, boolean>\n  pinned: Map<string, 'left' | 'right' | null>\n  activeResize: {\n    columnId: string\n    startX: number\n    startWidth: number\n    minWidth: number\n    maxWidth: number\n    lastWidth: number\n    edge: 'left' | 'right'\n  } | null\n}\n\nconst clampColumnWidth = (width: number, minWidth: number, maxWidth: number) => {\n  return Math.min(maxWidth, Math.max(minWidth, width))\n}\n\nfunction ensureColumnStateIntegrity(\n  columnState: InternalColumnState,\n  columns: ColumnDef[],\n  options: { resetOrder?: boolean } = {}\n) {\n  if (!columns.length) {\n    columnState.order = options.resetOrder ? [] : columnState.order\n    return\n  }\n\n  const columnIds = columns.map(column => column.id)\n  const columnIdSet = new Set(columnIds)\n\n  if (options.resetOrder || columnState.order.length === 0) {\n    columnState.order = [...columnIds]\n  } else {\n    const preservedOrder = columnState.order.filter(id => columnIdSet.has(id))\n    const missingColumns = columnIds.filter(id => !preservedOrder.includes(id))\n    columnState.order = [...preservedOrder, ...missingColumns]\n  }\n\n  const pruneMap = <T>(map: Map<string, T>) => {\n    for (const key of Array.from(map.keys())) {\n      if (!columnIdSet.has(key)) {\n        map.delete(key)\n      }\n    }\n  }\n\n  pruneMap(columnState.widths)\n  pruneMap(columnState.visibility)\n  pruneMap(columnState.pinned)\n\n  columns.forEach(column => {\n    const minWidth = column.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n    const maxWidth = column.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n    const stateWidth = columnState.widths.get(column.id)\n    const baseWidth = column.width\n    const fallbackWidth = baseWidth ?? DEFAULT_COLUMN_WIDTH\n\n    const shouldSyncToBase =\n      typeof stateWidth === 'number'\n        ? typeof baseWidth === 'number' &&\n          Math.abs(baseWidth - stateWidth) >= 0.5 &&\n          columnState.activeResize?.columnId !== column.id\n        : false\n\n    const candidateWidth = shouldSyncToBase ? baseWidth : stateWidth\n    const columnWidth = clampColumnWidth(candidateWidth ?? fallbackWidth, minWidth, maxWidth)\n\n    columnState.widths.set(column.id, columnWidth)\n\n    if (!columnState.visibility.has(column.id)) {\n      // If column.visible is explicitly false, honor it. Otherwise, default to true.\n      const initialVisibility = column.visible !== false\n      columnState.visibility.set(column.id, initialVisibility)\n    }\n\n    if (!columnState.pinned.has(column.id)) {\n      columnState.pinned.set(column.id, column.pinned ?? null)\n    }\n  })\n}\n\nfunction applyColumnState(columnState: InternalColumnState, baseColumns: ColumnDef[]): ColumnDef[] {\n  const columnMap = new Map(baseColumns.map((col: ColumnDef) => [col.id, col]))\n\n  ensureColumnStateIntegrity(columnState, baseColumns)\n\n  return columnState.order\n    .map(id => columnMap.get(id))\n    .filter((col): col is ColumnDef => {\n      return (\n        col !== undefined &&\n        col !== null &&\n        typeof col === 'object' &&\n        'id' in col &&\n        columnState.visibility.get(col.id as string) !== false\n      )\n    })\n    .map((col: ColumnDef) => {\n      const minWidth = col.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n      const maxWidth = col.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n      const storedWidth = columnState.widths.get(col.id) ?? col.width ?? DEFAULT_COLUMN_WIDTH\n      const width = clampColumnWidth(storedWidth, minWidth, maxWidth)\n\n      if (width !== storedWidth) {\n        columnState.widths.set(col.id, width)\n      }\n\n      const pinned = columnState.pinned.get(col.id) ?? col.pinned ?? null\n\n      return {\n        ...col,\n        width,\n        pinned: pinned || undefined,\n      }\n    })\n}\n\ninterface ColumnResizeController {\n  handleResizeStart: (payload: { columnId: string; startX: number; currentWidth: number }) => void\n  cleanup: () => void\n}\n\nfunction createResizeController(\n  api: ExtendedGridAPI,\n  columnState: InternalColumnState\n): ColumnResizeController {\n  let resizeFrame: number | null = null\n  let pendingWidth: number | null = null\n  let globalResizeActive = false\n\n  const flushPendingResize = (force = false) => {\n    if (resizeFrame !== null) {\n      window.cancelAnimationFrame(resizeFrame)\n      resizeFrame = null\n    }\n\n    const activeResize = columnState.activeResize\n    if (!activeResize) return\n\n    const widthToApply = pendingWidth ?? (force ? activeResize.lastWidth : null)\n\n    pendingWidth = null\n\n    if (widthToApply === null || widthToApply === undefined) return\n\n    api.resizeColumn?.(activeResize.columnId, widthToApply)\n  }\n\n  const removeGlobalResizeListeners = () => {\n    if (!globalResizeActive) return\n    window.removeEventListener('mousemove', handleResizeMove)\n    window.removeEventListener('mouseup', handleResizeEnd)\n    window.removeEventListener('blur', handleResizeCancel)\n    globalResizeActive = false\n  }\n\n  const stopActiveResize = () => {\n    if (resizeFrame !== null) {\n      window.cancelAnimationFrame(resizeFrame)\n      resizeFrame = null\n    }\n    columnState.activeResize = null\n    pendingWidth = null\n    removeGlobalResizeListeners()\n  }\n\n  const flushAndStop = (force = false) => {\n    flushPendingResize(force)\n    stopActiveResize()\n  }\n\n  const scheduleResize = (width: number) => {\n    pendingWidth = width\n\n    if (resizeFrame !== null) return\n\n    resizeFrame = window.requestAnimationFrame(() => {\n      resizeFrame = null\n      flushPendingResize()\n    })\n  }\n\n  function handleResizeMove(event: MouseEvent) {\n    const activeResize = columnState.activeResize\n    if (!activeResize) return\n\n    const rawDelta = event.clientX - activeResize.startX\n    const delta = activeResize.edge === 'left' ? -rawDelta : rawDelta\n    const nextWidth = clampColumnWidth(\n      activeResize.startWidth + delta,\n      activeResize.minWidth,\n      activeResize.maxWidth\n    )\n\n    if (Math.abs(nextWidth - activeResize.lastWidth) < 0.5) {\n      return\n    }\n\n    activeResize.lastWidth = nextWidth\n    scheduleResize(nextWidth)\n  }\n\n  const handleResizeEnd = () => {\n    flushAndStop(true)\n  }\n\n  const handleResizeCancel = () => {\n    flushAndStop(true)\n  }\n\n  const handleResizeStart = (payload: { columnId: string; startX: number; currentWidth: number }) => {\n    if (!payload) {\n      return\n    }\n\n    const { columnId, startX, currentWidth } = payload\n\n    if (columnState.activeResize) {\n      flushAndStop(true)\n    }\n\n    const columns = api.getState().columns || []\n    const column = columns.find((col: ColumnDef) => col.id === columnId)\n\n    if (!column || column.resizable === false) {\n      return\n    }\n\n    const minWidth = column.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n    const maxWidth = column.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n    const widthFromState = columnState.widths.get(columnId)\n    const startingWidth =\n      widthFromState ?? column.width ?? currentWidth ?? DEFAULT_COLUMN_WIDTH\n\n    const pinnedPosition = columnState.pinned.get(columnId) ?? column.pinned ?? null\n    const resizeEdge: 'left' | 'right' = pinnedPosition === 'right' ? 'left' : 'right'\n\n    columnState.activeResize = {\n      columnId,\n      startX,\n      startWidth: clampColumnWidth(startingWidth, minWidth, maxWidth),\n      minWidth,\n      maxWidth,\n      lastWidth: clampColumnWidth(startingWidth, minWidth, maxWidth),\n      edge: resizeEdge,\n    }\n\n    if (!globalResizeActive) {\n      window.addEventListener('mousemove', handleResizeMove)\n      window.addEventListener('mouseup', handleResizeEnd)\n      window.addEventListener('blur', handleResizeCancel)\n      globalResizeActive = true\n    }\n  }\n\n  return {\n    handleResizeStart,\n    cleanup: () => {\n      flushAndStop(true)\n    },\n  }\n}\n\nexport const columnManagementPlugin: GridPlugin = {\n  name: 'core-column-management',\n  version: '1.0.0',\n  dependencies: [], // No special capabilities needed\n\n  install(api: GridAPI, _get: CapabilityGetter) {\n    const logger = createLogger({ module: 'Plugin', operation: 'ColumnManagementPlugin' })\n    // Internal column state\n    const columnState: InternalColumnState = {\n      order: [],\n      widths: new Map(),\n      visibility: new Map(),\n      pinned: new Map(),\n      activeResize: null,\n    }\n\n    // Initialize column state from current columns, allowing optional order reset\n    const initializeColumnState = (options: { resetOrder?: boolean } = {}) => {\n      const currentColumns = api.getState().columns || []\n      ensureColumnStateIntegrity(columnState, currentColumns, options)\n    }\n\n    // Apply column state to column definitions\n    const buildColumnsFromState = (): ColumnDef[] => {\n      const baseColumns = api.getState().columns || []\n      return applyColumnState(columnState, baseColumns)\n    }\n\n    // Extend GridAPI with column management methods\n    const originalApi = api as ExtendedGridAPI\n\n    // Track subscriptions for cleanup\n    const cleanupFns: Array<() => void> = []\n    const resizeController = createResizeController(originalApi, columnState)\n\n    // Column ordering\n    originalApi.moveColumn = (columnId: string, targetIndex: number) => {\n      const currentIndex = columnState.order.indexOf(columnId)\n      if (currentIndex === -1) return false\n\n      // Remove from current position\n      columnState.order.splice(currentIndex, 1)\n\n      // Insert at target position\n      const clampedIndex = Math.max(0, Math.min(targetIndex, columnState.order.length))\n      columnState.order.splice(clampedIndex, 0, columnId)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-move', {\n        fromIndex: currentIndex,\n        toIndex: clampedIndex,\n      })\n\n      return true\n    }\n\n    originalApi.swapColumns = (columnId1: string, columnId2: string) => {\n      const index1 = columnState.order.indexOf(columnId1)\n      const index2 = columnState.order.indexOf(columnId2)\n\n      if (index1 === -1 || index2 === -1) return false\n\n      // Swap positions\n      columnState.order[index1] = columnId2\n      columnState.order[index2] = columnId1\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-swap', {\n        index1,\n        index2,\n      })\n\n      return true\n    }\n\n    // Column resizing\n    originalApi.resizeColumn = (columnId: string, width: number) => {\n      const columns = api.getState().columns || []\n      const targetColumn = columns.find((col: ColumnDef) => col.id === columnId)\n\n      const minWidth = targetColumn?.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n      const maxWidth = targetColumn?.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n      const currentWidth = columnState.widths.get(columnId) ??\n        targetColumn?.width ??\n        DEFAULT_COLUMN_WIDTH\n\n      const constrainedWidth = clampColumnWidth(width, minWidth, maxWidth)\n\n      if (Math.abs(constrainedWidth - currentWidth) < 0.5) {\n        return false\n      }\n\n      columnState.widths.set(columnId, constrainedWidth)\n\n      const updateColumnFn = api.updateColumn?.bind(api)\n      if (typeof updateColumnFn === 'function') {\n        updateColumnFn(columnId, { width: constrainedWidth })\n      } else {\n        const updatedColumns = buildColumnsFromState()\n        api.setColumns(updatedColumns)\n      }\n\n      api.emit('column-resize', {\n        columnId,\n        width: constrainedWidth,\n      })\n\n      return true\n    }\n\n    originalApi.autoSizeColumn = (columnId: string) => {\n      // Get visible data to calculate optimal width\n      const data = api.getState().data || []\n      const column = api.getState().columns?.find((col: ColumnDef) => col.id === columnId)\n\n      if (!column) return false\n\n      // Calculate optimal width based on content\n      // This is a simplified version - in practice you'd measure actual text\n      const maxLength = Math.max(\n        column.title?.length || 0,\n        ...data.map((row: Record<string, unknown>) => String(row[column.field] || '').length)\n      )\n\n      const calculatedWidth = Math.max(80, Math.min(300, maxLength * 8))\n      return originalApi.resizeColumn?.(columnId, calculatedWidth) ?? false\n    }\n\n    // Column visibility\n    originalApi.hideColumn = (columnId: string) => {\n      if (columnState.visibility.get(columnId) === false) return false\n      columnState.visibility.set(columnId, false)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-hide', {\n        columnId,\n      })\n\n      return true\n    }\n\n    originalApi.showColumn = (columnId: string) => {\n      if (columnState.visibility.get(columnId) !== false) return false\n      columnState.visibility.set(columnId, true)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-show', {\n        columnId,\n      })\n\n      return true\n    }\n\n    originalApi.toggleColumnVisibility = (columnId: string) => {\n      const isVisible = columnState.visibility.get(columnId) !== false\n      return isVisible \n        ? (originalApi.hideColumn?.(columnId) ?? false) \n        : (originalApi.showColumn?.(columnId) ?? false)\n    }\n\n    originalApi.getHiddenColumns = () => {\n      return Array.from(columnState.visibility.entries())\n        .filter(([, visible]) => !visible)\n        .map(([id]) => id)\n    }\n\n    // Column pinning\n    originalApi.pinColumn = (columnId: string, position: 'left' | 'right') => {\n      columnState.pinned.set(columnId, position)\n\n      // Move pinned columns to appropriate positions\n      if (position === 'left') {\n        // Move to beginning\n        const index = columnState.order.indexOf(columnId)\n        if (index > -1) {\n          columnState.order.splice(index, 1)\n          columnState.order.unshift(columnId)\n        }\n      } else {\n        // Move to end\n        const index = columnState.order.indexOf(columnId)\n        if (index > -1) {\n          columnState.order.splice(index, 1)\n          columnState.order.push(columnId)\n        }\n      }\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-pin', {\n        columnId,\n        side: position,\n      })\n\n      return true\n    }\n\n    originalApi.unpinColumn = (columnId: string) => {\n      columnState.pinned.set(columnId, null)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-unpin', {\n        columnId,\n      })\n\n      return true\n    }\n\n    originalApi.getPinnedColumns = () => {\n      const left: string[] = []\n      const right: string[] = []\n\n      columnState.pinned.forEach((position, id) => {\n        if (position === 'left') left.push(id)\n        else if (position === 'right') right.push(id)\n      })\n\n      return { left, right }\n    }\n\n    // Bulk operations\n    originalApi.setColumnOrder = (order: string[]) => {\n      // Validate all column IDs exist\n      const currentColumns = api.getState().columns || []\n      const existingIds = new Set(currentColumns.map((col: ColumnDef) => col.id))\n\n      if (!order.every((id: string) => existingIds.has(id))) {\n        return false\n      }\n\n      const oldOrder = [...columnState.order]\n      columnState.order = [...order]\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-order-change', {\n        oldOrder,\n        newOrder: order,\n      })\n\n      return true\n    }\n\n    originalApi.resetColumns = () => {\n      // Reset to original state\n      columnState.order = []\n      columnState.widths.clear()\n      columnState.visibility.clear()\n      columnState.pinned.clear()\n\n      initializeColumnState({ resetOrder: true })\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('columns-reset', {\n        columns: updatedColumns,\n      })\n\n      return true\n    }\n\n    originalApi.getColumnState = () => {\n      return {\n        order: [...columnState.order],\n        widths: new Map(columnState.widths),\n        visibility: new Map(columnState.visibility),\n        pinned: new Map(columnState.pinned),\n      }\n    }\n\n    originalApi.setColumnState = (state: Partial<ColumnState>) => {\n      if (state.order) columnState.order = [...state.order]\n      if (state.widths) columnState.widths = new Map(state.widths)\n      if (state.visibility) columnState.visibility = new Map(state.visibility)\n      if (state.pinned) columnState.pinned = new Map(state.pinned)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-state-change', {\n        state: originalApi.getColumnState?.(),\n      })\n\n      return true\n    }\n\n    // Initialize state\n    initializeColumnState({ resetOrder: true })\n\n    // Helper function to handle columns-changed event (KISS principle)\n    function handleColumnsChanged(incomingColumns: unknown) {\n      if (!Array.isArray(incomingColumns)) return\n\n      // Sync internal state with incoming columns (reads visible: false)\n      ensureColumnStateIntegrity(columnState, incomingColumns)\n\n      // Build filtered column array based on visibility\n      const filteredColumns = buildColumnsFromState()\n\n      // Update grid only if visibility filtering removed columns (prevents infinite loop)\n      if (filteredColumns.length !== incomingColumns.length) {\n        api.setColumns(filteredColumns)\n      }\n    }\n\n    // React to external column changes to keep internal state aligned\n    if (typeof api.on === 'function') {\n      const offColumnsChanged = api.on('columns-changed', handleColumnsChanged)\n      cleanupFns.push(offColumnsChanged)\n\n      const offColumnUpdated = api.on('column-updated', payload => {\n        if (!payload) {\n          return\n        }\n\n        const { columnId, updates } = payload\n        if (!columnId || typeof updates !== 'object' || updates === null) {\n          return\n        }\n\n        if (typeof updates.width === 'number') {\n          const columns = api.getState().columns || []\n          const column = columns.find((col: ColumnDef) => col.id === columnId)\n          const minWidth = column?.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n          const maxWidth = column?.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n          const constrainedWidth = clampColumnWidth(updates.width, minWidth, maxWidth)\n          columnState.widths.set(columnId, constrainedWidth)\n        }\n\n        if (Object.prototype.hasOwnProperty.call(updates, 'pinned')) {\n          const pinnedValue = updates.pinned\n          if (pinnedValue === 'left' || pinnedValue === 'right') {\n            columnState.pinned.set(columnId, pinnedValue)\n          } else if (pinnedValue === undefined || pinnedValue === null) {\n            columnState.pinned.set(columnId, null)\n          }\n        }\n      })\n      cleanupFns.push(offColumnUpdated)\n\n      const offColumnSort = api.on('column-sort', payload => {\n        if (!payload) {\n          return\n        }\n\n        const { columnId, field, ctrlKey } = payload\n        const columns = api.getState().columns || []\n        const column = columns.find((col: ColumnDef) => col.id === columnId || col.field === field)\n\n        if (!column) {\n          logger.debug('column-sort event ignored: column not found', {\n            columnId,\n            field,\n          })\n          return\n        }\n\n        if (column.sortable === false) {\n          logger.debug('column-sort event ignored: column not sortable', {\n            columnId,\n            field,\n          })\n          return\n        }\n\n        const targetField = column.field || field\n\n        if (!targetField) {\n          logger.warn('column-sort event missing field information', {\n            columnId,\n            field,\n          })\n          return\n        }\n\n        const sortByColumn =\n          typeof originalApi.sortByColumn === 'function'\n            ? originalApi.sortByColumn.bind(originalApi)\n            : null\n        const addSortField =\n          typeof originalApi.addSortField === 'function'\n            ? originalApi.addSortField.bind(originalApi)\n            : null\n\n        if (ctrlKey && addSortField) {\n          addSortField(targetField)\n          logger.debug('column-sort event applied via multi-sort', {\n            columnId,\n            field: targetField,\n            ctrlKey,\n          })\n          return\n        }\n\n        if (sortByColumn) {\n          sortByColumn(targetField)\n          logger.debug('column-sort event applied via primary sort', {\n            columnId,\n            field: targetField,\n            ctrlKey,\n          })\n        } else if (addSortField) {\n          addSortField(targetField)\n          logger.debug('column-sort event fallback to addSortField', {\n            columnId,\n            field: targetField,\n            ctrlKey,\n          })\n        } else {\n          logger.warn('column-sort event ignored: sorting capability unavailable', {\n            columnId,\n            field: targetField,\n          })\n        }\n      })\n\n      cleanupFns.push(offColumnSort)\n\n      const offResizeStart = api.on('column-resize-start', payload => {\n        resizeController.handleResizeStart(payload)\n      })\n\n      cleanupFns.push(offResizeStart)\n    }\n\n    api.registerMemoryCleanup?.(() => {\n      cleanupFns.forEach(cleanup => {\n        cleanup()\n      })\n      cleanupFns.length = 0\n      resizeController.cleanup()\n      columnState.activeResize = null\n    })\n\n    logger.info('Column management functionality installed', {\n      features: ['reorder', 'resize', 'visibility', 'pinning', 'sorting', 'state persistence'],\n    })\n\n    // Note: 'columns-change' event not defined in GridEvents\n    // TODO: Add columns-change to GridEvents or handle differently\n    // if (api.on) {\n    //   api.on('columns-change', () => {\n    //     initializeColumnState()\n    //   })\n    // }\n  },\n}\n"],"mappings":"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"}