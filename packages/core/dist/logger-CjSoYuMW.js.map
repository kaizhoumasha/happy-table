{"version":3,"file":"logger-CjSoYuMW.js","names":["currentLevel: LogLevel","LOG_LEVELS: Record<LogLevel, number>"],"sources":["../src/utils/logger.ts"],"sourcesContent":["/**\n * Lightweight logging utility for Happy Table\n *\n * IMPORTANT: To preserve source locations, this logger is designed as a development tool.\n * In production, most logging will be disabled anyway.\n */\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error'\nexport type LogContext = string | { module: string; operation?: string; [key: string]: unknown }\n\n// Global configuration\nlet currentLevel: LogLevel = 'info'\nlet isDev = false\nconst enabledContexts = new Set<string>(['*'])\n\n// Environment detection\ntry {\n  isDev = import.meta.env.DEV === true\n} catch {\n  isDev = typeof process !== 'undefined' && process.env?.NODE_ENV === 'development'\n}\n\ncurrentLevel = isDev ? 'debug' : 'warn'\n\nconst LOG_LEVELS: Record<LogLevel, number> = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3\n}\n\nfunction shouldLog(level: LogLevel, context?: LogContext): boolean {\n  if (LOG_LEVELS[level] < LOG_LEVELS[currentLevel]) return false\n\n  if (context && !enabledContexts.has('*')) {\n    const contextStr = typeof context === 'string' ? context : context.module\n    return Array.from(enabledContexts).some(enabled =>\n      contextStr.includes(enabled) || enabled.includes(contextStr)\n    )\n  }\n\n  return true\n}\n\nfunction formatMessage(level: LogLevel, message: string, context?: LogContext): string {\n  const timestamp = new Date().toISOString().slice(11, 23)\n  const levelStr = level.toUpperCase().padEnd(5)\n\n  let contextStr = ''\n  if (context) {\n    if (typeof context === 'string') {\n      contextStr = `[${context}]`\n    } else {\n      const { module, operation, ...rest } = context\n      contextStr = `[${module}${operation ? `:${operation}` : ''}]`\n      if (Object.keys(rest).length > 0) {\n        contextStr += ` ${JSON.stringify(rest)}`\n      }\n    }\n  }\n\n  return `${timestamp} ${levelStr} ${contextStr} ${message}`\n}\n\n\n// ==========================================\n// Scoped logger class\n// ==========================================\n\nexport class ScopedLogger {\n  private context: LogContext\n\n  constructor(context: LogContext) {\n    this.context = context\n  }\n\n  private _log(level: LogLevel) {\n    if (!shouldLog(level, this.context)) {\n      return (..._args: any[]) => {}\n    }\n    const timestamp = new Date().toISOString().slice(11, 23)\n    const levelStr = level.toUpperCase().padEnd(5)\n\n    let contextStr = ''\n    if (this.context) {\n      if (typeof this.context === 'string') {\n        contextStr = `[${this.context}]`\n      } else {\n        const { module, operation } = this.context\n        contextStr = `[${module}${operation ? `:${operation}` : ''}]`\n      }\n    }\n    const prefix = `${timestamp} ${levelStr} ${contextStr}`\n    return console[level].bind(console, prefix)\n  }\n\n  get debug() {\n    return this._log('debug')\n  }\n\n  get info() {\n    return this._log('info')\n  }\n\n  get warn() {\n    return this._log('warn')\n  }\n\n  get error() {\n    return this._log('error')\n  }\n\n  /**\n   * Get formatted message for direct console use (preserves source location)\n   * Usage: console.info(logger.format('info', 'message'))\n   */\n  format(level: LogLevel, message: string): string {\n    if (!shouldLog(level, this.context)) return ''\n    return formatMessage(level, message, this.context)\n  }\n\n  /**\n   * Check if logging is enabled for this logger's context\n   */\n  enabled(level: LogLevel): boolean {\n    return shouldLog(level, this.context)\n  }\n\n  operation(operation: string) {\n    const newContext = typeof this.context === 'string'\n      ? { module: this.context, operation }\n      : { ...this.context, operation }\n    return new ScopedLogger(newContext)\n  }\n\n  // High-level console methods\n  // These directly use the console API to preserve line numbers and object interactivity.\n\n  time(label: string) {\n    if (!shouldLog('debug', this.context)) return\n    const timedLabel = this.context && typeof this.context === 'object'\n      ? `[${this.context.module}:${this.context.operation}] ${label}`\n      : label\n    console.time(timedLabel)\n  }\n\n  timeEnd(label: string) {\n    if (!shouldLog('debug', this.context)) return\n    const timedLabel = this.context && typeof this.context === 'object'\n      ? `[${this.context.module}:${this.context.operation}] ${label}`\n      : label\n    console.timeEnd(timedLabel)\n  }\n\n  group(label: string) {\n    if (!shouldLog('debug', this.context)) return\n    this._log('debug')(label)\n    console.groupCollapsed()\n  }\n\n  groupEnd() {\n    if (!shouldLog('debug', this.context)) return\n    console.groupEnd()\n  }\n\n  table(data: any) {\n    if (!shouldLog('debug', this.context)) return\n    console.table(data)\n  }\n}\n\n// ==========================================\n// Factory functions\n// ==========================================\n\nexport function createLogger(context: LogContext) {\n  return new ScopedLogger(context)\n}\n\n// ==========================================\n// Configuration\n// ==========================================\n\nexport const devTools = {\n  setLevel: (level: LogLevel) => { currentLevel = level },\n  enableContexts: (contexts: string[]) => {\n    enabledContexts.clear()\n    contexts.forEach(ctx => enabledContexts.add(ctx))\n  },\n  enableAllContexts: () => {\n    enabledContexts.clear()\n    enabledContexts.add('*')\n  }\n}\n\n// For backward compatibility\nexport const logger = {\n  scope: createLogger,\n  configure: (options: { level?: LogLevel; contexts?: string[] }) => {\n    if (options.level) currentLevel = options.level\n    if (options.contexts) {\n      enabledContexts.clear()\n      options.contexts.forEach(ctx => enabledContexts.add(ctx))\n    }\n  }\n}\n\nexport { ScopedLogger as Logger }"],"mappings":"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"}