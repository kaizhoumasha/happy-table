{"version":3,"file":"logger-DYZU5RTs.cjs","names":["currentLevel: LogLevel","LOG_LEVELS: Record<LogLevel, number>"],"sources":["../src/utils/logger.ts"],"sourcesContent":["/**\n * Lightweight logging utility for Happy Table\n *\n * IMPORTANT: To preserve source locations, this logger is designed as a development tool.\n * In production, most logging will be disabled anyway.\n */\n\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error'\nexport type LogContext = string | { module: string; operation?: string; [key: string]: unknown }\n\n// Global configuration\nlet currentLevel: LogLevel = 'info'\nlet isDev = false\nconst enabledContexts = new Set<string>(['*'])\n\n// Environment detection\ntry {\n  isDev = import.meta.env.DEV === true\n} catch {\n  isDev = typeof process !== 'undefined' && process.env?.NODE_ENV === 'development'\n}\n\ncurrentLevel = isDev ? 'debug' : 'warn'\n\nconst LOG_LEVELS: Record<LogLevel, number> = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3\n}\n\nfunction shouldLog(level: LogLevel, context?: LogContext): boolean {\n  if (LOG_LEVELS[level] < LOG_LEVELS[currentLevel]) return false\n\n  if (context && !enabledContexts.has('*')) {\n    const contextStr = typeof context === 'string' ? context : context.module\n    return Array.from(enabledContexts).some(enabled =>\n      contextStr.includes(enabled) || enabled.includes(contextStr)\n    )\n  }\n\n  return true\n}\n\nfunction formatMessage(level: LogLevel, message: string, context?: LogContext): string {\n  const timestamp = new Date().toISOString().slice(11, 23)\n  const levelStr = level.toUpperCase().padEnd(5)\n\n  let contextStr = ''\n  if (context) {\n    if (typeof context === 'string') {\n      contextStr = `[${context}]`\n    } else {\n      const { module, operation, ...rest } = context\n      contextStr = `[${module}${operation ? `:${operation}` : ''}]`\n      if (Object.keys(rest).length > 0) {\n        contextStr += ` ${JSON.stringify(rest)}`\n      }\n    }\n  }\n\n  return `${timestamp} ${levelStr} ${contextStr} ${message}`\n}\n\n\n// ==========================================\n// Scoped logger class\n// ==========================================\n\nexport class ScopedLogger {\n  private context: LogContext\n\n  constructor(context: LogContext) {\n    this.context = context\n  }\n\n  private _log(level: LogLevel) {\n    if (!shouldLog(level, this.context)) {\n      return (..._args: any[]) => {}\n    }\n    const timestamp = new Date().toISOString().slice(11, 23)\n    const levelStr = level.toUpperCase().padEnd(5)\n\n    let contextStr = ''\n    if (this.context) {\n      if (typeof this.context === 'string') {\n        contextStr = `[${this.context}]`\n      } else {\n        const { module, operation } = this.context\n        contextStr = `[${module}${operation ? `:${operation}` : ''}]`\n      }\n    }\n    const prefix = `${timestamp} ${levelStr} ${contextStr}`\n    return console[level].bind(console, prefix)\n  }\n\n  get debug() {\n    return this._log('debug')\n  }\n\n  get info() {\n    return this._log('info')\n  }\n\n  get warn() {\n    return this._log('warn')\n  }\n\n  get error() {\n    return this._log('error')\n  }\n\n  /**\n   * Get formatted message for direct console use (preserves source location)\n   * Usage: console.info(logger.format('info', 'message'))\n   */\n  format(level: LogLevel, message: string): string {\n    if (!shouldLog(level, this.context)) return ''\n    return formatMessage(level, message, this.context)\n  }\n\n  /**\n   * Check if logging is enabled for this logger's context\n   */\n  enabled(level: LogLevel): boolean {\n    return shouldLog(level, this.context)\n  }\n\n  operation(operation: string) {\n    const newContext = typeof this.context === 'string'\n      ? { module: this.context, operation }\n      : { ...this.context, operation }\n    return new ScopedLogger(newContext)\n  }\n\n  // High-level console methods\n  // These directly use the console API to preserve line numbers and object interactivity.\n\n  time(label: string) {\n    if (!shouldLog('debug', this.context)) return\n    const timedLabel = this.context && typeof this.context === 'object'\n      ? `[${this.context.module}:${this.context.operation}] ${label}`\n      : label\n    console.time(timedLabel)\n  }\n\n  timeEnd(label: string) {\n    if (!shouldLog('debug', this.context)) return\n    const timedLabel = this.context && typeof this.context === 'object'\n      ? `[${this.context.module}:${this.context.operation}] ${label}`\n      : label\n    console.timeEnd(timedLabel)\n  }\n\n  group(label: string) {\n    if (!shouldLog('debug', this.context)) return\n    this._log('debug')(label)\n    console.groupCollapsed()\n  }\n\n  groupEnd() {\n    if (!shouldLog('debug', this.context)) return\n    console.groupEnd()\n  }\n\n  table(data: any) {\n    if (!shouldLog('debug', this.context)) return\n    console.table(data)\n  }\n}\n\n// ==========================================\n// Factory functions\n// ==========================================\n\nexport function createLogger(context: LogContext) {\n  return new ScopedLogger(context)\n}\n\n// ==========================================\n// Configuration\n// ==========================================\n\nexport const devTools = {\n  setLevel: (level: LogLevel) => { currentLevel = level },\n  enableContexts: (contexts: string[]) => {\n    enabledContexts.clear()\n    contexts.forEach(ctx => enabledContexts.add(ctx))\n  },\n  enableAllContexts: () => {\n    enabledContexts.clear()\n    enabledContexts.add('*')\n  }\n}\n\n// For backward compatibility\nexport const logger = {\n  scope: createLogger,\n  configure: (options: { level?: LogLevel; contexts?: string[] }) => {\n    if (options.level) currentLevel = options.level\n    if (options.contexts) {\n      enabledContexts.clear()\n      options.contexts.forEach(ctx => enabledContexts.add(ctx))\n    }\n  }\n}\n\nexport { ScopedLogger as Logger }"],"mappings":"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"}