{"version":3,"file":"cell-editing-plugin-MA1Py1qS.cjs","names":["cellEditingPlugin: GridPlugin","editState: CellEditState"],"sources":["../src/plugins/core/cell-editing-plugin.ts"],"sourcesContent":["/**\n * Cell Editing Plugin - Core functionality\n *\n * Provides comprehensive cell editing capabilities including:\n * - Mode switching between display and edit modes\n * - Dynamic editor injection based on column configuration\n * - Data synchronization through GridAPI\n * - Event handling for keyboard and mouse interactions\n * - Input validation before data updates\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../index'\nimport type { GridAPI, RowData, ColumnDef, CellValue, CellEditorConfig, CellValidator } from '../../types'\nimport { createLogger } from '../../utils/logger'\n\ninterface CellEditState {\n  activeCell: { rowId: string | number; columnId: string } | null\n  editMode: boolean\n  editValue: CellValue\n  originalValue: CellValue\n  validators: Map<string, CellValidator>\n  editors: Map<string, CellEditorConfig>\n  errorState: { message: string; columnId: string } | null\n}\n\ninterface ValidationResult {\n  valid: boolean\n  message?: string\n}\n\ninterface CellEditPayload {\n  rowId: string | number\n  columnId: string\n  value: CellValue\n  oldValue: CellValue\n  row: RowData\n  column: ColumnDef\n}\n\nconst logger = createLogger({ module: 'Plugin', operation: 'CellEditing' })\n\nexport const cellEditingPlugin: GridPlugin = {\n  name: 'core-cell-editing',\n  version: '1.0.0',\n  dependencies: [], // No special capabilities needed\n\n  install(api: GridAPI, _get: CapabilityGetter) {\n\n    // Internal editing state\n    const editState: CellEditState = {\n      activeCell: null,\n      editMode: false,\n      editValue: null,\n      originalValue: null,\n      validators: new Map(),\n      editors: new Map(),\n      errorState: null,\n    }\n\n    // Register built-in editors\n    setupBuiltinEditors()\n\n    // Extend GridAPI with cell editing methods\n    const originalApi = api as GridAPI & Record<string, unknown>\n\n    // Editor registration methods\n    originalApi.registerCellEditor = (type: string, config: CellEditorConfig) => {\n      editState.editors.set(type, config)\n      logger.info(`Registered editor: ${type}`)\n    }\n\n    originalApi.unregisterCellEditor = (type: string) => {\n      editState.editors.delete(type)\n      logger.info(`Unregistered editor: ${type}`)\n    }\n\n    originalApi.getCellEditor = (type: string): CellEditorConfig | undefined => {\n      return editState.editors.get(type)\n    }\n\n    originalApi.listCellEditors = (): string[] => {\n      return Array.from(editState.editors.keys())\n    }\n\n    // Validator registration methods\n    originalApi.registerCellValidator = (columnId: string, validator: CellValidator) => {\n      editState.validators.set(columnId, validator)\n    }\n\n    originalApi.unregisterCellValidator = (columnId: string) => {\n      editState.validators.delete(columnId)\n    }\n\n    // Cell editing control methods\n    originalApi.startCellEdit = (rowId: string | number, columnId: string): boolean => {\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      const row = data.find(r => (r.id || r.index) === rowId)\n      const column = columns.find((c: ColumnDef) => c.id === columnId)\n\n      if (!row || !column) {\n        logger.warn(`Invalid cell position: ${rowId}, ${columnId}`)\n        return false\n      }\n\n      // Check if column is editable\n      if (column.editable === false) {\n        logger.warn(`Column ${columnId} is not editable`)\n        return false\n      }\n\n      // Check if already editing this cell\n      if (\n        editState.activeCell?.rowId === rowId &&\n        editState.activeCell?.columnId === columnId &&\n        editState.editMode\n      ) {\n        return true\n      }\n\n      // Cancel current edit if editing another cell\n      if (editState.editMode && editState.activeCell) {\n        originalApi.cancelCellEdit?.()\n      }\n\n      // Start editing\n      const value = row[column.field]\n      editState.activeCell = { rowId, columnId }\n      editState.editMode = true\n      editState.editValue = value\n      editState.originalValue = value\n      editState.errorState = null\n\n      // Emit edit start event\n      api.emit('cell-edit-start', {\n        rowId,\n        columnId,\n        value,\n        row,\n        column,\n      } as CellEditPayload)\n\n      return true\n    }\n\n    originalApi.commitCellEdit = async (): Promise<boolean> => {\n      if (!editState.editMode || !editState.activeCell) {\n        return false\n      }\n\n      const { rowId, columnId } = editState.activeCell\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      const row = data.find(r => (r.id || r.index) === rowId)\n      const column = columns.find((c: ColumnDef) => c.id === columnId)\n\n      if (!row || !column) {\n        return false\n      }\n\n      // Validate the new value\n      const validationResult = await validateCellValue(editState.editValue, row, column)\n      if (!validationResult.valid) {\n        editState.errorState = {\n          message: validationResult.message || 'Invalid value',\n          columnId,\n        }\n\n        api.emit('cell-edit-error', {\n          rowId,\n          columnId,\n          error: validationResult.message || 'Validation failed',\n        })\n\n        return false\n      }\n\n      // Update the data\n      const oldValue = editState.originalValue\n      const newValue = editState.editValue\n\n      // Use the edit value directly (parsing can be handled by editor component)\n      const finalValue = newValue\n\n      // Update row data\n      row[column.field] = finalValue\n\n      // Update grid data\n      api.setData([...data])\n\n      // Clear edit state\n      editState.activeCell = null\n      editState.editMode = false\n      editState.editValue = null\n      editState.originalValue = null\n      editState.errorState = null\n\n      // Emit edit complete event\n      api.emit('cell-edit-complete', {\n        rowId,\n        columnId,\n        oldValue,\n        newValue: finalValue,\n      })\n\n      return true\n    }\n\n    originalApi.cancelCellEdit = () => {\n      if (!editState.editMode || !editState.activeCell) {\n        return\n      }\n\n      const { rowId, columnId } = editState.activeCell\n\n      // Emit edit cancel event\n      api.emit('cell-edit-cancel', {\n        rowId,\n        columnId,\n        value: editState.originalValue,\n      })\n\n      // Clear edit state\n      editState.activeCell = null\n      editState.editMode = false\n      editState.editValue = null\n      editState.originalValue = null\n      editState.errorState = null\n    }\n\n    originalApi.updateCellEditValue = (value: any) => {\n      if (editState.editMode) {\n        editState.editValue = value\n        editState.errorState = null // Clear error when value changes\n      }\n    }\n\n    // State access methods\n    originalApi.isEditingCell = (rowId?: string | number, columnId?: string): boolean => {\n      if (!editState.editMode || !editState.activeCell) {\n        return false\n      }\n\n      if (rowId !== undefined && columnId !== undefined) {\n        return editState.activeCell.rowId === rowId && editState.activeCell.columnId === columnId\n      }\n\n      return true\n    }\n\n    originalApi.getEditingCell = () => {\n      return editState.editMode ? editState.activeCell : null\n    }\n\n    originalApi.getEditValue = () => {\n      return editState.editMode ? editState.editValue : null\n    }\n\n    originalApi.getCellEditError = () => {\n      return editState.errorState ? editState.errorState.message : null\n    }\n\n    // Keyboard interaction handling\n    originalApi.handleCellEditKeydown = (event: KeyboardEvent): boolean => {\n      if (!editState.editMode) {\n        return false\n      }\n\n      switch (event.key) {\n        case 'Enter':\n          if (!event.shiftKey) {\n            event.preventDefault()\n            originalApi.commitCellEdit?.()\n            return true\n          }\n          break\n        case 'Escape':\n          event.preventDefault()\n          originalApi.cancelCellEdit?.()\n          return true\n        case 'Tab':\n          event.preventDefault()\n          if (originalApi.commitCellEdit?.()) {\n            // Move to next editable cell\n            const direction = event.shiftKey ? 'prev' : 'next'\n            moveToNextEditableCell(direction)\n          }\n          return true\n      }\n\n      return false\n    }\n\n    // Double-click to edit handler\n    originalApi.handleCellDoubleClick = (rowId: string | number, columnId: string): boolean => {\n      return originalApi.startCellEdit?.(rowId, columnId) || false\n    }\n\n    // Helper functions\n    function setupBuiltinEditors() {\n      // Text editor\n      editState.editors.set('text', {\n        component: 'CellTextEditor',\n      })\n\n      // Number editor\n      editState.editors.set('number', {\n        component: 'CellNumberEditor',\n      })\n\n      // Select editor\n      editState.editors.set('select', {\n        component: 'CellSelectEditor',\n      })\n\n      // Date editor\n      editState.editors.set('date', {\n        component: 'CellDateEditor',\n      })\n\n      // Boolean editor\n      editState.editors.set('boolean', {\n        component: 'CellBooleanEditor',\n      })\n    }\n\n\n    async function validateCellValue(\n      value: any,\n      row: RowData,\n      column: ColumnDef\n    ): Promise<ValidationResult> {\n      // Check column-specific validator first\n      const validator = editState.validators.get(column.id)\n      if (validator) {\n        const result = validator(value, row, column)\n        if (!result.valid) {\n          return result\n        }\n      }\n\n      // Editor validation removed - use column-level validators instead\n\n      // Check required validation\n      if (column.required && (value === null || value === '')) {\n        return {\n          valid: false,\n          message: `${column.title} is required`,\n        }\n      }\n\n      return { valid: true }\n    }\n\n    function moveToNextEditableCell(direction: 'next' | 'prev') {\n      if (!editState.activeCell) return\n\n      const data = api.getData()\n      const columns = api.getState().columns.filter((c: ColumnDef) => c.editable !== false)\n\n      const currentRowIndex = data.findIndex(r => (r.id || r.index) === editState.activeCell!.rowId)\n      const currentColIndex = columns.findIndex(\n        (c: ColumnDef) => c.id === editState.activeCell!.columnId\n      )\n\n      if (currentRowIndex === -1 || currentColIndex === -1) return\n\n      let nextRowIndex = currentRowIndex\n      let nextColIndex = currentColIndex\n\n      if (direction === 'next') {\n        nextColIndex++\n        if (nextColIndex >= columns.length) {\n          nextColIndex = 0\n          nextRowIndex++\n          if (nextRowIndex >= data.length) {\n            nextRowIndex = 0\n          }\n        }\n      } else {\n        nextColIndex--\n        if (nextColIndex < 0) {\n          nextColIndex = columns.length - 1\n          nextRowIndex--\n          if (nextRowIndex < 0) {\n            nextRowIndex = data.length - 1\n          }\n        }\n      }\n\n      const nextRow = data[nextRowIndex]\n      const nextColumn = columns[nextColIndex]\n\n      if (nextRow && nextColumn) {\n        const nextRowId = nextRow.id || nextRowIndex\n        if (typeof nextRowId === 'string' || typeof nextRowId === 'number') {\n          originalApi.startCellEdit?.(nextRowId, nextColumn.id)\n        }\n      }\n    }\n\n    // Listen for interaction contract events\n    if (originalApi.on) {\n      originalApi.on('cell-double-click', (payload: any) => {\n        if (payload.position) {\n          originalApi.handleCellDoubleClick?.(payload.position.rowId, payload.position.columnId)\n        }\n      })\n\n      // Note: keyboard-navigation event not defined in GridEvents\n      // TODO: Add keyboard-navigation to GridEvents or handle differently\n    }\n\n    logger.info('Cell editing functionality installed')\n  },\n\n  cleanup() {\n    logger.info('Cell editing plugin cleaned up')\n  },\n}\n"],"mappings":"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"}