{"version":3,"file":"keyboard-navigation-plugin-Dd7Ft4I4.cjs","names":["keyboardNavigationPlugin: GridPlugin","focusState: VirtualFocusState","config: KeyboardConfig","gridDimensions: GridDimensions","gridContainer: HTMLElement | null","activeElement: HTMLElement | null","bindings: KeyBinding[]","parts: string[]"],"sources":["../src/plugins/core/keyboard-navigation-plugin.ts"],"sourcesContent":["/**\n * Keyboard Navigation Plugin - Core functionality\n *\n * Provides comprehensive keyboard navigation capabilities following WCAG 2.1 AA standards\n * and Excel-like navigation patterns. Implements virtual focus system with DOM synchronization\n * and configurable key bindings.\n *\n * Features:\n * - Arrow key navigation (Up/Down/Left/Right)\n * - Home/End navigation (row start/end, grid start/end)\n * - Page Up/Down navigation\n * - Tab/Shift+Tab for cell navigation\n * - Enter for edit mode activation\n * - F2 for edit mode\n * - Escape to exit edit mode\n * - Space for selection toggle\n * - Ctrl+A for select all\n * - Excel-style keyboard shortcuts\n * - Virtual focus system with ARIA attributes\n * - Integration with editing and selection plugins\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../index'\nimport type { GridAPI } from '../../types'\nimport type { CellPosition, InteractionPayload } from '../../renderers/base/interaction-contract'\nimport { createLogger } from '../../utils/logger'\n\ninterface VirtualFocusState {\n  activeCell: CellPosition | null\n  focusVisible: boolean\n  navigationMode: 'cell' | 'row' | 'column'\n  focusStack: CellPosition[]\n  lastDirection: NavigationDirection | null\n}\n\ninterface KeyboardConfig {\n  enableNavigation: boolean\n  enableEditing: boolean\n  enableSelection: boolean\n  enableShortcuts: boolean\n  customKeyBindings: Map<string, KeyBinding>\n  navigationBehavior: 'wrap' | 'stop' | 'cycle'\n  pageSize: number\n}\n\ninterface KeyBinding {\n  key: string\n  modifiers?: {\n    ctrl?: boolean\n    shift?: boolean\n    alt?: boolean\n    meta?: boolean\n  }\n  action: KeyboardAction\n  context?: 'always' | 'editing' | 'navigation'\n  description?: string\n}\n\ninterface KeyboardAction {\n  type: 'navigation' | 'editing' | 'selection' | 'custom'\n  command: string\n  parameters?: Record<string, any>\n}\n\ntype NavigationDirection =\n  | 'up'\n  | 'down'\n  | 'left'\n  | 'right'\n  | 'home'\n  | 'end'\n  | 'pageUp'\n  | 'pageDown'\n  | 'firstRow'\n  | 'lastRow'\n  | 'firstColumn'\n  | 'lastColumn'\n\ninterface GridDimensions {\n  rowCount: number\n  columnCount: number\n  visibleRowStart: number\n  visibleRowEnd: number\n  visibleColumnStart: number\n  visibleColumnEnd: number\n}\n\n// Logger for keyboard navigation plugin - created at module level\nconst logger = createLogger({ module: 'Plugin', operation: 'KeyboardNavigation' })\n\nexport const keyboardNavigationPlugin: GridPlugin = {\n  name: 'core-keyboard-navigation',\n  version: '1.0.0',\n  dependencies: [], // No special capabilities needed\n\n  install(api: GridAPI, _get: CapabilityGetter) {\n\n    // Internal navigation state\n    const focusState: VirtualFocusState = {\n      activeCell: null,\n      focusVisible: false,\n      navigationMode: 'cell',\n      focusStack: [],\n      lastDirection: null,\n    }\n\n    const config: KeyboardConfig = {\n      enableNavigation: true,\n      enableEditing: true,\n      enableSelection: true,\n      enableShortcuts: true,\n      customKeyBindings: new Map(),\n      navigationBehavior: 'wrap',\n      pageSize: 10,\n    }\n\n    // Grid dimensions cache\n    let gridDimensions: GridDimensions = {\n      rowCount: 0,\n      columnCount: 0,\n      visibleRowStart: 0,\n      visibleRowEnd: 0,\n      visibleColumnStart: 0,\n      visibleColumnEnd: 0,\n    }\n\n    // DOM elements cache\n    let gridContainer: HTMLElement | null = null\n    let activeElement: HTMLElement | null = null\n\n    // Event listeners registry\n    const eventListeners = new Map<string, (() => void)[]>()\n\n    // Setup default key bindings\n    setupDefaultKeyBindings()\n\n    // Extend GridAPI with keyboard navigation methods\n    const originalApi = api as any\n\n    // === CONFIGURATION METHODS ===\n    originalApi.setKeyboardConfig = (updates: Partial<KeyboardConfig>) => {\n      Object.assign(config, updates)\n      api.emit('keyboard-config-change', config)\n    }\n\n    originalApi.getKeyboardConfig = () => ({ ...config })\n\n    originalApi.registerKeyBinding = (binding: KeyBinding) => {\n      const key = createKeySignature(binding.key, binding.modifiers)\n      config.customKeyBindings.set(key, binding)\n      api.emit('key-binding-registered', { key, binding })\n    }\n\n    originalApi.unregisterKeyBinding = (key: string, modifiers?: KeyBinding['modifiers']) => {\n      const keySignature = createKeySignature(key, modifiers)\n      const wasRemoved = config.customKeyBindings.delete(keySignature)\n      if (wasRemoved) {\n        api.emit('key-binding-unregistered', { key: keySignature })\n      }\n      return wasRemoved\n    }\n\n    originalApi.getKeyBindings = () => {\n      return new Map(config.customKeyBindings)\n    }\n\n    // === FOCUS MANAGEMENT METHODS ===\n    originalApi.setActiveCell = (\n      position: CellPosition | null,\n      options: {\n        ensureVisible?: boolean\n        reason?: 'programmatic' | 'user' | 'navigation'\n        updateDOM?: boolean\n      } = {}\n    ) => {\n      const { ensureVisible = true, reason: _reason = 'programmatic', updateDOM = true } = options\n\n      // Validate position\n      if (position && !isValidCellPosition(position)) {\n        logger.warn('Invalid cell position:', { module: 'KeyboardNavigation' }, position)\n        return false\n      }\n\n      // Update focus stack\n      if (focusState.activeCell && position) {\n        focusState.focusStack.push(focusState.activeCell)\n        if (focusState.focusStack.length > 10) {\n          focusState.focusStack.shift() // Keep stack limited\n        }\n      }\n\n      // Set new active cell\n      // Note: Previous cell tracking available for undo functionality\n      focusState.activeCell = position\n      focusState.focusVisible = true\n\n      // Update DOM focus and ARIA attributes\n      if (updateDOM) {\n        updateDOMFocus(position)\n      }\n\n      // Ensure cell is visible in viewport\n      if (position && ensureVisible) {\n        ensureCellVisible(position)\n      }\n\n      // Update internal grid state (if available)\n      if ((api as any).__internal?.setFocusedCell) {\n        ;(api as any).__internal.setFocusedCell(position)\n      }\n\n      // Emit focus change event\n      api.emit('cell-focus-change', {\n        rowId: position ? position.rowId : null,\n        columnId: position ? position.columnId : null,\n      })\n\n      return true\n    }\n\n    originalApi.getActiveCell = () => focusState.activeCell\n\n    originalApi.getFocusState = () => ({ ...focusState })\n\n    originalApi.moveFocus = (\n      direction: NavigationDirection,\n      options: {\n        extend?: boolean\n        wrap?: boolean\n        pageSize?: number\n      } = {}\n    ) => {\n      if (!focusState.activeCell) {\n        // Initialize focus to first cell\n        const firstCell = getFirstCell()\n        if (firstCell) {\n          originalApi.setActiveCell(firstCell, { reason: 'navigation' })\n        }\n        return\n      }\n\n      const newPosition = calculateNewPosition(focusState.activeCell, direction, options)\n      if (newPosition) {\n        focusState.lastDirection = direction\n        originalApi.setActiveCell(newPosition, { reason: 'navigation' })\n\n        // Handle selection extension\n        if (options.extend && originalApi.isRowSelected && originalApi.selectRange) {\n          handleSelectionExtension(focusState.activeCell, newPosition)\n        }\n      }\n    }\n\n    originalApi.focusPreviousCell = () => {\n      if (focusState.focusStack.length > 0) {\n        const previousCell = focusState.focusStack.pop()\n        if (previousCell) {\n          originalApi.setActiveCell(previousCell, { reason: 'navigation' })\n        }\n      }\n    }\n\n    // === KEYBOARD EVENT HANDLING ===\n    originalApi.handleKeyboardEvent = (event: KeyboardEvent): boolean => {\n      if (!config.enableNavigation) {\n        return false\n      }\n\n      // Don't handle events from input elements unless they're our editors\n      if (\n        isInputElement(event.target as HTMLElement) &&\n        !isGridEditor(event.target as HTMLElement)\n      ) {\n        return false\n      }\n\n      const keySignature = createKeySignature(event.key, {\n        ctrl: event.ctrlKey,\n        shift: event.shiftKey,\n        alt: event.altKey,\n        meta: event.metaKey,\n      })\n\n      // Check custom key bindings first\n      const customBinding = config.customKeyBindings.get(keySignature)\n      if (customBinding && shouldExecuteBinding(customBinding)) {\n        return executeKeyBinding(customBinding, event)\n      }\n\n      // Handle built-in navigation keys\n      return handleBuiltinKeyboardEvent(event)\n    }\n\n    originalApi.initializeKeyboardHandling = (container: HTMLElement) => {\n      gridContainer = container\n\n      // Set up container for keyboard navigation\n      setupKeyboardContainer(container)\n\n      // Add keyboard event listener\n      const keydownHandler = (event: KeyboardEvent) => {\n        const handled = originalApi.handleKeyboardEvent(event)\n        if (handled) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n      }\n\n      container.addEventListener('keydown', keydownHandler)\n\n      // Store cleanup function\n      registerEventListener('keydown', () => {\n        container.removeEventListener('keydown', keydownHandler)\n      })\n\n      // Initialize focus\n      updateGridDimensions()\n      const firstCell = getFirstCell()\n      if (firstCell) {\n        originalApi.setActiveCell(firstCell, { reason: 'programmatic' })\n      }\n    }\n\n    // === INTEGRATION WITH OTHER PLUGINS ===\n    originalApi.enterEditMode = () => {\n      if (!config.enableEditing || !focusState.activeCell) {\n        return false\n      }\n\n      if (originalApi.startCellEdit) {\n        return originalApi.startCellEdit(\n          focusState.activeCell.rowId,\n          focusState.activeCell.columnId\n        )\n      }\n\n      // Fallback: emit edit start event\n      api.emit('cell-edit-start', {\n        rowId: focusState.activeCell.rowId,\n        columnId: focusState.activeCell.columnId,\n        value: null, // We don't have the value here\n      })\n\n      return true\n    }\n\n    originalApi.exitEditMode = (commit: boolean = true) => {\n      if (commit && originalApi.commitCellEdit) {\n        return originalApi.commitCellEdit()\n      } else if (!commit && originalApi.cancelCellEdit) {\n        originalApi.cancelCellEdit()\n        return true\n      }\n\n      // Fallback: emit edit cancel event\n      if (focusState.activeCell) {\n        api.emit('cell-edit-cancel', {\n          rowId: focusState.activeCell.rowId,\n          columnId: focusState.activeCell.columnId,\n          value: null, // We don't have the value here\n        })\n      }\n\n      return true\n    }\n\n    originalApi.toggleCellSelection = () => {\n      if (!config.enableSelection || !focusState.activeCell) {\n        return false\n      }\n\n      if (originalApi.toggleRowSelection) {\n        originalApi.toggleRowSelection(focusState.activeCell.rowId)\n        return true\n      }\n\n      // Fallback: emit selection event\n      api.emit('row-select', {\n        rowId: focusState.activeCell.rowId,\n        selected: true, // Assuming toggle means select\n        selectedRows: [], // We don't have access to current selection here\n      })\n\n      return true\n    }\n\n    // === HELPER FUNCTIONS ===\n    function setupDefaultKeyBindings() {\n      const bindings: KeyBinding[] = [\n        // Navigation\n        { key: 'ArrowUp', action: { type: 'navigation', command: 'moveUp' } },\n        { key: 'ArrowDown', action: { type: 'navigation', command: 'moveDown' } },\n        { key: 'ArrowLeft', action: { type: 'navigation', command: 'moveLeft' } },\n        { key: 'ArrowRight', action: { type: 'navigation', command: 'moveRight' } },\n        { key: 'Home', action: { type: 'navigation', command: 'moveHome' } },\n        { key: 'End', action: { type: 'navigation', command: 'moveEnd' } },\n        { key: 'PageUp', action: { type: 'navigation', command: 'pageUp' } },\n        { key: 'PageDown', action: { type: 'navigation', command: 'pageDown' } },\n\n        // Extended navigation with Ctrl\n        {\n          key: 'Home',\n          modifiers: { ctrl: true },\n          action: { type: 'navigation', command: 'moveFirstCell' },\n        },\n        {\n          key: 'End',\n          modifiers: { ctrl: true },\n          action: { type: 'navigation', command: 'moveLastCell' },\n        },\n        {\n          key: 'ArrowUp',\n          modifiers: { ctrl: true },\n          action: { type: 'navigation', command: 'moveFirstRow' },\n        },\n        {\n          key: 'ArrowDown',\n          modifiers: { ctrl: true },\n          action: { type: 'navigation', command: 'moveLastRow' },\n        },\n\n        // Selection extension\n        {\n          key: 'ArrowUp',\n          modifiers: { shift: true },\n          action: { type: 'selection', command: 'extendUp' },\n        },\n        {\n          key: 'ArrowDown',\n          modifiers: { shift: true },\n          action: { type: 'selection', command: 'extendDown' },\n        },\n        {\n          key: 'ArrowLeft',\n          modifiers: { shift: true },\n          action: { type: 'selection', command: 'extendLeft' },\n        },\n        {\n          key: 'ArrowRight',\n          modifiers: { shift: true },\n          action: { type: 'selection', command: 'extendRight' },\n        },\n\n        // Editing\n        { key: 'Enter', action: { type: 'editing', command: 'startEdit' }, context: 'navigation' },\n        { key: 'F2', action: { type: 'editing', command: 'startEdit' }, context: 'navigation' },\n        { key: 'Escape', action: { type: 'editing', command: 'cancelEdit' }, context: 'editing' },\n        { key: 'Enter', action: { type: 'editing', command: 'commitEdit' }, context: 'editing' },\n        {\n          key: 'Tab',\n          action: { type: 'editing', command: 'commitAndMoveNext' },\n          context: 'editing',\n        },\n        {\n          key: 'Tab',\n          modifiers: { shift: true },\n          action: { type: 'editing', command: 'commitAndMovePrev' },\n          context: 'editing',\n        },\n\n        // Selection\n        { key: ' ', action: { type: 'selection', command: 'toggle' } },\n        {\n          key: 'a',\n          modifiers: { ctrl: true },\n          action: { type: 'selection', command: 'selectAll' },\n        },\n\n        // Tab navigation\n        { key: 'Tab', action: { type: 'navigation', command: 'moveNext' }, context: 'navigation' },\n        {\n          key: 'Tab',\n          modifiers: { shift: true },\n          action: { type: 'navigation', command: 'movePrev' },\n          context: 'navigation',\n        },\n      ]\n\n      bindings.forEach(binding => {\n        const key = createKeySignature(binding.key, binding.modifiers)\n        config.customKeyBindings.set(key, binding)\n      })\n    }\n\n    function createKeySignature(key: string, modifiers?: KeyBinding['modifiers']): string {\n      const parts: string[] = []\n\n      if (modifiers?.ctrl) parts.push('Ctrl')\n      if (modifiers?.shift) parts.push('Shift')\n      if (modifiers?.alt) parts.push('Alt')\n      if (modifiers?.meta) parts.push('Meta')\n\n      parts.push(key)\n\n      return parts.join('+')\n    }\n\n    function shouldExecuteBinding(binding: KeyBinding): boolean {\n      if (!binding.context) return true\n\n      const isEditing = originalApi.isEditingCell && originalApi.isEditingCell()\n\n      switch (binding.context) {\n        case 'always':\n          return true\n        case 'editing':\n          return isEditing\n        case 'navigation':\n          return !isEditing\n        default:\n          return true\n      }\n    }\n\n    function executeKeyBinding(binding: KeyBinding, event: KeyboardEvent): boolean {\n      const { action } = binding\n\n      try {\n        switch (action.type) {\n          case 'navigation':\n            return executeNavigationAction(action.command, action.parameters)\n          case 'editing':\n            return executeEditingAction(action.command, action.parameters)\n          case 'selection':\n            return executeSelectionAction(action.command, action.parameters)\n          case 'custom':\n            return executeCustomAction(action.command, action.parameters, event)\n          default:\n            logger.warn('Unknown action type:', { module: 'KeyboardNavigation', action: action.type })\n            return false\n        }\n      } catch (error) {\n        logger.error('Error executing key binding:', { module: 'KeyboardNavigation' }, error)\n        return false\n      }\n    }\n\n    function executeNavigationAction(command: string, params?: Record<string, any>): boolean {\n      switch (command) {\n        case 'moveUp':\n          originalApi.moveFocus('up', params)\n          return true\n        case 'moveDown':\n          originalApi.moveFocus('down', params)\n          return true\n        case 'moveLeft':\n          originalApi.moveFocus('left', params)\n          return true\n        case 'moveRight':\n          originalApi.moveFocus('right', params)\n          return true\n        case 'moveHome':\n          originalApi.moveFocus('home', params)\n          return true\n        case 'moveEnd':\n          originalApi.moveFocus('end', params)\n          return true\n        case 'pageUp':\n          originalApi.moveFocus('pageUp', params)\n          return true\n        case 'pageDown':\n          originalApi.moveFocus('pageDown', params)\n          return true\n        case 'moveFirstCell':\n          originalApi.moveFocus('firstRow', params)\n          return true\n        case 'moveLastCell':\n          originalApi.moveFocus('lastRow', params)\n          return true\n        case 'moveFirstRow':\n          originalApi.moveFocus('firstRow', params)\n          return true\n        case 'moveLastRow':\n          originalApi.moveFocus('lastRow', params)\n          return true\n        case 'moveNext':\n          return moveToNextCell(1)\n        case 'movePrev':\n          return moveToNextCell(-1)\n        default:\n          logger.warn('Unknown navigation command:', { module: 'KeyboardNavigation', command })\n          return false\n      }\n    }\n\n    function executeEditingAction(command: string, _params?: Record<string, any>): boolean {\n      switch (command) {\n        case 'startEdit':\n          return originalApi.enterEditMode()\n        case 'commitEdit':\n          return originalApi.exitEditMode(true)\n        case 'cancelEdit':\n          return originalApi.exitEditMode(false)\n        case 'commitAndMoveNext':\n          if (originalApi.exitEditMode(true)) {\n            return moveToNextCell(1)\n          }\n          return false\n        case 'commitAndMovePrev':\n          if (originalApi.exitEditMode(true)) {\n            return moveToNextCell(-1)\n          }\n          return false\n        default:\n          logger.warn('Unknown editing command:', { module: 'KeyboardNavigation', command })\n          return false\n      }\n    }\n\n    function executeSelectionAction(command: string, params?: Record<string, any>): boolean {\n      switch (command) {\n        case 'toggle':\n          return originalApi.toggleCellSelection()\n        case 'selectAll':\n          if (originalApi.selectAll) {\n            originalApi.selectAll()\n            return true\n          }\n          return false\n        case 'extendUp':\n          originalApi.moveFocus('up', { extend: true, ...params })\n          return true\n        case 'extendDown':\n          originalApi.moveFocus('down', { extend: true, ...params })\n          return true\n        case 'extendLeft':\n          originalApi.moveFocus('left', { extend: true, ...params })\n          return true\n        case 'extendRight':\n          originalApi.moveFocus('right', { extend: true, ...params })\n          return true\n        default:\n          logger.warn('Unknown selection command:', { module: 'KeyboardNavigation', command })\n          return false\n      }\n    }\n\n    function executeCustomAction(\n      command: string,\n      params?: Record<string, any>,\n      event?: KeyboardEvent\n    ): boolean {\n      // Emit custom action event for external handling\n      api.emit('keyboard-custom-action', {\n        action: command,\n        context: {\n          parameters: params,\n          event,\n          activeCell: focusState.activeCell,\n        },\n      })\n      return true\n    }\n\n    function handleBuiltinKeyboardEvent(_event: KeyboardEvent): boolean {\n      // Handle events not covered by custom bindings\n      // This is a fallback for any missed cases\n      return false\n    }\n\n    function calculateNewPosition(\n      current: CellPosition,\n      direction: NavigationDirection,\n      options: { wrap?: boolean; pageSize?: number } = {}\n    ): CellPosition | null {\n      const { wrap = config.navigationBehavior === 'wrap', pageSize = config.pageSize } = options\n      updateGridDimensions()\n\n      let newRowIndex = current.rowIndex\n      let newColumnIndex = current.columnIndex\n\n      switch (direction) {\n        case 'up':\n          newRowIndex = Math.max(0, current.rowIndex - 1)\n          if (wrap && newRowIndex === current.rowIndex && current.rowIndex === 0) {\n            newRowIndex = gridDimensions.rowCount - 1\n          }\n          break\n\n        case 'down':\n          newRowIndex = Math.min(gridDimensions.rowCount - 1, current.rowIndex + 1)\n          if (\n            wrap &&\n            newRowIndex === current.rowIndex &&\n            current.rowIndex === gridDimensions.rowCount - 1\n          ) {\n            newRowIndex = 0\n          }\n          break\n\n        case 'left':\n          newColumnIndex = Math.max(0, current.columnIndex - 1)\n          if (wrap && newColumnIndex === current.columnIndex && current.columnIndex === 0) {\n            newColumnIndex = gridDimensions.columnCount - 1\n          }\n          break\n\n        case 'right':\n          newColumnIndex = Math.min(gridDimensions.columnCount - 1, current.columnIndex + 1)\n          if (\n            wrap &&\n            newColumnIndex === current.columnIndex &&\n            current.columnIndex === gridDimensions.columnCount - 1\n          ) {\n            newColumnIndex = 0\n          }\n          break\n\n        case 'home':\n          newColumnIndex = 0\n          break\n\n        case 'end':\n          newColumnIndex = gridDimensions.columnCount - 1\n          break\n\n        case 'pageUp':\n          newRowIndex = Math.max(0, current.rowIndex - pageSize)\n          break\n\n        case 'pageDown':\n          newRowIndex = Math.min(gridDimensions.rowCount - 1, current.rowIndex + pageSize)\n          break\n\n        case 'firstRow':\n          newRowIndex = 0\n          newColumnIndex = 0\n          break\n\n        case 'lastRow':\n          newRowIndex = gridDimensions.rowCount - 1\n          newColumnIndex = gridDimensions.columnCount - 1\n          break\n\n        case 'firstColumn':\n          newColumnIndex = 0\n          break\n\n        case 'lastColumn':\n          newColumnIndex = gridDimensions.columnCount - 1\n          break\n\n        default:\n          return null\n      }\n\n      // Don't move if position didn't change (unless wrapping)\n      if (newRowIndex === current.rowIndex && newColumnIndex === current.columnIndex && !wrap) {\n        return null\n      }\n\n      return createCellPosition(newRowIndex, newColumnIndex)\n    }\n\n    function createCellPosition(rowIndex: number, columnIndex: number): CellPosition | null {\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      if (\n        rowIndex < 0 ||\n        rowIndex >= data.length ||\n        columnIndex < 0 ||\n        columnIndex >= columns.length\n      ) {\n        return null\n      }\n\n      const row = data[rowIndex]\n      const column = columns[columnIndex]\n\n      if (!row || !column) {\n        return null\n      }\n\n      return {\n        rowIndex,\n        columnIndex,\n        rowId: row.id || rowIndex,\n        columnId: column.id,\n      }\n    }\n\n    function getFirstCell(): CellPosition | null {\n      return createCellPosition(0, 0)\n    }\n\n    function isValidCellPosition(position: CellPosition): boolean {\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      return (\n        position.rowIndex >= 0 &&\n        position.rowIndex < data.length &&\n        position.columnIndex >= 0 &&\n        position.columnIndex < columns.length\n      )\n    }\n\n    function updateGridDimensions() {\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      gridDimensions = {\n        rowCount: data.length,\n        columnCount: columns.length,\n        visibleRowStart: 0,\n        visibleRowEnd: data.length - 1,\n        visibleColumnStart: 0,\n        visibleColumnEnd: columns.length - 1,\n      }\n    }\n\n    function updateDOMFocus(position: CellPosition | null) {\n      // Clear previous focus styling\n      if (activeElement) {\n        activeElement.classList.remove('grid-cell-focused')\n        activeElement.removeAttribute('tabindex')\n        activeElement.setAttribute('aria-selected', 'false')\n      }\n\n      if (!position || !gridContainer) {\n        activeElement = null\n        return\n      }\n\n      // Find the DOM element for the new active cell\n      const cellSelector = `[data-row-id=\"${position.rowId}\"][data-column-id=\"${position.columnId}\"]`\n      const cellElement = gridContainer.querySelector(cellSelector) as HTMLElement\n\n      if (cellElement) {\n        // Update visual focus\n        cellElement.classList.add('grid-cell-focused')\n        cellElement.setAttribute('tabindex', '0')\n        cellElement.setAttribute('aria-selected', 'true')\n\n        // Update ARIA attributes for accessibility\n        updateARIAAttributes(cellElement, position)\n\n        activeElement = cellElement\n\n        // Set DOM focus\n        cellElement.focus({ preventScroll: true })\n      }\n    }\n\n    function updateARIAAttributes(element: HTMLElement, position: CellPosition) {\n      // Set ARIA role and properties for accessibility\n      element.setAttribute('role', 'gridcell')\n      element.setAttribute('aria-rowindex', String(position.rowIndex + 1))\n      element.setAttribute('aria-colindex', String(position.columnIndex + 1))\n\n      // Update container ARIA attributes\n      if (gridContainer) {\n        gridContainer.setAttribute(\n          'aria-activedescendant',\n          element.id || `cell-${position.rowId}-${position.columnId}`\n        )\n        gridContainer.setAttribute('aria-rowcount', String(gridDimensions.rowCount))\n        gridContainer.setAttribute('aria-colcount', String(gridDimensions.columnCount))\n      }\n    }\n\n    function ensureCellVisible(position: CellPosition) {\n      if (!gridContainer || !originalApi.__internal?.updateScrollPosition) {\n        return\n      }\n\n      // Calculate if cell is visible and scroll if needed\n      const cellElement = gridContainer.querySelector(\n        `[data-row-id=\"${position.rowId}\"][data-column-id=\"${position.columnId}\"]`\n      ) as HTMLElement\n\n      if (cellElement) {\n        cellElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest',\n          inline: 'nearest',\n        })\n      }\n    }\n\n    function setupKeyboardContainer(container: HTMLElement) {\n      // Configure container for keyboard navigation\n      container.setAttribute('role', 'grid')\n      container.setAttribute('tabindex', '0')\n      container.setAttribute('aria-label', 'Data grid with keyboard navigation')\n      container.setAttribute('aria-multiselectable', 'true')\n\n      // Add CSS class for styling\n      container.classList.add('keyboard-navigation-enabled')\n    }\n\n    function moveToNextCell(direction: 1 | -1): boolean {\n      if (!focusState.activeCell) return false\n\n      const columns = api.getState().columns\n      let newRowIndex = focusState.activeCell.rowIndex\n      let newColumnIndex = focusState.activeCell.columnIndex\n\n      if (direction === 1) {\n        newColumnIndex++\n        if (newColumnIndex >= columns.length) {\n          newColumnIndex = 0\n          newRowIndex++\n        }\n      } else {\n        newColumnIndex--\n        if (newColumnIndex < 0) {\n          newColumnIndex = columns.length - 1\n          newRowIndex--\n        }\n      }\n\n      const newPosition = createCellPosition(newRowIndex, newColumnIndex)\n      if (newPosition) {\n        originalApi.setActiveCell(newPosition, { reason: 'navigation' })\n        return true\n      }\n\n      return false\n    }\n\n    function handleSelectionExtension(startPosition: CellPosition, endPosition: CellPosition) {\n      if (!originalApi.selectRange) return\n\n      originalApi.selectRange(startPosition.rowId, endPosition.rowId)\n    }\n\n    function isInputElement(element: HTMLElement): boolean {\n      const tagName = element.tagName.toLowerCase()\n      return tagName === 'input' || tagName === 'textarea' || tagName === 'select'\n    }\n\n    function isGridEditor(element: HTMLElement): boolean {\n      return (\n        element.classList.contains('grid-cell-editor') ||\n        element.closest('.grid-cell-editor') !== null\n      )\n    }\n\n    function registerEventListener(event: string, cleanup: () => void) {\n      if (!eventListeners.has(event)) {\n        eventListeners.set(event, [])\n      }\n      eventListeners.get(event)!.push(cleanup)\n    }\n\n    // === EVENT INTEGRATION ===\n    // Listen for interaction contract events\n    if (originalApi.on) {\n      originalApi.on('cell-click', (payload: InteractionPayload) => {\n        if (payload.position) {\n          originalApi.setActiveCell(payload.position, { reason: 'user' })\n        }\n      })\n\n      originalApi.on('cell-focus', (payload: InteractionPayload) => {\n        if (payload.position) {\n          originalApi.setActiveCell(payload.position, { reason: 'user' })\n        }\n      })\n\n      // Listen for data changes to update dimensions\n      originalApi.on('data-changed', () => {\n        updateGridDimensions()\n\n        // Validate current focus\n        if (focusState.activeCell && !isValidCellPosition(focusState.activeCell)) {\n          const firstCell = getFirstCell()\n          if (firstCell) {\n            originalApi.setActiveCell(firstCell, { reason: 'programmatic' })\n          }\n        }\n      })\n\n      originalApi.on('columns-changed', () => {\n        updateGridDimensions()\n      })\n    }\n\n    logger.info('Comprehensive keyboard navigation installed')\n  },\n\n  cleanup() {\n    // Clean up event listeners\n    const logger = createLogger({ module: 'Plugin', operation: 'KeyboardNavigation' })\n    logger.info('Cleaned up')\n  },\n}\n"],"mappings":"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"}