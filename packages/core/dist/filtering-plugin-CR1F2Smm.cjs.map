{"version":3,"file":"filtering-plugin-CR1F2Smm.cjs","names":["filteringPlugin: GridPlugin","activeFilters: ExtendedFilterConfig[]","worker: Worker | null","lastSignature: string","lastFilteredData: any[] | null","inflightId: string | null","offConfigChanged: (() => void) | null","filteringInterceptor: DataInterceptor","extendedFilter: ExtendedFilterConfig","quickFilter: ExtendedFilterConfig"],"sources":["../src/plugins/core/filter-parsers.ts","../src/plugins/core/filter-ops.ts","../src/plugins/core/filtering-plugin.ts"],"sourcesContent":["// Shared parsing helpers for filter predicates across inline and worker paths.\n\nexport function toLower(v: any): string {\n  return String(v ?? '').toLowerCase()\n}\n\nexport function parseNumber(v: any): number | null {\n  if (typeof v === 'number' && Number.isFinite(v)) return v\n  if (typeof v === 'string' && v.trim() !== '') {\n    const nv = Number(v)\n    return Number.isFinite(nv) ? nv : null\n  }\n  return null\n}\n\nexport function parseDateTime(v: any): number | null {\n  if (v instanceof Date) return v.getTime()\n  if (typeof v === 'number' && Number.isFinite(v)) return v\n  if (typeof v === 'string' && v.trim() !== '') {\n    const t = Date.parse(v)\n    return Number.isFinite(t) ? t : null\n  }\n  return null\n}\n\nexport function parseClockTime(v: any): number | null {\n  if (typeof v !== 'string') return null\n  const s = v.trim()\n  const m = s.match(/^(\\d{1,2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{1,3}))?)?(?:\\s*(AM|PM))?$/i)\n  if (!m) return null\n  let hh = parseInt(m[1]!, 10)\n  const mm = parseInt(m[2]!, 10)\n  const ss = m[3] ? parseInt(m[3], 10) : 0\n  if (mm >= 60 || ss >= 60) return null\n  const mer = m[5]\n  if (mer) {\n    const upper = mer.toUpperCase()\n    if (upper === 'PM' && hh < 12) hh += 12\n    if (upper === 'AM' && hh === 12) hh = 0\n  }\n  if (hh >= 24) return null\n  return hh * 3600 + mm * 60 + ss\n}\n\nexport function parseDuration(v: any): number | null {\n  if (typeof v === 'number' && Number.isFinite(v)) return v\n  if (typeof v !== 'string') return null\n  const s = v.trim()\n  if (!s) return null\n  const iso = s.match(/^P(?=\\d|T)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$/i)\n  if (iso) {\n    let ms = 0\n    const year = iso[1] ? parseInt(iso[1], 10) : 0\n    const month = iso[2] ? parseInt(iso[2], 10) : 0\n    const week = iso[3] ? parseInt(iso[3], 10) : 0\n    const day = iso[4] ? parseInt(iso[4], 10) : 0\n    const hour = iso[6] ? parseInt(iso[6], 10) : 0\n    const minute = iso[7] ? parseInt(iso[7], 10) : 0\n    const second = iso[8] ? parseInt(iso[8], 10) : 0\n    ms += year * 365 * 24 * 3600 * 1000\n    ms += month * 30 * 24 * 3600 * 1000\n    ms += week * 7 * 24 * 3600 * 1000\n    ms += day * 24 * 3600 * 1000\n    ms += hour * 3600 * 1000\n    ms += minute * 60 * 1000\n    ms += second * 1000\n    return ms\n  }\n  if (/(\\d+\\s+(years?|months?|weeks?|days?|hours?|hrs?|minutes?|mins?|seconds?|secs?))/i.test(s)) {\n    const parts = s.toLowerCase().split(/\\s+/)\n    let ms = 0\n    for (let i = 0; i < parts.length; i++) {\n      const rawValue = parts[i]\n      if (!rawValue) continue\n      const n = parseFloat(rawValue)\n      if (!Number.isFinite(n)) continue\n      const unit = parts[i + 1]\n      if (!unit) continue\n      const normalizedUnit = unit.toLowerCase()\n      if (/^years?/.test(normalizedUnit)) ms += n * 365 * 24 * 3600 * 1000\n      else if (/^months?/.test(normalizedUnit)) ms += n * 30 * 24 * 3600 * 1000\n      else if (/^weeks?/.test(normalizedUnit)) ms += n * 7 * 24 * 3600 * 1000\n      else if (/^days?/.test(normalizedUnit)) ms += n * 24 * 3600 * 1000\n      else if (/^(hours?|hrs?)$/.test(normalizedUnit)) ms += n * 3600 * 1000\n      else if (/^(minutes?|mins?)$/.test(normalizedUnit)) ms += n * 60 * 1000\n      else if (/^(seconds?|secs?)$/.test(normalizedUnit)) ms += n * 1000\n      i += 1\n    }\n    return ms || null\n  }\n  const m = s.match(/^(\\d{1,3}):(\\d{2})(?::(\\d{2}))?$/)\n  if (m) {\n    const hh = parseInt(m[1]!, 10)\n    const mm = parseInt(m[2]!, 10)\n    const ss = m[3] ? parseInt(m[3], 10) : 0\n    if (mm >= 60 || ss >= 60) return null\n    if (hh >= 24) return (hh * 3600 + mm * 60 + ss) * 1000\n  }\n  return null\n}\n\nexport interface TypeAwareEquality {\n  equals(candidate: any): boolean\n  notEquals(candidate: any): boolean\n}\n\nexport function createTypeAwareEquality(value: any): TypeAwareEquality {\n  const durF = parseDuration(value)\n  const ctF = parseClockTime(value)\n  const dtF = parseDateTime(value)\n  const nf = parseNumber(value)\n\n  return {\n    equals(candidate: any) {\n      const durV = parseDuration(candidate)\n      if (durF !== null && durV !== null) return durV === durF\n      const ctV = parseClockTime(candidate)\n      if (ctF !== null && ctV !== null) return ctV === ctF\n      const dtV = parseDateTime(candidate)\n      if (dtF !== null && dtV !== null) return dtV === dtF\n      const nv = parseNumber(candidate)\n      if (nf !== null && nv !== null) return nv === nf\n      return candidate === value\n    },\n    notEquals(candidate: any) {\n      const durV = parseDuration(candidate)\n      if (durF !== null && durV !== null) return durV !== durF\n      const ctV = parseClockTime(candidate)\n      if (ctF !== null && ctV !== null) return ctV !== ctF\n      const dtV = parseDateTime(candidate)\n      if (dtF !== null && dtV !== null) return dtV !== dtF\n      const nv = parseNumber(candidate)\n      if (nf !== null && nv !== null) return nv !== nf\n      return candidate !== value\n    },\n  }\n}\n","import type { FilterConfig, RowData, ColumnDef } from '../../types'\nimport {\n  createTypeAwareEquality,\n  parseClockTime,\n  parseDateTime,\n  parseDuration,\n  parseNumber,\n  toLower,\n} from './filter-parsers'\n\nexport type CompiledPredicate = (row: RowData) => boolean\n\nexport interface CompileContext {\n  columns?: ColumnDef[]\n  locale?: string\n  timezoneOffset?: number // minutes\n}\n\nexport function compilePredicate(rule: FilterConfig): CompiledPredicate {\n  const { field, operator } = rule\n  const value = rule.value as any\n  switch (operator) {\n    // text\n    case 'equals': {\n      const matcher = createTypeAwareEquality(value)\n      return (row: RowData) => matcher.equals(row[field])\n    }\n    case 'notEquals': {\n      const matcher = createTypeAwareEquality(value)\n      return (row: RowData) => matcher.notEquals(row[field])\n    }\n    case 'contains': {\n      const needle = toLower(value)\n      return (row: RowData) => toLower(row[field]).includes(needle)\n    }\n    case 'startsWith': {\n      const needle = toLower(value)\n      return (row: RowData) => toLower(row[field]).startsWith(needle)\n    }\n    case 'endsWith': {\n      const needle = toLower(value)\n      return (row: RowData) => toLower(row[field]).endsWith(needle)\n    }\n    case 'isEmpty': {\n      return (row: RowData) => row[field] === null || row[field] === undefined || String(row[field]) === ''\n    }\n    case 'notEmpty': {\n      return (row: RowData) => !(row[field] === null || row[field] === undefined || String(row[field]) === '')\n    }\n    case 'gt': {\n      const nf = parseNumber(value)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        return nf !== null && nv !== null && nv > nf\n      }\n    }\n    case 'lt': {\n      const nf = parseNumber(value)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        return nf !== null && nv !== null && nv < nf\n      }\n    }\n    case 'gte': {\n      const nf = parseNumber(value)\n      const durF = parseDuration(value)\n      const dtF = parseDateTime(value)\n      const ctF = parseClockTime(value)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        if (nf !== null && nv !== null) return nv >= nf\n        const durV = parseDuration(row[field])\n        if (durF !== null && durV !== null) return durV >= durF\n        const dtV = parseDateTime(row[field])\n        if (dtF !== null && dtV !== null) return dtV >= dtF\n        const ctV = parseClockTime(row[field])\n        return ctF !== null && ctV !== null && ctV >= ctF\n      }\n    }\n    case 'lte': {\n      const nf = parseNumber(value)\n      const durF = parseDuration(value)\n      const dtF = parseDateTime(value)\n      const ctF = parseClockTime(value)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        if (nf !== null && nv !== null) return nv <= nf\n        const durV = parseDuration(row[field])\n        if (durF !== null && durV !== null) return durV <= durF\n        const dtV = parseDateTime(row[field])\n        if (dtF !== null && dtV !== null) return dtV <= dtF\n        const ctV = parseClockTime(row[field])\n        return ctF !== null && ctV !== null && ctV <= ctF\n      }\n    }\n    case 'between': {\n      const arr = Array.isArray(value) ? value : []\n      const [a, b] = (arr as [any, any]) || []\n      const na = parseNumber(a), nb = parseNumber(b)\n      const dura = parseDuration(a), durb = parseDuration(b)\n      const dta = parseDateTime(a), dtb = parseDateTime(b)\n      const cta = parseClockTime(a), ctb = parseClockTime(b)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        if (nv !== null && na !== null && nb !== null) return nv >= Math.min(na, nb) && nv <= Math.max(na, nb)\n        const durV = parseDuration(row[field])\n        if (durV !== null && dura !== null && durb !== null) return durV >= Math.min(dura, durb) && durV <= Math.max(dura, durb)\n        const dtV = parseDateTime(row[field])\n        if (dtV !== null && dta !== null && dtb !== null) return dtV >= Math.min(dta, dtb) && dtV <= Math.max(dta, dtb)\n        const ctV = parseClockTime(row[field])\n        return ctV !== null && cta !== null && ctb !== null && ctV >= Math.min(cta, ctb) && ctV <= Math.max(cta, ctb)\n      }\n    }\n    case 'in':\n    case 'oneOf': {\n      const list = Array.isArray(value) ? value : [value]\n      return (row: RowData) => list.some(v => v === row[field])\n    }\n    case 'notIn': {\n      const list = Array.isArray(value) ? value : [value]\n      return (row: RowData) => !list.some(v => v === row[field])\n    }\n    default: {\n      return () => true\n    }\n  }\n}\n\nexport function combinePredicates(preds: CompiledPredicate[], join: 'AND' | 'OR' = 'AND'): CompiledPredicate {\n  if (preds.length === 0) return () => true\n  if (join === 'OR') return (row: RowData) => preds.some(predicate => predicate(row))\n  return (row: RowData) => preds.every(predicate => predicate(row))\n}\n\nexport function compileFilterSet(filters: FilterConfig[]): CompiledPredicate {\n  const candidates = filters.filter(f => f.field !== '__global__')\n  if (candidates.length === 0) return () => true\n  const preds = candidates.map(compilePredicate)\n  return combinePredicates(preds, 'AND')\n}\n\nexport function signatureForFilters(filters: FilterConfig[]): string {\n  const serialisable = filters.filter(f => f.field !== '__global__')\n  try { return JSON.stringify(serialisable) } catch { return String(serialisable?.length || 0) }\n}\n","/**\n * Filtering Plugin - Core functionality\n *\n * Provides advanced filtering capability using the enhanced data-pipeline system.\n * Supports multiple filter types and complex filter conditions.\n */\n\nimport type { GridPlugin, CapabilityGetter, DataInterceptor } from '../index'\nimport type { GridAPI, FilterConfig } from '../../types'\nimport { createLogger } from '../../utils/logger'\nimport { compileFilterSet, signatureForFilters } from './filter-ops'\n\ninterface ExtendedFilterConfig extends FilterConfig {\n  id?: string\n  enabled?: boolean\n  metadata?: Record<string, any>\n}\n\nexport const filteringPlugin: GridPlugin = {\n  name: 'core-filtering',\n  version: '1.0.0',\n  dependencies: ['data-pipeline'],\n\n  install(api: GridAPI, get: CapabilityGetter) {\n    const logger = createLogger({ module: 'Plugin', operation: 'FilteringPlugin' })\n    const dataPipeline = get('data-pipeline')\n\n    if (!dataPipeline) {\n      logger.warn('data-pipeline capability not available')\n      return\n    }\n\n    // Internal filtering state\n    let activeFilters: ExtendedFilterConfig[] = []\n    // Worker-first mode\n    const WORKER_THRESHOLD = 10000\n    let worker: Worker | null = null\n    let lastSignature: string = ''\n    let lastFilteredData: any[] | null = null\n    let inflightId: string | null = null\n    let filterIdCounter = 0\n    let offConfigChanged: (() => void) | null = null\n    const jobSignatures = new Map<string, string>()\n\n    // Global search evaluation function\n    const evaluateGlobalFilter = (row: any, searchTerm: string, fields: string[]): boolean => {\n      const needle = String(searchTerm ?? '').toLowerCase()\n      if (!needle) return true\n      return fields.some(field => {\n        const value = String((row as Record<string, unknown>)[field] ?? '').toLowerCase()\n        return value.includes(needle)\n      })\n    }\n\n    // Create filtering interceptor\n    const filteringInterceptor: DataInterceptor = {\n      name: 'core-filtering',\n      type: 'filter',\n      priority: 200, // Priority within 'filter' type; pipeline runs filter before sort\n      enabled: true,\n      transform: data => {\n        if (!activeFilters.length || !data.length) {\n          return data\n        }\n\n        const enabledFilters = activeFilters.filter(f => f.enabled !== false)\n        if (!enabledFilters.length) {\n          return data\n        }\n\n        // Worker-first: if dataset large, return last worker result when available\n        try {\n          const useWorker = (api.getData() || []).length >= WORKER_THRESHOLD\n          const publicFilters = toPublicFilters(enabledFilters)\n          const hasGlobal = publicFilters.some(f => f.field === '__global__')\n          const sig = signatureForFilters(publicFilters.filter(f => f.field !== '__global__'))\n          if (useWorker && !hasGlobal) {\n            if (lastSignature === sig && Array.isArray(lastFilteredData)) {\n              return lastFilteredData\n            }\n            return Array.isArray(lastFilteredData) ? lastFilteredData : data\n          }\n        } catch {}\n\n        // Inline filtering path (small datasets)\n        // Precompile and apply\n        const compiled = compileFilterSet(toPublicFilters(enabledFilters))\n        try {\n          const out = [] as any[]\n          for (let i = 0; i < data.length; i++) {\n            const row = data[i]\n            // global quick filter handling\n            const globals = enabledFilters.filter(f => f.field === '__global__')\n            let ok = true\n            if (globals.length) {\n              for (const g of globals) {\n                const targetFields = g.metadata?.fields || Object.keys(row)\n                if (!evaluateGlobalFilter(row, String(g.value ?? ''), targetFields)) { ok = false; break }\n              }\n            }\n            if (ok && compiled(row)) out.push(row)\n          }\n          return out\n        } catch {\n          return data\n        }\n      },\n      metadata: {\n        description: 'Core filtering functionality with global search support',\n        version: '1.0.0',\n      },\n    }\n\n    // Register filtering data interceptor\n    dataPipeline.registerDataInterceptor('filter', filteringInterceptor)\n\n    // Helper: map internal filters to public FilterConfig[] (only enabled)\n    const toPublicFilters = (filters: ExtendedFilterConfig[]): FilterConfig[] =>\n      filters\n        .filter(f => f.enabled !== false)\n        .map(({ field, operator, value }) => ({ field, operator, value }))\n\n    // Worker scheduling inside closure to access current state\n    const tryScheduleWorker = () => {\n      try {\n        const data = api.getData() || []\n        const filters = toPublicFilters(activeFilters)\n        const hasGlobal = filters.some(f => f.field === '__global__')\n        const workerFilters = filters.filter(f => f.field !== '__global__')\n        const signature = signatureForFilters(workerFilters)\n        if (data.length < WORKER_THRESHOLD || workerFilters.length === 0 || hasGlobal) {\n          lastSignature = workerFilters.length ? signature : ''\n          lastFilteredData = null\n          inflightId = null\n          jobSignatures.clear()\n          return\n        }\n        if (!worker) {\n          worker = createWorker()\n          if (worker) {\n            worker.onmessage = (ev: MessageEvent<any>) => {\n              const msg = ev.data\n              if (!msg) return\n              const jobSignature = jobSignatures.get(msg.id)\n              if (msg.id !== inflightId) {\n                jobSignatures.delete(msg.id)\n                return\n              }\n              if (msg.type === 'result') {\n                lastSignature = jobSignature ?? ''\n                lastFilteredData = msg.data\n                inflightId = null\n                jobSignatures.delete(msg.id)\n                // Ask pipeline to re-run synchronously using cached result\n                api.emit('data-refresh-requested', { source: 'filter-worker' } as any)\n                logger.info(`Worker filtered ${msg.data?.length ?? 0} rows in ${msg.duration}ms`)\n              } else if (msg.type === 'progress') {\n                try {\n                  api.emit('filter-progress', {\n                    processed: Number.isFinite(msg.processed) ? msg.processed : 0,\n                    total: Number.isFinite(msg.total) ? msg.total : 0,\n                  })\n                } catch {}\n              } else if (msg.type === 'error') {\n                jobSignatures.delete(msg.id)\n                inflightId = null\n                lastFilteredData = null\n                logger.warn('Filter worker error:', msg.message)\n              }\n            }\n          }\n        }\n        if (!worker) return\n        if (inflightId) {\n          jobSignatures.delete(inflightId)\n        }\n        inflightId = `fw-${Date.now()}-${Math.random().toString(36).slice(2, 7)}`\n        jobSignatures.set(inflightId, signature)\n        const payload = { id: inflightId, data, filters: workerFilters }\n        worker.postMessage(payload)\n      } catch (e) {\n        logger.warn('Failed to schedule worker:', e)\n      }\n    }\n\n    // Extend GridAPI with filtering methods\n    const originalApi = api as any\n\n    originalApi.addFilter = (filter: FilterConfig) => {\n      // Enforce column filterability (except global quick filter)\n      if (filter.field !== '__global__') {\n        const cols = api.getState().columns || []\n        const target = cols.find((c: any) => c.field === filter.field)\n        if (target && target.filterable === false) {\n          logger.warn(`Column '${filter.field}' is not filterable`)\n          return null\n        }\n      }\n      const extendedFilter: ExtendedFilterConfig = {\n        ...filter,\n        id: `${filter.field}_${Date.now()}_${++filterIdCounter}`,\n        enabled: true,\n      }\n\n      activeFilters.push(extendedFilter)\n\n      // Update grid configuration (public shape)\n      api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n      // Emit filter change event (public shape)\n      api.emit('filter-change', toPublicFilters(activeFilters))\n\n      tryScheduleWorker()\n      return extendedFilter.id\n    }\n\n    originalApi.removeFilter = (filterId: string) => {\n      const index = activeFilters.findIndex(f => f.id === filterId)\n      if (index !== -1) {\n        activeFilters.splice(index, 1)\n\n        // Update grid configuration\n        api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n        // Emit filter change event\n        api.emit('filter-change', toPublicFilters(activeFilters))\n\n        tryScheduleWorker()\n        return true\n      }\n      return false\n    }\n\n    originalApi.updateFilter = (filterId: string, updates: Partial<ExtendedFilterConfig>) => {\n      const filter = activeFilters.find(f => f.id === filterId)\n      if (filter) {\n        Object.assign(filter, updates)\n\n        // Update grid configuration\n        api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n        // Emit filter change event\n        api.emit('filter-change', toPublicFilters(activeFilters))\n\n        tryScheduleWorker()\n        return true\n      }\n      return false\n    }\n\n    originalApi.clearFilters = () => {\n      activeFilters = []\n\n      // Update grid configuration\n      api.updateConfig({ filters: [] })\n\n      // Emit filter change event\n      api.emit('filter-change', [])\n\n      tryScheduleWorker()\n    }\n\n    originalApi.getActiveFilters = () => [...activeFilters]\n\n    originalApi.toggleFilter = (filterId: string) => {\n      const filter = activeFilters.find(f => f.id === filterId)\n      if (filter) {\n        filter.enabled = !filter.enabled\n\n        // Update grid configuration\n        api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n        // Emit filter change event\n        api.emit('filter-change', toPublicFilters(activeFilters))\n\n        tryScheduleWorker()\n        return filter.enabled\n      }\n      return false\n    }\n\n    // Quick filter methods for common use cases\n    originalApi.quickFilter = (searchTerm: string, fields?: string[]) => {\n      // Clear existing quick filters\n      activeFilters = activeFilters.filter(f => !f.id?.startsWith('quickfilter_'))\n\n      if (searchTerm.trim()) {\n        // Derive fields from columns (respect filterable)\n        const cols = api.getState().columns || []\n        let targetFields =\n          fields && fields.length > 0\n            ? fields\n            : cols\n                .filter((c: any) => c.filterable !== false)\n                .map((c: any) => c.field)\n\n        // Fallback: if no columns available, use keys from first row\n        if ((!targetFields || targetFields.length === 0)) {\n          const data = api.getData()\n          if (Array.isArray(data) && data.length > 0) {\n            targetFields = Object.keys(data[0] || {})\n          }\n        }\n\n        // Create a global search filter\n        const quickFilter: ExtendedFilterConfig = {\n          field: '__global__',\n          operator: 'contains',\n          value: searchTerm,\n          id: 'quickfilter_global',\n          enabled: true,\n          metadata: {\n            fields: targetFields,\n            isGlobalSearch: true,\n          },\n        }\n\n        activeFilters.push(quickFilter)\n      }\n\n      // Update grid configuration\n      api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n      // Emit filter change event\n      api.emit('filter-change', toPublicFilters(activeFilters))\n\n      tryScheduleWorker()\n    }\n\n    // Sync with external filter config updates\n    const handleConfigUpdate = (newConfig: import('../../types').GridConfig) => {\n      const incoming = Array.isArray(newConfig.filters) ? (newConfig.filters as FilterConfig[]) : []\n      const currentPublic = toPublicFilters(activeFilters)\n      if (JSON.stringify(incoming) === JSON.stringify(currentPublic)) {\n        tryScheduleWorker()\n        return\n      }\n\n      activeFilters = incoming.map(f => ({ ...f, id: `${f.field}_${Date.now()}_${++filterIdCounter}`, enabled: true }))\n      api.emit('filter-change', toPublicFilters(activeFilters))\n\n      // Worker-first filtering for large datasets\n      tryScheduleWorker()\n    }\n    if (typeof api.on === 'function') {\n      offConfigChanged = api.on('config-changed', handleConfigUpdate)\n      // Re-run worker on data changes too\n      api.on('data-changed', () => tryScheduleWorker())\n      api.on('filter-cancel' as any, () => {\n        try { if (worker) worker.terminate() } catch {}\n        worker = null\n        inflightId = null\n        lastFilteredData = null\n        jobSignatures.clear()\n        logger.info('Filter worker canceled by user')\n      })\n    }\n\n    // Store cleanup function\n    originalApi._filteringPluginCleanup = () => {\n      dataPipeline.removeDataInterceptor('filter', 'core-filtering')\n      if (offConfigChanged) {\n        try { offConfigChanged() } catch {}\n        offConfigChanged = null\n      }\n    }\n\n    logger.info('Core filtering functionality installed with enhanced data pipeline')\n  },\n\n  cleanup() {\n    const logger = createLogger({ module: 'Plugin', operation: 'FilteringPlugin' })\n    logger.info('Cleaned up')\n  },\n}\n\n// Worker scheduling (module-local)\nfunction createWorker(): Worker | null {\n  try {\n    return new Worker(new URL('../utils/filter-worker.ts', import.meta.url), { type: 'module' })\n  } catch {\n    return null\n  }\n}\n"],"mappings":"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"}