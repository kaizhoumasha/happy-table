{"version":3,"file":"selection-plugin-dIYfSM0K.cjs","names":["selectionPlugin: GridPlugin","selectionState: SelectionState"],"sources":["../src/plugins/core/selection-plugin.ts"],"sourcesContent":["/**\n * Selection Plugin - Core functionality\n *\n * Provides enhanced selection capabilities including multi-select,\n * range selection, and selection persistence.\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../index'\nimport type { GridAPI, RowData } from '../../types'\nimport { createLogger } from '../../utils/logger'\n\ninterface SelectionState {\n  selectedRows: Set<string | number>\n  lastSelectedRow: string | number | null\n  selectionMode: 'single' | 'multi' | 'range'\n  persistSelection: boolean\n}\n\nexport const selectionPlugin: GridPlugin = {\n  name: 'core-selection',\n  version: '1.0.0',\n  dependencies: [], // No special capabilities needed\n\n  install(api: GridAPI, _get: CapabilityGetter) {\n    const logger = createLogger({ module: 'Plugin', operation: 'SelectionPlugin' })\n    // Internal selection state\n    const selectionState: SelectionState = {\n      selectedRows: new Set(),\n      lastSelectedRow: null,\n      selectionMode: 'multi',\n      persistSelection: false,\n    }\n\n    // Extend GridAPI with enhanced selection methods\n    const originalApi = api as any\n\n    originalApi.setSelectionMode = (mode: 'single' | 'multi' | 'range') => {\n      selectionState.selectionMode = mode\n\n      // Clear selection if switching to single mode with multiple selected\n      if (mode === 'single' && selectionState.selectedRows.size > 1) {\n        const firstSelected = Array.from(selectionState.selectedRows)[0]\n        selectionState.selectedRows.clear()\n        if (firstSelected) {\n          selectionState.selectedRows.add(firstSelected)\n        }\n      }\n\n      api.emit('selection-mode-change', { mode })\n    }\n\n    originalApi.getSelectionMode = () => selectionState.selectionMode\n\n    originalApi.selectRow = (rowId: string | number, addToSelection = false) => {\n      const { selectionMode } = selectionState\n\n      if (selectionMode === 'single' || !addToSelection) {\n        selectionState.selectedRows.clear()\n      }\n\n      selectionState.selectedRows.add(rowId)\n      selectionState.lastSelectedRow = rowId\n\n      // Emit selection change\n      api.emit('row-select', {\n        rowId,\n        selected: true,\n        selectedRows: Array.from(selectionState.selectedRows),\n      })\n    }\n\n    originalApi.deselectRow = (rowId: string | number) => {\n      const wasSelected = selectionState.selectedRows.has(rowId)\n      selectionState.selectedRows.delete(rowId)\n\n      if (selectionState.lastSelectedRow === rowId) {\n        selectionState.lastSelectedRow = null\n      }\n\n      if (wasSelected) {\n        api.emit('row-select', {\n          rowId,\n          selected: false,\n          selectedRows: Array.from(selectionState.selectedRows),\n        })\n      }\n    }\n\n    originalApi.toggleRowSelection = (rowId: string | number, addToSelection = false) => {\n      if (selectionState.selectedRows.has(rowId)) {\n        originalApi.deselectRow(rowId)\n      } else {\n        originalApi.selectRow(rowId, addToSelection)\n      }\n    }\n\n    originalApi.selectRange = (startRowId: string | number, endRowId: string | number) => {\n      if (selectionState.selectionMode === 'single') {\n        originalApi.selectRow(endRowId)\n        return\n      }\n\n      const data = api.getData()\n      const startIndex = data.findIndex(row => (row.id || row.index) === startRowId)\n      const endIndex = data.findIndex(row => (row.id || row.index) === endRowId)\n\n      if (startIndex === -1 || endIndex === -1) return\n\n      const [minIndex, maxIndex] = [Math.min(startIndex, endIndex), Math.max(startIndex, endIndex)]\n\n      // Clear previous selection unless in range mode\n      if (selectionState.selectionMode !== 'range') {\n        selectionState.selectedRows.clear()\n      }\n\n      // Select range\n      for (let i = minIndex; i <= maxIndex; i++) {\n        const row = data[i]\n        if (row) {\n          const rowId = row.id || i\n          selectionState.selectedRows.add(rowId)\n        }\n      }\n\n      selectionState.lastSelectedRow = endRowId\n\n      api.emit('range-select', {\n        start: minIndex,\n        end: maxIndex,\n      })\n    }\n\n    originalApi.selectAll = () => {\n      if (selectionState.selectionMode === 'single') return\n\n      const data = api.getFilteredData() // Use filtered data for select all\n      selectionState.selectedRows.clear()\n\n      data.forEach(row => {\n        const rowId = row.id || row.index\n        if (rowId !== undefined && (typeof rowId === 'string' || typeof rowId === 'number')) {\n          selectionState.selectedRows.add(rowId)\n        }\n      })\n\n      api.emit('select-all', {\n        count: selectionState.selectedRows.size,\n      })\n    }\n\n    originalApi.clearSelection = () => {\n      const hadSelection = selectionState.selectedRows.size > 0\n      selectionState.selectedRows.clear()\n      selectionState.lastSelectedRow = null\n\n      if (hadSelection) {\n        api.emit('selection-clear', {\n          previousCount: selectionState.selectedRows.size,\n        })\n      }\n    }\n\n    originalApi.getSelectedRows = () => {\n      return Array.from(selectionState.selectedRows)\n    }\n\n    originalApi.getSelectedRowData = (): RowData[] => {\n      const data = api.getData()\n      const selectedIds = Array.from(selectionState.selectedRows)\n\n      return data.filter(row => {\n        const rowId = row.id || row.index\n        return rowId !== undefined && selectedIds.includes(rowId as string | number)\n      })\n    }\n\n    originalApi.isRowSelected = (rowId: string | number) => {\n      return selectionState.selectedRows.has(rowId)\n    }\n\n    originalApi.getSelectionCount = () => {\n      return selectionState.selectedRows.size\n    }\n\n    originalApi.selectByIndex = (index: number, addToSelection = false) => {\n      const data = api.getData()\n      if (index >= 0 && index < data.length) {\n        const row = data[index]\n        if (row) {\n          const rowId = row.id || index\n          originalApi.selectRow(rowId, addToSelection)\n        }\n      }\n    }\n\n    originalApi.selectByCondition = (predicate: (row: RowData) => boolean) => {\n      if (selectionState.selectionMode === 'single') return\n\n      const data = api.getFilteredData()\n      selectionState.selectedRows.clear()\n\n      data.forEach(row => {\n        if (predicate(row)) {\n          const rowId = row.id || row.index\n          if (rowId !== undefined && (typeof rowId === 'string' || typeof rowId === 'number')) {\n            selectionState.selectedRows.add(rowId)\n          }\n        }\n      })\n\n      api.emit('conditional-select', {\n        condition: 'custom-predicate',\n        count: selectionState.selectedRows.size,\n      })\n    }\n\n    // Selection persistence\n    originalApi.setSelectionPersistence = (persist: boolean) => {\n      selectionState.persistSelection = persist\n    }\n\n    originalApi.getSelectionPersistence = () => selectionState.persistSelection\n\n    originalApi.saveSelectionState = () => {\n      return {\n        selectedRows: Array.from(selectionState.selectedRows),\n        lastSelectedRow: selectionState.lastSelectedRow,\n        selectionMode: selectionState.selectionMode,\n      }\n    }\n\n    originalApi.restoreSelectionState = (state: any) => {\n      if (state.selectedRows) {\n        selectionState.selectedRows = new Set(state.selectedRows)\n      }\n      if (state.lastSelectedRow !== undefined) {\n        selectionState.lastSelectedRow = state.lastSelectedRow\n      }\n      if (state.selectionMode) {\n        selectionState.selectionMode = state.selectionMode\n      }\n\n      api.emit('selection-restore', {\n        count: selectionState.selectedRows.size,\n      })\n    }\n\n    // Handle keyboard selection (Shift+Click, Ctrl+Click)\n    originalApi.handleSelectionInput = (\n      rowId: string | number,\n      event: { shiftKey?: boolean; ctrlKey?: boolean; metaKey?: boolean }\n    ) => {\n      const { shiftKey, ctrlKey, metaKey } = event\n      const isMultiSelect = ctrlKey || metaKey\n\n      if (shiftKey && selectionState.lastSelectedRow) {\n        // Range selection\n        originalApi.selectRange(selectionState.lastSelectedRow, rowId)\n      } else if (isMultiSelect) {\n        // Add to selection\n        originalApi.toggleRowSelection(rowId, true)\n      } else {\n        // Single selection\n        originalApi.selectRow(rowId, false)\n      }\n    }\n\n    // Note: Data change handling for selection persistence could be implemented\n    // when data-changed events become available in the current architecture\n\n    // Register for data changes\n    api.emit('data-listener-add', 'selection-data-change-handler')\n\n    logger.info('Enhanced selection functionality installed')\n  },\n\n  cleanup() {\n    const logger = createLogger({ module: 'Plugin', operation: 'SelectionPlugin' })\n    logger.info('Cleaned up')\n  },\n}\n"],"mappings":"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"}