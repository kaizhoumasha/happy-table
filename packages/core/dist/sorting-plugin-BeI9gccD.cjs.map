{"version":3,"file":"sorting-plugin-BeI9gccD.cjs","names":["chunks: (string | number)[]","match: RegExpExecArray | null","comparison: number","mergedOptions: SortOptions","currentSortConfig: MultiSortConfig | null","globalSortOptions: SortOptions","sortingInterceptor: DataInterceptor | null","debouncedDataProcessing: (() => void) | null","dataPipeline: any","eventUnsubscribe: (() => void) | null","currentColumns: import('../../types').ColumnDef[]","eventUtils: ReturnType<typeof createTypedEventUtils> | null","lastSortedData: RowData[]","lastSortCacheKey: string","lastDataHash: string","timeout: number | null","newConfig: MultiSortConfig","sortingPlugin: GridPlugin","basicSortingPlugin: GridPlugin","enhancedSortingPlugin: GridPlugin"],"sources":["../src/plugins/utils/sorting-utils.ts","../src/plugins/utils/typed-event-helpers.ts","../src/plugins/core/sorting-plugin.ts"],"sourcesContent":["/**\n * Sorting Utilities Module\n *\n * Provides pure functions for sorting operations with support for:\n * - Single and multi-field sorting\n * - Custom comparators\n * - Locale-aware string comparison\n * - Null value handling\n */\n\nimport type { CellValue, RowData, SortField, SortOptions, SortConfig, MultiSortConfig } from '../../types'\n\n/**\n * Type guards for sort configurations\n */\nexport function isSingleSortConfig(config: unknown): config is SortConfig {\n  return (\n    config !== null &&\n    typeof config === 'object' &&\n    'field' in config &&\n    'direction' in config &&\n    typeof (config as Record<string, unknown>).field === 'string' &&\n    ['asc', 'desc'].includes((config as Record<string, unknown>).direction as string)\n  )\n}\n\nexport function isMultiSortConfig(config: unknown): config is MultiSortConfig {\n  return (\n    config !== null &&\n    typeof config === 'object' &&\n    'fields' in config &&\n    Array.isArray((config as Record<string, unknown>).fields)\n  )\n}\n\n/**\n * Natural sort algorithm - splits string into text and number chunks\n */\nfunction naturalSortChunks(str: string): (string | number)[] {\n  const chunks: (string | number)[] = []\n  const regex = /(\\d+)|(\\D+)/g\n  let match: RegExpExecArray | null\n\n  while ((match = regex.exec(str)) !== null) {\n    if (match[1]) {\n      // Number chunk - parse as integer\n      chunks.push(parseInt(match[1], 10))\n    } else if (match[2]) {\n      // Text chunk - keep as string\n      chunks.push(match[2])\n    }\n  }\n\n  return chunks\n}\n\n/**\n * Natural sort comparison - compares strings with embedded numbers intelligently\n * Examples: a1, a2, a10 (not a1, a10, a2)\n *\n * @param a - First string to compare\n * @param b - Second string to compare\n * @param caseSensitive - Whether comparison is case-sensitive (default: false)\n */\nfunction naturalCompare(a: string, b: string, caseSensitive = false): number {\n  const aChunks = naturalSortChunks(caseSensitive ? a : a.toLowerCase())\n  const bChunks = naturalSortChunks(caseSensitive ? b : b.toLowerCase())\n\n  const maxLength = Math.max(aChunks.length, bChunks.length)\n\n  for (let i = 0; i < maxLength; i++) {\n    const aChunk = aChunks[i]\n    const bChunk = bChunks[i]\n\n    // Handle missing chunks (one string is shorter)\n    if (aChunk === undefined) return -1\n    if (bChunk === undefined) return 1\n\n    // Both are numbers - numerical comparison\n    if (typeof aChunk === 'number' && typeof bChunk === 'number') {\n      if (aChunk !== bChunk) {\n        return aChunk - bChunk\n      }\n      continue\n    }\n\n    // Both are strings - lexical comparison\n    if (typeof aChunk === 'string' && typeof bChunk === 'string') {\n      const comparison = aChunk.localeCompare(bChunk)\n      if (comparison !== 0) {\n        return comparison\n      }\n      continue\n    }\n\n    // Mixed types - numbers come before strings\n    if (typeof aChunk === 'number') return -1\n    if (typeof bChunk === 'number') return 1\n  }\n\n  return 0\n}\n\n/**\n * Core sorting utilities\n */\nexport class SortingUtils {\n  /**\n   * Compare two cell values with optional locale and formatting options\n   */\n  static compareValues(a: CellValue, b: CellValue, options?: SortOptions): number {\n    // Handle null/undefined values\n    if (a === null && b === null) return 0\n    if (a === null || a === undefined) return -1\n    if (b === null || b === undefined) return 1\n\n    // Handle different data types\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a - b\n    }\n\n    if (a instanceof Date && b instanceof Date) {\n      return a.getTime() - b.getTime()\n    }\n\n    // String comparison with options\n    const aStr = String(a)\n    const bStr = String(b)\n\n    // Natural sort if enabled (priority over other options)\n    if (options?.naturalSort) {\n      // Prefer Intl.Collator with numeric for robust natural sorting\n      try {\n        const collator = new Intl.Collator(options.locale, {\n          numeric: true,\n          sensitivity: options.sensitivity || 'base',\n        })\n        return collator.compare(aStr, bStr)\n      } catch {\n        // Fallback: Use sensitivity to determine case handling\n        const caseSensitive = options.sensitivity === 'variant' || options.sensitivity === 'case'\n        return naturalCompare(aStr, bStr, caseSensitive)\n      }\n    }\n\n    // Locale-aware comparison with options\n    if (options?.locale || options?.sensitivity) {\n      return aStr.localeCompare(bStr, options.locale, {\n        sensitivity: options.sensitivity,\n      })\n    }\n\n    return aStr.localeCompare(bStr)\n  }\n\n  /**\n   * Apply sorting for a single field\n   */\n  static applySortField(data: RowData[], sortField: SortField, globalOptions?: SortOptions): RowData[] {\n    if (!data.length) return data\n\n    const { field, direction, nullsFirst, customComparator } = sortField\n\n    return [...data].sort((a, b) => {\n      const aVal = a[field] as CellValue\n      const bVal = b[field] as CellValue\n\n      // Handle nulls placement\n      if (nullsFirst !== undefined) {\n        if ((aVal === null || aVal === undefined) && (bVal === null || bVal === undefined)) return 0\n        if (aVal === null || aVal === undefined) return nullsFirst ? -1 : 1\n        if (bVal === null || bVal === undefined) return nullsFirst ? 1 : -1\n      }\n\n      // Use custom comparator if provided\n      let comparison: number\n      try {\n        comparison = customComparator\n          ? customComparator(aVal, bVal)\n          : this.compareValues(aVal, bVal, globalOptions)\n      } catch (_error) {\n        // Fallback to basic comparison if custom comparator fails\n        comparison = this.compareValues(aVal, bVal, globalOptions)\n      }\n\n      return direction === 'desc' ? -comparison : comparison\n    })\n  }\n\n  /**\n   * Apply multi-field sorting with priority handling\n   * Supports per-field options (SortField extends SortOptions)\n   */\n  static applyMultiSort(data: RowData[], sortFields: SortField[], globalOptions?: SortOptions): RowData[] {\n    if (!data.length || sortFields.length === 0) return data\n\n    // Validate and normalize priorities\n    const validFields = this.validateSortFields(sortFields)\n    if (validFields.length === 0) return data\n\n    // Sort by priority (0 = highest priority)\n    const sortedFields = [...validFields].sort((a, b) => a.priority - b.priority)\n\n    return [...data].sort((a, b) => {\n      for (const sortField of sortedFields) {\n        const { field, direction, nullsFirst, customComparator } = sortField\n        const aVal = a[field] as CellValue\n        const bVal = b[field] as CellValue\n\n        // Merge options: field-level > global-level\n        // SortField extends SortOptions, so sortField contains all comparison options\n        // Extract only SortOptions properties, not field/direction/priority\n        const mergedOptions: SortOptions = {\n          ...globalOptions,\n          // Only merge SortOptions properties from sortField\n          ...(sortField.naturalSort !== undefined && { naturalSort: sortField.naturalSort }),\n          ...(sortField.sensitivity !== undefined && { sensitivity: sortField.sensitivity }),\n          ...(sortField.locale !== undefined && { locale: sortField.locale }),\n        }\n\n        // Handle nulls placement\n        if (nullsFirst !== undefined) {\n          if ((aVal === null || aVal === undefined) && (bVal === null || bVal === undefined)) continue\n          if (aVal === null || aVal === undefined) return nullsFirst ? -1 : 1\n          if (bVal === null || bVal === undefined) return nullsFirst ? 1 : -1\n        }\n\n        // Compare values\n        let comparison: number\n        try {\n          comparison = customComparator\n            ? customComparator(aVal, bVal)\n            : this.compareValues(aVal, bVal, mergedOptions)\n        } catch (_error) {\n          // Fallback to basic comparison if custom comparator fails\n          comparison = this.compareValues(aVal, bVal, mergedOptions)\n        }\n\n        if (comparison !== 0) {\n          return direction === 'desc' ? -comparison : comparison\n        }\n        // If values are equal, continue to next sort field\n      }\n      return 0 // All sort fields are equal\n    })\n  }\n\n  /**\n   * Normalize sort configuration to multi-sort format\n   */\n  static normalizeToMultiSort(config: SortConfig | MultiSortConfig | null): MultiSortConfig | null {\n    if (!config) return null\n\n    if (isSingleSortConfig(config)) {\n      return {\n        fields: [\n          {\n            field: config.field,\n            direction: config.direction,\n            priority: 0,\n          },\n        ],\n      }\n    }\n\n    if (isMultiSortConfig(config)) {\n      return {\n        ...config,\n        fields: this.validateSortFields(config.fields)\n      }\n    }\n\n    return null\n  }\n\n  /**\n   * Validate and normalize sort field priorities\n   */\n  static validateSortFields(fields: SortField[]): SortField[] {\n    if (!Array.isArray(fields)) return []\n\n    return fields\n      .filter(field =>\n        field &&\n        typeof field === 'object' &&\n        typeof field.field === 'string' &&\n        field.field.trim() !== '' &&\n        ['asc', 'desc'].includes(field.direction)\n      )\n      .map((field, index) => ({\n        ...field,\n        priority: typeof field.priority === 'number' ? field.priority : index,\n      }))\n      .sort((a, b) => a.priority - b.priority)\n  }\n\n  /**\n   * Normalize sort priorities ensuring sequential numbering\n   */\n  static normalizeSortPriorities(fields: SortField[]): SortField[] {\n    const validFields = this.validateSortFields(fields)\n    return validFields.map((field, index) => ({ ...field, priority: index }))\n  }\n\n  /**\n   * Check if two sort configurations are equivalent\n   */\n  static areSortConfigsEqual(\n    config1: SortConfig | MultiSortConfig | null,\n    config2: SortConfig | MultiSortConfig | null\n  ): boolean {\n    if (config1 === config2) return true\n    if (!config1 || !config2) return false\n\n    const normalized1 = this.normalizeToMultiSort(config1)\n    const normalized2 = this.normalizeToMultiSort(config2)\n\n    if (!normalized1 || !normalized2) return false\n    if (normalized1.fields.length !== normalized2.fields.length) return false\n\n    return normalized1.fields.every((field1, index) => {\n      const field2 = normalized2.fields[index]\n      return field2 &&\n        field1.field === field2.field &&\n        field1.direction === field2.direction &&\n        field1.priority === field2.priority &&\n        field1.nullsFirst === field2.nullsFirst\n    })\n  }\n}\n","/**\n * Typed Event Helpers for Plugin System\n * \n * Provides type-safe event emission and handling utilities for plugins.\n * Eliminates the need for 'as any' assertions by creating properly typed\n * event emission patterns with backward compatibility.\n */\n\nimport type { GridAPI, GridEvents } from '../../types'\n\n/**\n * Type-safe event emitter helper for plugins\n * Ensures event names and payloads match the GridEvents interface\n */\nexport class TypedEventEmitter {\n  private api: GridAPI\n\n  constructor(api: GridAPI) {\n    this.api = api\n  }\n\n  /**\n   * Emit a typed event with full type safety\n   */\n  emit<K extends keyof GridEvents>(event: K, payload: GridEvents[K]): void {\n    if (this.api.emit) {\n      this.api.emit(event, payload)\n    }\n  }\n\n  /**\n   * Register a typed event listener with full type safety\n   */\n  on<K extends keyof GridEvents>(\n    event: K, \n    handler: (payload: GridEvents[K]) => void\n  ): (() => void) | undefined {\n    if (this.api.on) {\n      return this.api.on(event, handler)\n    }\n    return undefined\n  }\n\n  /**\n   * Remove a typed event listener\n   */\n  off<K extends keyof GridEvents>(\n    event: K, \n    handler: (payload: GridEvents[K]) => void\n  ): void {\n    if (this.api.off) {\n      this.api.off(event, handler)\n    }\n  }\n}\n\n/**\n * Plugin event emission utilities - provides convenient methods for common plugin events\n */\nexport class PluginEventUtils {\n  private emitter: TypedEventEmitter\n\n  constructor(api: GridAPI) {\n    this.emitter = new TypedEventEmitter(api)\n  }\n\n  // Sorting-related events\n  emitMultiSortChange(config: GridEvents['multi-sort-change']): void {\n    this.emitter.emit('multi-sort-change', config)\n  }\n\n  emitSortFieldAdded(data: GridEvents['sort-field-added']): void {\n    this.emitter.emit('sort-field-added', data)\n  }\n\n  emitSortFieldRemoved(data: GridEvents['sort-field-removed']): void {\n    this.emitter.emit('sort-field-removed', data)\n  }\n\n  emitSortPriorityChanged(data: GridEvents['sort-priority-changed']): void {\n    this.emitter.emit('sort-priority-changed', data)\n  }\n\n  // Selection-related events\n  emitSelectionModeChange(mode: GridEvents['selection-mode-change']): void {\n    this.emitter.emit('selection-mode-change', mode)\n  }\n\n  emitRangeSelect(data: GridEvents['range-select']): void {\n    this.emitter.emit('range-select', data)\n  }\n\n  emitSelectAll(data: GridEvents['select-all']): void {\n    this.emitter.emit('select-all', data)\n  }\n\n  emitSelectionClear(data: GridEvents['selection-clear']): void {\n    this.emitter.emit('selection-clear', data)\n  }\n\n  // Data pipeline events\n  emitDataProcessed(data: GridEvents['data-processed']): void {\n    this.emitter.emit('data-processed', data)\n  }\n\n  emitDataPipelineComplete(data: GridEvents['data-pipeline-complete']): void {\n    this.emitter.emit('data-pipeline-complete', data)\n  }\n\n  emitDataPipelineError(error: GridEvents['data-pipeline-error']): void {\n    this.emitter.emit('data-pipeline-error', error)\n  }\n\n  // Cell editing events\n  emitCellFocusChange(data: GridEvents['cell-focus-change']): void {\n    this.emitter.emit('cell-focus-change', data)\n  }\n\n  emitCellEditStart(data: GridEvents['cell-edit-start']): void {\n    this.emitter.emit('cell-edit-start', data)\n  }\n\n  emitCellEditComplete(data: GridEvents['cell-edit-complete']): void {\n    this.emitter.emit('cell-edit-complete', data)\n  }\n\n  emitCellEditCancel(data: GridEvents['cell-edit-cancel']): void {\n    this.emitter.emit('cell-edit-cancel', data)\n  }\n\n  // Plugin lifecycle events\n  emitPluginLoaded(data: GridEvents['plugin-loaded']): void {\n    this.emitter.emit('plugin-loaded', data)\n  }\n\n  emitPluginUnloaded(data: GridEvents['plugin-unloaded']): void {\n    this.emitter.emit('plugin-unloaded', data)\n  }\n\n  emitPluginError(data: GridEvents['plugin-error']): void {\n    this.emitter.emit('plugin-error', data)\n  }\n\n  // Generic event emission with dynamic typing\n  emit<K extends keyof GridEvents>(event: K, payload: GridEvents[K]): void {\n    this.emitter.emit(event, payload)\n  }\n\n  // Event listener registration\n  on<K extends keyof GridEvents>(\n    event: K, \n    handler: (payload: GridEvents[K]) => void\n  ): (() => void) | undefined {\n    return this.emitter.on(event, handler)\n  }\n\n  // Event listener removal\n  off<K extends keyof GridEvents>(\n    event: K, \n    handler: (payload: GridEvents[K]) => void\n  ): void {\n    this.emitter.off(event, handler)\n  }\n}\n\n/**\n * Factory function to create typed event utilities for plugins\n */\nexport function createTypedEventUtils(api: GridAPI): PluginEventUtils {\n  return new PluginEventUtils(api)\n}\n\n/**\n * Type guard to check if API has event emission capabilities\n */\nexport function hasEventCapabilities(api: GridAPI): api is GridAPI & Required<Pick<GridAPI, 'emit' | 'on' | 'off'>> {\n  return typeof api.emit === 'function'\n}\n\n/**\n * Generic type-safe event emission helper\n * Use this when you need maximum type safety with minimal overhead\n */\nexport function safeEmit<K extends keyof GridEvents>(\n  api: GridAPI, \n  event: K, \n  payload: GridEvents[K]\n): void {\n  if (hasEventCapabilities(api)) {\n    api.emit(event, payload)\n  }\n}\n\n/**\n * Generic type-safe event listener registration helper\n */\nexport function safeOn<K extends keyof GridEvents>(\n  api: GridAPI,\n  event: K,\n  handler: (payload: GridEvents[K]) => void\n): (() => void) | undefined {\n  if (api.on) {\n    return api.on(event, handler)\n  }\n  return undefined\n}\n\n/**\n * Extension helper types for plugins that need to add custom events\n * This allows plugins to extend the GridEvents interface safely\n */\nexport type ExtendedEventMap<T extends Record<string, unknown>> = GridEvents & T\n\n/**\n * Helper to create type-safe custom event emitters for plugins with extended events\n */\nexport function createExtendedEventUtils<T extends Record<string, unknown>>(\n  api: GridAPI\n): {\n  emit<K extends keyof ExtendedEventMap<T>>(event: K, payload: ExtendedEventMap<T>[K]): void\n  on<K extends keyof ExtendedEventMap<T>>(event: K, handler: (payload: ExtendedEventMap<T>[K]) => void): (() => void) | undefined\n  off<K extends keyof ExtendedEventMap<T>>(event: K, handler: (payload: ExtendedEventMap<T>[K]) => void): void\n} {\n  return {\n    emit<K extends keyof ExtendedEventMap<T>>(event: K, payload: ExtendedEventMap<T>[K]): void {\n      if (api.emit) {\n        // Type assertion is safe here because we're extending the base event map\n        api.emit(event as keyof GridEvents, payload as GridEvents[keyof GridEvents])\n      }\n    },\n    on<K extends keyof ExtendedEventMap<T>>(\n      event: K, \n      handler: (payload: ExtendedEventMap<T>[K]) => void\n    ): (() => void) | undefined {\n      if (api.on) {\n        return api.on(event as keyof GridEvents, handler as (payload: GridEvents[keyof GridEvents]) => void)\n      }\n      return undefined\n    },\n    off<K extends keyof ExtendedEventMap<T>>(\n      event: K, \n      handler: (payload: ExtendedEventMap<T>[K]) => void\n    ): void {\n      if (api.off) {\n        api.off(event as keyof GridEvents, handler as (payload: GridEvents[keyof GridEvents]) => void)\n      }\n    }\n  }\n}\n","/**\n * Simplified Sorting Plugin - Streamlined sorting capabilities\n *\n * Refactored architecture following SOLID and KISS principles:\n * - Single factory function with minimal essential configuration\n * - Direct plugin implementation without unnecessary abstraction layers\n * - Focused, minimal surface without legacy shims\n *\n * @version 2.1.0\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../types'\nimport type { GridAPI, SortConfig, MultiSortConfig, SortOptions, RowData } from '../../types'\nimport type { DataInterceptor } from '../capabilities/data-pipeline-capability'\nimport { createLogger } from '../../utils/logger'\nimport { SortingUtils } from '../utils/sorting-utils'\nimport { createTypedEventUtils, hasEventCapabilities } from '../utils/typed-event-helpers'\n\n// Simplified configuration interface - only essential options\nexport interface SortingPluginOptions {\n  /** Enable multi-field sorting capability (default: true) */\n  enableMultiSort?: boolean\n  /** Maximum number of sort fields (default: 5) */\n  maxSortFields?: number\n}\n\n/**\n * Helper function to extract SortOptions from column definition\n */\nfunction getColumnSortOptions(columnDef: import('../../types').ColumnDef | undefined): SortOptions | null {\n  if (!columnDef || !columnDef.sortable) {\n    return null\n  }\n\n  // If sortable is boolean true, return empty options (use defaults)\n  if (columnDef.sortable === true) {\n    return {}\n  }\n\n  // If sortable is SortOptions object, return it\n  if (typeof columnDef.sortable === 'object') {\n    return columnDef.sortable\n  }\n\n  return null\n}\n\n/**\n * Merge global sort options with column-specific options\n * Column options take precedence over global options\n */\nfunction mergeSortOptions(globalOptions: SortOptions, columnOptions: SortOptions | null): SortOptions {\n  if (!columnOptions) {\n    return globalOptions\n  }\n\n  return {\n    ...globalOptions,\n    ...columnOptions,\n  }\n}\n\n/**\n * Create a sorting plugin with specified configuration\n */\nexport function createSortingPlugin(options: SortingPluginOptions = {}): GridPlugin {\n  // Initialize logger first\n  const logger = createLogger({ module: 'Plugin', operation: 'SortingPlugin' })\n\n  // Normalize options with sensible defaults\n  const config = {\n    enableMultiSort: options.enableMultiSort ?? true,\n    maxSortFields: Math.max(1, Math.min(options.maxSortFields ?? 5, 10)),\n  }\n\n  logger.debug('Creating sorting plugin', { config, options })\n\n  // Plugin state\n  let currentSortConfig: MultiSortConfig | null = null\n  let globalSortOptions: SortOptions = {}\n  let sortingInterceptor: DataInterceptor | null = null\n  let debouncedDataProcessing: (() => void) | null = null\n  let dataPipeline: any = null\n  let eventUnsubscribe: (() => void) | null = null\n  let currentColumns: import('../../types').ColumnDef[] = []\n\n  // Typed event utilities for safe event emission\n  let eventUtils: ReturnType<typeof createTypedEventUtils> | null = null\n\n  // Caching mechanism for performance optimization\n  let lastSortedData: RowData[] = []\n  let lastSortCacheKey: string = '' // Composite key: sortConfig + options\n  let lastDataHash: string = ''\n\n  // Debounce utility for performance optimization\n  const createDebounced = <T extends (...args: unknown[]) => void>(func: T, wait: number): T => {\n    let timeout: number | null = null\n    return ((...args: Parameters<T>) => {\n      if (timeout) clearTimeout(timeout)\n      timeout = setTimeout(() => func(...args), wait) as number\n    }) as T\n  }\n\n  // Type guard for API methods\n  const hasMethod = <T extends keyof GridAPI>(api: GridAPI, method: T): api is GridAPI & Required<Pick<GridAPI, T>> => {\n    return typeof api[method] === 'function'\n  }\n\n  // Core sorting logic\n  const setSortConfig = (api: GridAPI, sortConfig: SortConfig | MultiSortConfig | null): void => {\n    const normalizedConfig = SortingUtils.normalizeToMultiSort(sortConfig)\n\n    logger.debug('setSortConfig called', {\n      originalConfig: sortConfig,\n      normalizedConfig,\n      currentSortConfig,\n      enableMultiSort: config.enableMultiSort\n    })\n\n    // Validate multi-sort constraints\n    if (!config.enableMultiSort && normalizedConfig?.fields && normalizedConfig.fields.length > 1) {\n      logger.warn('Multi-sort disabled, using only first sort field')\n      normalizedConfig.fields = normalizedConfig.fields.slice(0, 1)\n    }\n\n    // Only update if configuration actually changed\n    if (!SortingUtils.areSortConfigsEqual(currentSortConfig, normalizedConfig)) {\n      logger.info('Sort config changed, updating state and triggering data processing')\n      currentSortConfig = normalizedConfig\n\n      // Clear cache when sort config changes\n      lastSortedData = []\n      lastSortCacheKey = ''\n      lastDataHash = ''\n\n      // Update interceptor state\n      if (sortingInterceptor) {\n        sortingInterceptor.enabled = normalizedConfig !== null\n      }\n\n      // Safe API updates using defensive programming\n      try {\n        if (hasMethod(api, 'updateConfig')) {\n          api.updateConfig({ sort: sortConfig })\n        }\n        if (eventUtils && hasEventCapabilities(api)) {\n          // Emit multi-sort-change with complete state only\n          if (normalizedConfig) {\n            eventUtils.emitMultiSortChange(normalizedConfig)\n            logger.debug('Emitted multi-sort-change event', { config: normalizedConfig })\n          }\n        }\n      } catch (error) {\n        logger.warn('Failed to update API state:', error)\n      }\n\n      // Trigger data processing (debounced to avoid multiple calls)\n      if (debouncedDataProcessing) {\n        debouncedDataProcessing()\n      }\n    }\n  }\n\n  const getSortConfig = (): SortConfig | MultiSortConfig | null => {\n    // Prefer returning multi-sort config for consistency\n    if (currentSortConfig) return currentSortConfig\n    return null\n  }\n\n  const sortByColumn = (api: GridAPI, field: string, direction?: 'asc' | 'desc'): void => {\n    if (!field || typeof field !== 'string') {\n      logger.warn('Invalid field provided to sortByColumn')\n      return\n    }\n\n    if (!direction) {\n      const existingField = currentSortConfig?.fields.find(f => f.field === field)\n\n      // Three-state cycle: none -> asc -> desc -> none\n      if (!existingField) {\n        direction = 'asc' // First click: sort ascending\n      } else if (existingField.direction === 'asc') {\n        direction = 'desc' // Second click: sort descending\n      } else {\n        // Third click: clear sort for this field\n        logger.debug('Clearing sort for field', { field })\n\n        // If this is the only sorted field, clear all sorting\n        if (currentSortConfig && currentSortConfig.fields.length === 1) {\n          setSortConfig(api, null)\n        } else {\n          // Remove only this field from multi-sort\n          removeSortField(api, field)\n        }\n        return\n      }\n    }\n\n    const newConfig: MultiSortConfig = {\n      fields: [{ field, direction, priority: 0 }],\n    }\n\n    setSortConfig(api, newConfig)\n  }\n\n  const addSortField = (api: GridAPI, field: string, direction?: 'asc' | 'desc'): void => {\n    if (!field || typeof field !== 'string') {\n      logger.warn('Invalid field provided to addSortField')\n      return\n    }\n\n    // Create a copy of current fields to avoid mutating state\n    const currentFields = [...(currentSortConfig?.fields || [])]\n    const maxFields = config.maxSortFields\n\n    logger.debug('addSortField called', { field, direction, currentFields, maxFields })\n\n    // Check for existing field\n    const existingIndex = currentFields.findIndex(f => f.field === field)\n    if (existingIndex !== -1) {\n      const currentDirection = currentFields[existingIndex]!.direction\n\n      if (!direction) {\n        // Three-state cycle: asc → desc → clear (consistent with sortByColumn)\n        if (currentDirection === 'asc') {\n          // Second click: toggle to desc\n          currentFields[existingIndex] = { ...currentFields[existingIndex]!, direction: 'desc' }\n          logger.debug('Updated existing field to desc', { index: existingIndex, from: currentDirection })\n        } else {\n          // Third click: remove field from multi-sort\n          currentFields.splice(existingIndex, 1)\n          logger.debug('Removed field from multi-sort', { field, remainingFields: currentFields.length })\n\n          // Clear all sorting if no fields remain\n          if (currentFields.length === 0) {\n            setSortConfig(api, null)\n            if (eventUtils) {\n              eventUtils.emitSortFieldRemoved({ field, sortConfig: { fields: [] } })\n            }\n            return\n          }\n\n          // Update config with remaining fields\n          const newConfig: MultiSortConfig = {\n            fields: SortingUtils.normalizeSortPriorities(currentFields),\n          }\n          setSortConfig(api, newConfig)\n          if (eventUtils) {\n            eventUtils.emitSortFieldRemoved({ field, sortConfig: newConfig })\n          }\n          return\n        }\n      } else {\n        // Explicit direction provided: set it directly\n        currentFields[existingIndex] = { ...currentFields[existingIndex]!, direction }\n        logger.debug('Updated existing field with explicit direction', { index: existingIndex, direction })\n      }\n    } else if (currentFields.length < maxFields) {\n      // Add new field with specified direction or default to 'asc'\n      const newDirection = direction || 'asc'\n      currentFields.push({ field, direction: newDirection, priority: currentFields.length })\n      logger.debug('Added new field', { totalFields: currentFields.length, direction: newDirection })\n    } else {\n      logger.warn(`Maximum sort fields (${maxFields}) reached`)\n      return\n    }\n\n    const newConfig: MultiSortConfig = {\n      fields: SortingUtils.normalizeSortPriorities(currentFields),\n    }\n\n    logger.debug('addSortField: About to call setSortConfig', { newConfig })\n    setSortConfig(api, newConfig)\n\n    // Emit field-specific event\n    if (eventUtils) {\n      eventUtils.emitSortFieldAdded({ field: { field, direction: direction || 'asc', priority: 0 }, sortConfig: newConfig })\n    }\n  }\n\n  const removeSortField = (api: GridAPI, field: string): void => {\n    if (!currentSortConfig || !field) return\n\n    const filteredFields = currentSortConfig.fields.filter(f => f.field !== field)\n\n    if (filteredFields.length === 0) {\n      setSortConfig(api, null)\n    } else {\n      const newConfig: MultiSortConfig = {\n        fields: SortingUtils.normalizeSortPriorities(filteredFields),\n      }\n      setSortConfig(api, newConfig)\n\n      if (eventUtils) {\n        eventUtils.emitSortFieldRemoved({ field, sortConfig: newConfig })\n      }\n    }\n  }\n\n  const changeSortPriority = (api: GridAPI, field: string, newPriority: number): void => {\n    if (!currentSortConfig || !field || typeof newPriority !== 'number') return\n\n    const fields = [...currentSortConfig.fields]\n    const fieldIndex = fields.findIndex(f => f.field === field)\n\n    if (fieldIndex === -1) return\n\n    // Clamp priority to valid range\n    const maxPriority = fields.length - 1\n    const clampedPriority = Math.max(0, Math.min(newPriority, maxPriority))\n\n    // Update field priority\n    fields[fieldIndex] = { ...fields[fieldIndex]!, priority: clampedPriority }\n\n    const newConfig: MultiSortConfig = {\n      fields: SortingUtils.normalizeSortPriorities(fields),\n    }\n    setSortConfig(api, newConfig)\n\n    if (eventUtils) {\n      eventUtils.emitSortPriorityChanged({\n        field,\n        oldPriority: currentSortConfig.fields[fieldIndex]?.priority || 0,\n        newPriority: clampedPriority\n      })\n    }\n  }\n\n\n  // Plugin interface implementation\n  return {\n    name: 'sorting',\n    version: '2.1.0',\n    dependencies: ['data-pipeline'],\n\n    install(api: GridAPI, get: CapabilityGetter): void {\n      dataPipeline = get('data-pipeline')\n\n      if (!dataPipeline) {\n        logger.warn('data-pipeline capability not available')\n        return\n      }\n\n      // Create typed event utilities\n      eventUtils = createTypedEventUtils(api)\n\n      // Create debounced processing - trigger main data pipeline instead of direct processing\n      debouncedDataProcessing = createDebounced(() => {\n        // Emit event to trigger main data pipeline refresh\n        if (eventUtils) {\n          eventUtils.emit('data-refresh-requested', { source: 'sorting' })\n        }\n      }, 16)\n\n      // Create sorting interceptor\n      sortingInterceptor = {\n        name: 'sorting',\n        type: 'sort',\n        priority: 100,\n        enabled: true,\n        transform: (data: RowData[]) => {\n          // Generate hashes for caching\n          const dataHash = JSON.stringify(data.length > 0 ? [data[0], data.length] : [])\n          const sortConfigHash = JSON.stringify(currentSortConfig)\n\n          logger.debug('Sorting interceptor transform called', {\n            dataLength: data.length,\n            currentSortConfig,\n            fieldsCount: currentSortConfig?.fields?.length || 0,\n          })\n\n          if (!currentSortConfig || !data.length || currentSortConfig.fields.length === 0) {\n            logger.debug('No sorting config or empty data, returning original data')\n            return data\n          }\n\n          try {\n            // Merge column-level options into each sort field\n            // Priority: field-level > column-level > global-level\n            const fieldsWithMergedOptions = currentSortConfig.fields.map(field => {\n              const column = currentColumns.find(col => col.field === field.field)\n              const columnSortOptions = getColumnSortOptions(column)\n              const mergedColumnAndGlobal = mergeSortOptions(globalSortOptions, columnSortOptions)\n\n              // Build complete field with merged options\n              // Keep field/direction/priority from the field, merge in sort options\n              return {\n                field: field.field,\n                direction: field.direction,\n                priority: field.priority,\n                ...mergedColumnAndGlobal,  // Column + global sort options\n                // Field-level sort options override (if present)\n                ...(field.naturalSort !== undefined && { naturalSort: field.naturalSort }),\n                ...(field.sensitivity !== undefined && { sensitivity: field.sensitivity }),\n                ...(field.locale !== undefined && { locale: field.locale }),\n                ...(field.nullsFirst !== undefined && { nullsFirst: field.nullsFirst }),\n                ...(field.customComparator !== undefined && { customComparator: field.customComparator }),\n              }\n            })\n\n            // Build options hash for cache validation\n            const optionsHash = JSON.stringify(\n              fieldsWithMergedOptions.map(f => ({\n                field: f.field,\n                direction: f.direction,\n                priority: f.priority,\n                naturalSort: (f as SortOptions).naturalSort ?? false,\n                sensitivity: (f as SortOptions).sensitivity ?? undefined,\n                locale: (f as SortOptions).locale ?? undefined,\n                nullsFirst: (f as SortOptions).nullsFirst ?? undefined,\n              }))\n            )\n\n            // Build composite cache key from config + options\n            const sortCacheKey = `${sortConfigHash}|${optionsHash}`\n\n            // Check cache with options awareness\n            if (\n              dataHash === lastDataHash &&\n              sortCacheKey === lastSortCacheKey &&\n              lastSortedData.length > 0\n            ) {\n              logger.debug('Sorting interceptor: Using cached result (no changes detected)')\n              return lastSortedData\n            }\n\n            // Apply multi-sort with merged options\n            // applyMultiSort will further merge field options with any remaining global options\n            const sortedData = SortingUtils.applyMultiSort(data, fieldsWithMergedOptions, globalSortOptions)\n\n            // Update cache\n            lastSortedData = sortedData\n            lastDataHash = dataHash\n            lastSortCacheKey = sortCacheKey\n\n            logger.debug('Data sorted successfully', {\n              originalLength: data.length,\n              sortedLength: sortedData.length,\n              sortFields: fieldsWithMergedOptions\n            })\n            return sortedData\n          } catch (error) {\n            logger.error('Error during sorting:', error)\n            return data\n          }\n        },\n        metadata: {\n          description: config.enableMultiSort ? 'Multi-field sorting' : 'Single-field sorting',\n          version: '2.1.0',\n          supportedFeatures: ['single-field', ...(config.enableMultiSort ? ['multi-field'] : [])],\n        },\n      }\n\n      // Register interceptor\n      dataPipeline.registerDataInterceptor('sort', sortingInterceptor)\n\n      // Extend GridAPI safely\n      const extendedApi = api as GridAPI & Record<string, unknown>\n\n      // Core sorting methods\n      extendedApi.setSortConfig = (sortConfig: SortConfig | MultiSortConfig | null) => setSortConfig(api, sortConfig)\n      extendedApi.getSortConfig = () => getSortConfig()\n      extendedApi.sortByColumn = (field: string, direction?: 'asc' | 'desc') => sortByColumn(api, field, direction)\n      extendedApi.clearSort = () => setSortConfig(api, null)\n\n      // Multi-field methods (conditional)\n      if (config.enableMultiSort) {\n        logger.debug('Installing multi-sort methods', { config })\n        extendedApi.getMultiSortConfig = () => currentSortConfig\n        extendedApi.addSortField = (field: string, direction?: 'asc' | 'desc') => {\n          logger.debug('addSortField API called', { field, direction })\n          return addSortField(api, field, direction)\n        }\n        extendedApi.removeSortField = (field: string) => removeSortField(api, field)\n        extendedApi.changeSortPriority = (field: string, newPriority: number) => changeSortPriority(api, field, newPriority)\n      } else {\n        logger.debug('Multi-sort disabled', { config })\n      }\n\n      // Advanced options\n      extendedApi.setSortOptions = (options: SortOptions) => {\n        if (options && typeof options === 'object') {\n          globalSortOptions = { ...globalSortOptions, ...options }\n          if (currentSortConfig && debouncedDataProcessing) {\n            debouncedDataProcessing()\n          }\n        }\n      }\n      extendedApi.getSortOptions = () => globalSortOptions\n\n      // State management\n      extendedApi.exportSortState = () => ({\n        sortConfig: currentSortConfig,\n        globalOptions: globalSortOptions,\n        version: '2.1.0',\n      })\n\n      extendedApi.importSortState = (state: Record<string, unknown>) => {\n        if (state?.sortConfig) {\n          setSortConfig(api, state.sortConfig as SortConfig | MultiSortConfig)\n        }\n        if (state?.globalOptions) {\n          globalSortOptions = state.globalOptions as SortOptions\n        }\n      }\n\n      // Cleanup function\n      extendedApi._sortingPluginCleanup = () => {\n        if (dataPipeline && sortingInterceptor) {\n          dataPipeline.removeDataInterceptor('sort', 'sorting')\n        }\n        if (eventUnsubscribe) {\n          eventUnsubscribe()\n        }\n        currentSortConfig = null\n        globalSortOptions = {}\n        debouncedDataProcessing = null\n        sortingInterceptor = null\n      }\n\n      // Event handling\n      if (eventUtils && api.on) {\n        // Listen for column changes to update column-specific sort options\n        const unsubscribeColumns = api.on('columns-changed', (columns: import('../../types').ColumnDef[]) => {\n          currentColumns = columns\n          logger.debug('Columns updated', { columnCount: columns.length })\n\n          // Clear cache when columns change as sort options might have changed\n          lastSortedData = []\n          lastDataHash = ''\n          lastSortCacheKey = ''\n\n          // Trigger re-sort if there's an active sort config\n          if (currentSortConfig && debouncedDataProcessing) {\n            debouncedDataProcessing()\n          }\n        })\n\n        // Listen for config changes to update global sort options\n        const unsubscribeConfig = api.on('config-changed', (newConfig: import('../../types').GridConfig) => {\n          if (newConfig.sortOptions) {\n            logger.debug('Config changed, updating global sort options', { sortOptions: newConfig.sortOptions })\n            globalSortOptions = { ...globalSortOptions, ...newConfig.sortOptions }\n\n            // Clear cache when sort options change\n            lastSortedData = []\n            lastDataHash = ''\n            lastSortCacheKey = ''\n\n            // Trigger re-sort if there's an active sort config\n            if (currentSortConfig && debouncedDataProcessing) {\n              debouncedDataProcessing()\n            }\n          }\n        })\n\n        // Store unsubscribe function\n        eventUnsubscribe = () => {\n          unsubscribeColumns()\n          unsubscribeConfig()\n        }\n      }\n\n      // Initialize current columns from API\n      const currentState = api.getState()\n      if (currentState?.columns) {\n        currentColumns = currentState.columns\n      }\n\n      // Initialize global sort options from config\n      if (currentState?.config?.sortOptions) {\n        logger.debug('Initializing global sort options from config', { sortOptions: currentState.config.sortOptions })\n        globalSortOptions = { ...currentState.config.sortOptions }\n      }\n\n      const features = sortingInterceptor.metadata?.supportedFeatures?.join(', ') || 'single-field'\n      logger.info(`Sorting functionality installed with features: ${features}`)\n    },\n\n    cleanup(): void {\n      if (eventUnsubscribe) {\n        eventUnsubscribe()\n        eventUnsubscribe = null\n      }\n      currentSortConfig = null\n      globalSortOptions = {}\n      debouncedDataProcessing = null\n      sortingInterceptor = null\n      logger.info('Cleaned up')\n    },\n  }\n}\n\n// Convenience exports\nexport const sortingPlugin: GridPlugin = createSortingPlugin()\nexport const basicSortingPlugin: GridPlugin = createSortingPlugin({ enableMultiSort: false })\nexport const enhancedSortingPlugin: GridPlugin = createSortingPlugin({ enableMultiSort: true })\n\n// Note: SortingPluginOptions is already exported above\n"],"mappings":"yCAeA,SAAgB,EAAmB,EAAuC,CACxE,OAEE,OAAO,GAAW,YADlB,GAEA,UAAW,GACX,cAAe,GACf,OAAQ,EAAmC,OAAU,UACrD,CAAC,MAAO,OAAO,CAAC,SAAU,EAAmC,UAAoB,CAIrF,SAAgB,EAAkB,EAA4C,CAC5E,OAEE,OAAO,GAAW,YADlB,GAEA,WAAY,GACZ,MAAM,QAAS,EAAmC,OAAO,CAO7D,SAAS,EAAkB,EAAkC,CAC3D,IAAMA,EAA8B,EAAE,CAChC,EAAQ,eACVC,EAEJ,MAAQ,EAAQ,EAAM,KAAK,EAAI,IAAM,MAC/B,EAAM,GAER,EAAO,KAAK,SAAS,EAAM,GAAI,GAAG,CAAC,CAC1B,EAAM,IAEf,EAAO,KAAK,EAAM,GAAG,CAIzB,OAAO,EAWT,SAAS,EAAe,EAAW,EAAW,EAAgB,GAAe,CAC3E,IAAM,EAAU,EAAkB,EAAgB,EAAI,EAAE,aAAa,CAAC,CAChE,EAAU,EAAkB,EAAgB,EAAI,EAAE,aAAa,CAAC,CAEhE,EAAY,KAAK,IAAI,EAAQ,OAAQ,EAAQ,OAAO,CAE1D,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,IAAK,CAClC,IAAM,EAAS,EAAQ,GACjB,EAAS,EAAQ,GAGvB,GAAI,IAAW,IAAA,GAAW,MAAO,GACjC,GAAI,IAAW,IAAA,GAAW,MAAO,GAGjC,GAAI,OAAO,GAAW,UAAY,OAAO,GAAW,SAAU,CAC5D,GAAI,IAAW,EACb,OAAO,EAAS,EAElB,SAIF,GAAI,OAAO,GAAW,UAAY,OAAO,GAAW,SAAU,CAC5D,IAAM,EAAa,EAAO,cAAc,EAAO,CAC/C,GAAI,IAAe,EACjB,OAAO,EAET,SAIF,GAAI,OAAO,GAAW,SAAU,MAAO,GACvC,GAAI,OAAO,GAAW,SAAU,MAAO,GAGzC,MAAO,GAMT,IAAa,EAAb,KAA0B,CAIxB,OAAO,cAAc,EAAc,EAAc,EAA+B,CAE9E,GAAI,IAAM,MAAQ,IAAM,KAAM,MAAO,GACrC,GAAI,GAAM,KAAyB,MAAO,GAC1C,GAAI,GAAM,KAAyB,MAAO,GAG1C,GAAI,OAAO,GAAM,UAAY,OAAO,GAAM,SACxC,OAAO,EAAI,EAGb,GAAI,aAAa,MAAQ,aAAa,KACpC,OAAO,EAAE,SAAS,CAAG,EAAE,SAAS,CAIlC,IAAM,EAAO,OAAO,EAAE,CAChB,EAAO,OAAO,EAAE,CAGtB,GAAI,GAAS,YAEX,GAAI,CAKF,OAJiB,IAAI,KAAK,SAAS,EAAQ,OAAQ,CACjD,QAAS,GACT,YAAa,EAAQ,aAAe,OACrC,CAAC,CACc,QAAQ,EAAM,EAAK,MAC7B,CAEN,IAAM,EAAgB,EAAQ,cAAgB,WAAa,EAAQ,cAAgB,OACnF,OAAO,EAAe,EAAM,EAAM,EAAc,CAWpD,OANI,GAAS,QAAU,GAAS,YACvB,EAAK,cAAc,EAAM,EAAQ,OAAQ,CAC9C,YAAa,EAAQ,YACtB,CAAC,CAGG,EAAK,cAAc,EAAK,CAMjC,OAAO,eAAe,EAAiB,EAAsB,EAAwC,CACnG,GAAI,CAAC,EAAK,OAAQ,OAAO,EAEzB,GAAM,CAAE,QAAO,YAAW,aAAY,oBAAqB,EAE3D,MAAO,CAAC,GAAG,EAAK,CAAC,MAAM,EAAG,IAAM,CAC9B,IAAM,EAAO,EAAE,GACT,EAAO,EAAE,GAGf,GAAI,IAAe,IAAA,GAAW,CAC5B,GAAK,GAAS,MAAgC,GAAS,KAA6B,MAAO,GAC3F,GAAI,GAAS,KAA4B,OAAO,EAAa,GAAK,EAClE,GAAI,GAAS,KAA4B,OAAO,EAAa,EAAI,GAInE,IAAIC,EACJ,GAAI,CACF,EAAa,EACT,EAAiB,EAAM,EAAK,CAC5B,KAAK,cAAc,EAAM,EAAM,EAAc,MAClC,CAEf,EAAa,KAAK,cAAc,EAAM,EAAM,EAAc,CAG5D,OAAO,IAAc,OAAS,CAAC,EAAa,GAC5C,CAOJ,OAAO,eAAe,EAAiB,EAAyB,EAAwC,CACtG,GAAI,CAAC,EAAK,QAAU,EAAW,SAAW,EAAG,OAAO,EAGpD,IAAM,EAAc,KAAK,mBAAmB,EAAW,CACvD,GAAI,EAAY,SAAW,EAAG,OAAO,EAGrC,IAAM,EAAe,CAAC,GAAG,EAAY,CAAC,MAAM,EAAG,IAAM,EAAE,SAAW,EAAE,SAAS,CAE7E,MAAO,CAAC,GAAG,EAAK,CAAC,MAAM,EAAG,IAAM,CAC9B,IAAK,IAAM,KAAa,EAAc,CACpC,GAAM,CAAE,QAAO,YAAW,aAAY,oBAAqB,EACrD,EAAO,EAAE,GACT,EAAO,EAAE,GAKTC,EAA6B,CACjC,GAAG,EAEH,GAAI,EAAU,cAAgB,IAAA,IAAa,CAAE,YAAa,EAAU,YAAa,CACjF,GAAI,EAAU,cAAgB,IAAA,IAAa,CAAE,YAAa,EAAU,YAAa,CACjF,GAAI,EAAU,SAAW,IAAA,IAAa,CAAE,OAAQ,EAAU,OAAQ,CACnE,CAGD,GAAI,IAAe,IAAA,GAAW,CAC5B,GAAK,GAAS,MAAgC,GAAS,KAA6B,SACpF,GAAI,GAAS,KAA4B,OAAO,EAAa,GAAK,EAClE,GAAI,GAAS,KAA4B,OAAO,EAAa,EAAI,GAInE,IAAID,EACJ,GAAI,CACF,EAAa,EACT,EAAiB,EAAM,EAAK,CAC5B,KAAK,cAAc,EAAM,EAAM,EAAc,MAClC,CAEf,EAAa,KAAK,cAAc,EAAM,EAAM,EAAc,CAG5D,GAAI,IAAe,EACjB,OAAO,IAAc,OAAS,CAAC,EAAa,EAIhD,MAAO,IACP,CAMJ,OAAO,qBAAqB,EAAqE,CAsB/F,OArBK,EAED,EAAmB,EAAO,CACrB,CACL,OAAQ,CACN,CACE,MAAO,EAAO,MACd,UAAW,EAAO,UAClB,SAAU,EACX,CACF,CACF,CAGC,EAAkB,EAAO,CACpB,CACL,GAAG,EACH,OAAQ,KAAK,mBAAmB,EAAO,OAAO,CAC/C,CAGI,KArBa,KA2BtB,OAAO,mBAAmB,EAAkC,CAG1D,OAFK,MAAM,QAAQ,EAAO,CAEnB,EACJ,OAAO,GACN,GACA,OAAO,GAAU,UACjB,OAAO,EAAM,OAAU,UACvB,EAAM,MAAM,MAAM,GAAK,IACvB,CAAC,MAAO,OAAO,CAAC,SAAS,EAAM,UAAU,CAC1C,CACA,KAAK,EAAO,KAAW,CACtB,GAAG,EACH,SAAU,OAAO,EAAM,UAAa,SAAW,EAAM,SAAW,EACjE,EAAE,CACF,MAAM,EAAG,IAAM,EAAE,SAAW,EAAE,SAAS,CAdP,EAAE,CAoBvC,OAAO,wBAAwB,EAAkC,CAE/D,OADoB,KAAK,mBAAmB,EAAO,CAChC,KAAK,EAAO,KAAW,CAAE,GAAG,EAAO,SAAU,EAAO,EAAE,CAM3E,OAAO,oBACL,EACA,EACS,CACT,GAAI,IAAY,EAAS,MAAO,GAChC,GAAI,CAAC,GAAW,CAAC,EAAS,MAAO,GAEjC,IAAM,EAAc,KAAK,qBAAqB,EAAQ,CAChD,EAAc,KAAK,qBAAqB,EAAQ,CAKtD,MAHI,CAAC,GAAe,CAAC,GACjB,EAAY,OAAO,SAAW,EAAY,OAAO,OAAe,GAE7D,EAAY,OAAO,OAAO,EAAQ,IAAU,CACjD,IAAM,EAAS,EAAY,OAAO,GAClC,OAAO,GACL,EAAO,QAAU,EAAO,OACxB,EAAO,YAAc,EAAO,WAC5B,EAAO,WAAa,EAAO,UAC3B,EAAO,aAAe,EAAO,YAC/B,GCzTO,EAAb,KAA+B,CAC7B,IAEA,YAAY,EAAc,CACxB,KAAK,IAAM,EAMb,KAAiC,EAAU,EAA8B,CACnE,KAAK,IAAI,MACX,KAAK,IAAI,KAAK,EAAO,EAAQ,CAOjC,GACE,EACA,EAC0B,CAC1B,GAAI,KAAK,IAAI,GACX,OAAO,KAAK,IAAI,GAAG,EAAO,EAAQ,CAQtC,IACE,EACA,EACM,CACF,KAAK,IAAI,KACX,KAAK,IAAI,IAAI,EAAO,EAAQ,GAQrB,EAAb,KAA8B,CAC5B,QAEA,YAAY,EAAc,CACxB,KAAK,QAAU,IAAI,EAAkB,EAAI,CAI3C,oBAAoB,EAA+C,CACjE,KAAK,QAAQ,KAAK,oBAAqB,EAAO,CAGhD,mBAAmB,EAA4C,CAC7D,KAAK,QAAQ,KAAK,mBAAoB,EAAK,CAG7C,qBAAqB,EAA8C,CACjE,KAAK,QAAQ,KAAK,qBAAsB,EAAK,CAG/C,wBAAwB,EAAiD,CACvE,KAAK,QAAQ,KAAK,wBAAyB,EAAK,CAIlD,wBAAwB,EAAiD,CACvE,KAAK,QAAQ,KAAK,wBAAyB,EAAK,CAGlD,gBAAgB,EAAwC,CACtD,KAAK,QAAQ,KAAK,eAAgB,EAAK,CAGzC,cAAc,EAAsC,CAClD,KAAK,QAAQ,KAAK,aAAc,EAAK,CAGvC,mBAAmB,EAA2C,CAC5D,KAAK,QAAQ,KAAK,kBAAmB,EAAK,CAI5C,kBAAkB,EAA0C,CAC1D,KAAK,QAAQ,KAAK,iBAAkB,EAAK,CAG3C,yBAAyB,EAAkD,CACzE,KAAK,QAAQ,KAAK,yBAA0B,EAAK,CAGnD,sBAAsB,EAAgD,CACpE,KAAK,QAAQ,KAAK,sBAAuB,EAAM,CAIjD,oBAAoB,EAA6C,CAC/D,KAAK,QAAQ,KAAK,oBAAqB,EAAK,CAG9C,kBAAkB,EAA2C,CAC3D,KAAK,QAAQ,KAAK,kBAAmB,EAAK,CAG5C,qBAAqB,EAA8C,CACjE,KAAK,QAAQ,KAAK,qBAAsB,EAAK,CAG/C,mBAAmB,EAA4C,CAC7D,KAAK,QAAQ,KAAK,mBAAoB,EAAK,CAI7C,iBAAiB,EAAyC,CACxD,KAAK,QAAQ,KAAK,gBAAiB,EAAK,CAG1C,mBAAmB,EAA2C,CAC5D,KAAK,QAAQ,KAAK,kBAAmB,EAAK,CAG5C,gBAAgB,EAAwC,CACtD,KAAK,QAAQ,KAAK,eAAgB,EAAK,CAIzC,KAAiC,EAAU,EAA8B,CACvE,KAAK,QAAQ,KAAK,EAAO,EAAQ,CAInC,GACE,EACA,EAC0B,CAC1B,OAAO,KAAK,QAAQ,GAAG,EAAO,EAAQ,CAIxC,IACE,EACA,EACM,CACN,KAAK,QAAQ,IAAI,EAAO,EAAQ,GAOpC,SAAgB,EAAsB,EAAgC,CACpE,OAAO,IAAI,EAAiB,EAAI,CAMlC,SAAgB,EAAqB,EAA+E,CAClH,OAAO,OAAO,EAAI,MAAS,WCnJ7B,SAAS,EAAqB,EAA4E,CAexG,MAdI,CAAC,GAAa,CAAC,EAAU,SACpB,KAIL,EAAU,WAAa,GAClB,EAAE,CAIP,OAAO,EAAU,UAAa,SACzB,EAAU,SAGZ,KAOT,SAAS,EAAiB,EAA4B,EAAgD,CAKpG,OAJK,EAIE,CACL,GAAG,EACH,GAAG,EACJ,CANQ,EAYX,SAAgB,EAAoB,EAAgC,EAAE,CAAc,CAElF,IAAM,EAAS,EAAA,aAAa,CAAE,OAAQ,SAAU,UAAW,gBAAiB,CAAC,CAGvE,EAAS,CACb,gBAAiB,EAAQ,iBAAmB,GAC5C,cAAe,KAAK,IAAI,EAAG,KAAK,IAAI,EAAQ,eAAiB,EAAG,GAAG,CAAC,CACrE,CAED,EAAO,MAAM,0BAA2B,CAAE,SAAQ,UAAS,CAAC,CAG5D,IAAIE,EAA4C,KAC5CC,EAAiC,EAAE,CACnCC,EAA6C,KAC7CC,EAA+C,KAC/CC,EAAoB,KACpBC,EAAwC,KACxCC,EAAoD,EAAE,CAGtDC,EAA8D,KAG9DC,EAA4B,EAAE,CAC9BC,EAA2B,GAC3BC,EAAuB,GAGrB,GAA2D,EAAS,IAAoB,CAC5F,IAAIC,EAAyB,KAC7B,QAAS,GAAG,IAAwB,CAC9B,GAAS,aAAa,EAAQ,CAClC,EAAU,eAAiB,EAAK,GAAG,EAAK,CAAE,EAAK,IAK7C,GAAsC,EAAc,IACjD,OAAO,EAAI,IAAY,WAI1B,GAAiB,EAAc,IAA0D,CAC7F,IAAM,EAAmB,EAAa,qBAAqB,EAAW,CAgBtE,GAdA,EAAO,MAAM,uBAAwB,CACnC,eAAgB,EAChB,mBACA,oBACA,gBAAiB,EAAO,gBACzB,CAAC,CAGE,CAAC,EAAO,iBAAmB,GAAkB,QAAU,EAAiB,OAAO,OAAS,IAC1F,EAAO,KAAK,mDAAmD,CAC/D,EAAiB,OAAS,EAAiB,OAAO,MAAM,EAAG,EAAE,EAI3D,CAAC,EAAa,oBAAoB,EAAmB,EAAiB,CAAE,CAC1E,EAAO,KAAK,qEAAqE,CACjF,EAAoB,EAGpB,EAAiB,EAAE,CACnB,EAAmB,GACnB,EAAe,GAGX,IACF,EAAmB,QAAU,IAAqB,MAIpD,GAAI,CACE,EAAU,EAAK,eAAe,EAChC,EAAI,aAAa,CAAE,KAAM,EAAY,CAAC,CAEpC,GAAc,EAAqB,EAAI,EAErC,IACF,EAAW,oBAAoB,EAAiB,CAChD,EAAO,MAAM,kCAAmC,CAAE,OAAQ,EAAkB,CAAC,QAG1E,EAAO,CACd,EAAO,KAAK,8BAA+B,EAAM,CAI/C,GACF,GAAyB,GAKzB,MAEA,GACG,KAGH,GAAgB,EAAc,EAAe,IAAqC,CACtF,GAAI,CAAC,GAAS,OAAO,GAAU,SAAU,CACvC,EAAO,KAAK,yCAAyC,CACrD,OAGF,GAAI,CAAC,EAAW,CACd,IAAM,EAAgB,GAAmB,OAAO,KAAK,GAAK,EAAE,QAAU,EAAM,CAG5E,GAAI,CAAC,EACH,EAAY,cACH,EAAc,YAAc,MACrC,EAAY,WACP,CAEL,EAAO,MAAM,0BAA2B,CAAE,QAAO,CAAC,CAG9C,GAAqB,EAAkB,OAAO,SAAW,EAC3D,EAAc,EAAK,KAAK,CAGxB,EAAgB,EAAK,EAAM,CAE7B,QAQJ,EAAc,EAJqB,CACjC,OAAQ,CAAC,CAAE,QAAO,YAAW,SAAU,EAAG,CAAC,CAC5C,CAE4B,EAGzB,GAAgB,EAAc,EAAe,IAAqC,CACtF,GAAI,CAAC,GAAS,OAAO,GAAU,SAAU,CACvC,EAAO,KAAK,yCAAyC,CACrD,OAIF,IAAM,EAAgB,CAAC,GAAI,GAAmB,QAAU,EAAE,CAAE,CACtD,EAAY,EAAO,cAEzB,EAAO,MAAM,sBAAuB,CAAE,QAAO,YAAW,gBAAe,YAAW,CAAC,CAGnF,IAAM,EAAgB,EAAc,UAAU,GAAK,EAAE,QAAU,EAAM,CACrE,GAAI,IAAkB,GAAI,CACxB,IAAM,EAAmB,EAAc,GAAgB,UAEvD,GAAK,EAgCH,EAAc,GAAiB,CAAE,GAAG,EAAc,GAAiB,YAAW,CAC9E,EAAO,MAAM,iDAAkD,CAAE,MAAO,EAAe,YAAW,CAAC,SA/B/F,IAAqB,MAEvB,EAAc,GAAiB,CAAE,GAAG,EAAc,GAAiB,UAAW,OAAQ,CACtF,EAAO,MAAM,iCAAkC,CAAE,MAAO,EAAe,KAAM,EAAkB,CAAC,KAC3F,CAML,GAJA,EAAc,OAAO,EAAe,EAAE,CACtC,EAAO,MAAM,gCAAiC,CAAE,QAAO,gBAAiB,EAAc,OAAQ,CAAC,CAG3F,EAAc,SAAW,EAAG,CAC9B,EAAc,EAAK,KAAK,CACpB,GACF,EAAW,qBAAqB,CAAE,QAAO,WAAY,CAAE,OAAQ,EAAE,CAAE,CAAE,CAAC,CAExE,OAIF,IAAMC,EAA6B,CACjC,OAAQ,EAAa,wBAAwB,EAAc,CAC5D,CACD,EAAc,EAAK,EAAU,CACzB,GACF,EAAW,qBAAqB,CAAE,QAAO,WAAY,EAAW,CAAC,CAEnE,gBAOK,EAAc,OAAS,EAAW,CAE3C,IAAM,EAAe,GAAa,MAClC,EAAc,KAAK,CAAE,QAAO,UAAW,EAAc,SAAU,EAAc,OAAQ,CAAC,CACtF,EAAO,MAAM,kBAAmB,CAAE,YAAa,EAAc,OAAQ,UAAW,EAAc,CAAC,KAC1F,CACL,EAAO,KAAK,wBAAwB,EAAU,WAAW,CACzD,OAGF,IAAMA,EAA6B,CACjC,OAAQ,EAAa,wBAAwB,EAAc,CAC5D,CAED,EAAO,MAAM,4CAA6C,CAAE,YAAW,CAAC,CACxE,EAAc,EAAK,EAAU,CAGzB,GACF,EAAW,mBAAmB,CAAE,MAAO,CAAE,QAAO,UAAW,GAAa,MAAO,SAAU,EAAG,CAAE,WAAY,EAAW,CAAC,EAIpH,GAAmB,EAAc,IAAwB,CAC7D,GAAI,CAAC,GAAqB,CAAC,EAAO,OAElC,IAAM,EAAiB,EAAkB,OAAO,OAAO,GAAK,EAAE,QAAU,EAAM,CAE9E,GAAI,EAAe,SAAW,EAC5B,EAAc,EAAK,KAAK,KACnB,CACL,IAAMA,EAA6B,CACjC,OAAQ,EAAa,wBAAwB,EAAe,CAC7D,CACD,EAAc,EAAK,EAAU,CAEzB,GACF,EAAW,qBAAqB,CAAE,QAAO,WAAY,EAAW,CAAC,GAKjE,GAAsB,EAAc,EAAe,IAA8B,CACrF,GAAI,CAAC,GAAqB,CAAC,GAAS,OAAO,GAAgB,SAAU,OAErE,IAAM,EAAS,CAAC,GAAG,EAAkB,OAAO,CACtC,EAAa,EAAO,UAAU,GAAK,EAAE,QAAU,EAAM,CAE3D,GAAI,IAAe,GAAI,OAGvB,IAAM,EAAc,EAAO,OAAS,EAC9B,EAAkB,KAAK,IAAI,EAAG,KAAK,IAAI,EAAa,EAAY,CAAC,CAGvE,EAAO,GAAc,CAAE,GAAG,EAAO,GAAc,SAAU,EAAiB,CAE1E,IAAMA,EAA6B,CACjC,OAAQ,EAAa,wBAAwB,EAAO,CACrD,CACD,EAAc,EAAK,EAAU,CAEzB,GACF,EAAW,wBAAwB,CACjC,QACA,YAAa,EAAkB,OAAO,IAAa,UAAY,EAC/D,YAAa,EACd,CAAC,EAMN,MAAO,CACL,KAAM,UACN,QAAS,QACT,aAAc,CAAC,gBAAgB,CAE/B,QAAQ,EAAc,EAA6B,CAGjD,GAFA,EAAe,EAAI,gBAAgB,CAE/B,CAAC,EAAc,CACjB,EAAO,KAAK,yCAAyC,CACrD,OAIF,EAAa,EAAsB,EAAI,CAGvC,EAA0B,MAAsB,CAE1C,GACF,EAAW,KAAK,yBAA0B,CAAE,OAAQ,UAAW,CAAC,EAEjE,GAAG,CAGN,EAAqB,CACnB,KAAM,UACN,KAAM,OACN,SAAU,IACV,QAAS,GACT,UAAY,GAAoB,CAE9B,IAAM,EAAW,KAAK,UAAU,EAAK,OAAS,EAAI,CAAC,EAAK,GAAI,EAAK,OAAO,CAAG,EAAE,CAAC,CACxE,EAAiB,KAAK,UAAU,EAAkB,CAQxD,GANA,EAAO,MAAM,uCAAwC,CACnD,WAAY,EAAK,OACjB,oBACA,YAAa,GAAmB,QAAQ,QAAU,EACnD,CAAC,CAEE,CAAC,GAAqB,CAAC,EAAK,QAAU,EAAkB,OAAO,SAAW,EAE5E,OADA,EAAO,MAAM,2DAA2D,CACjE,EAGT,GAAI,CAGF,IAAM,EAA0B,EAAkB,OAAO,IAAI,GAAS,CACpE,IAAM,EAAS,EAAe,KAAK,GAAO,EAAI,QAAU,EAAM,MAAM,CAC9D,EAAoB,EAAqB,EAAO,CAChD,EAAwB,EAAiB,EAAmB,EAAkB,CAIpF,MAAO,CACL,MAAO,EAAM,MACb,UAAW,EAAM,UACjB,SAAU,EAAM,SAChB,GAAG,EAEH,GAAI,EAAM,cAAgB,IAAA,IAAa,CAAE,YAAa,EAAM,YAAa,CACzE,GAAI,EAAM,cAAgB,IAAA,IAAa,CAAE,YAAa,EAAM,YAAa,CACzE,GAAI,EAAM,SAAW,IAAA,IAAa,CAAE,OAAQ,EAAM,OAAQ,CAC1D,GAAI,EAAM,aAAe,IAAA,IAAa,CAAE,WAAY,EAAM,WAAY,CACtE,GAAI,EAAM,mBAAqB,IAAA,IAAa,CAAE,iBAAkB,EAAM,iBAAkB,CACzF,EACD,CAGI,EAAc,KAAK,UACvB,EAAwB,IAAI,IAAM,CAChC,MAAO,EAAE,MACT,UAAW,EAAE,UACb,SAAU,EAAE,SACZ,YAAc,EAAkB,aAAe,GAC/C,YAAc,EAAkB,aAAe,IAAA,GAC/C,OAAS,EAAkB,QAAU,IAAA,GACrC,WAAa,EAAkB,YAAc,IAAA,GAC9C,EAAE,CACJ,CAGK,EAAe,GAAG,EAAe,GAAG,IAG1C,GACE,IAAa,GACb,IAAiB,GACjB,EAAe,OAAS,EAGxB,OADA,EAAO,MAAM,iEAAiE,CACvE,EAKT,IAAM,EAAa,EAAa,eAAe,EAAM,EAAyB,EAAkB,CAYhG,MATA,GAAiB,EACjB,EAAe,EACf,EAAmB,EAEnB,EAAO,MAAM,2BAA4B,CACvC,eAAgB,EAAK,OACrB,aAAc,EAAW,OACzB,WAAY,EACb,CAAC,CACK,QACA,EAAO,CAEd,OADA,EAAO,MAAM,wBAAyB,EAAM,CACrC,IAGX,SAAU,CACR,YAAa,EAAO,gBAAkB,sBAAwB,uBAC9D,QAAS,QACT,kBAAmB,CAAC,eAAgB,GAAI,EAAO,gBAAkB,CAAC,cAAc,CAAG,EAAE,CAAE,CACxF,CACF,CAGD,EAAa,wBAAwB,OAAQ,EAAmB,CAGhE,IAAM,EAAc,EAgEpB,GA7DA,EAAY,cAAiB,GAAoD,EAAc,EAAK,EAAW,CAC/G,EAAY,kBAAsB,GAAe,CACjD,EAAY,cAAgB,EAAe,IAA+B,EAAa,EAAK,EAAO,EAAU,CAC7G,EAAY,cAAkB,EAAc,EAAK,KAAK,CAGlD,EAAO,iBACT,EAAO,MAAM,gCAAiC,CAAE,SAAQ,CAAC,CACzD,EAAY,uBAA2B,EACvC,EAAY,cAAgB,EAAe,KACzC,EAAO,MAAM,0BAA2B,CAAE,QAAO,YAAW,CAAC,CACtD,EAAa,EAAK,EAAO,EAAU,EAE5C,EAAY,gBAAmB,GAAkB,EAAgB,EAAK,EAAM,CAC5E,EAAY,oBAAsB,EAAe,IAAwB,EAAmB,EAAK,EAAO,EAAY,EAEpH,EAAO,MAAM,sBAAuB,CAAE,SAAQ,CAAC,CAIjD,EAAY,eAAkB,GAAyB,CACjD,GAAW,OAAO,GAAY,WAChC,EAAoB,CAAE,GAAG,EAAmB,GAAG,EAAS,CACpD,GAAqB,GACvB,GAAyB,GAI/B,EAAY,mBAAuB,EAGnC,EAAY,qBAAyB,CACnC,WAAY,EACZ,cAAe,EACf,QAAS,QACV,EAED,EAAY,gBAAmB,GAAmC,CAC5D,GAAO,YACT,EAAc,EAAK,EAAM,WAA2C,CAElE,GAAO,gBACT,EAAoB,EAAM,gBAK9B,EAAY,0BAA8B,CACpC,GAAgB,GAClB,EAAa,sBAAsB,OAAQ,UAAU,CAEnD,GACF,GAAkB,CAEpB,EAAoB,KACpB,EAAoB,EAAE,CACtB,EAA0B,KAC1B,EAAqB,MAInB,GAAc,EAAI,GAAI,CAExB,IAAM,EAAqB,EAAI,GAAG,kBAAoB,GAA+C,CACnG,EAAiB,EACjB,EAAO,MAAM,kBAAmB,CAAE,YAAa,EAAQ,OAAQ,CAAC,CAGhE,EAAiB,EAAE,CACnB,EAAe,GACf,EAAmB,GAGf,GAAqB,GACvB,GAAyB,EAE3B,CAGI,EAAoB,EAAI,GAAG,iBAAmB,GAAgD,CAC9F,EAAU,cACZ,EAAO,MAAM,+CAAgD,CAAE,YAAa,EAAU,YAAa,CAAC,CACpG,EAAoB,CAAE,GAAG,EAAmB,GAAG,EAAU,YAAa,CAGtE,EAAiB,EAAE,CACnB,EAAe,GACf,EAAmB,GAGf,GAAqB,GACvB,GAAyB,GAG7B,CAGF,MAAyB,CACvB,GAAoB,CACpB,GAAmB,EAKvB,IAAM,EAAe,EAAI,UAAU,CAC/B,GAAc,UAChB,EAAiB,EAAa,SAI5B,GAAc,QAAQ,cACxB,EAAO,MAAM,+CAAgD,CAAE,YAAa,EAAa,OAAO,YAAa,CAAC,CAC9G,EAAoB,CAAE,GAAG,EAAa,OAAO,YAAa,EAG5D,IAAM,EAAW,EAAmB,UAAU,mBAAmB,KAAK,KAAK,EAAI,eAC/E,EAAO,KAAK,kDAAkD,IAAW,EAG3E,SAAgB,CACd,AAEE,KADA,GAAkB,CACC,MAErB,EAAoB,KACpB,EAAoB,EAAE,CACtB,EAA0B,KAC1B,EAAqB,KACrB,EAAO,KAAK,aAAa,EAE5B,CAIH,MAAaC,EAA4B,GAAqB,CACjDC,EAAiC,EAAoB,CAAE,gBAAiB,GAAO,CAAC,CAChFC,EAAoC,EAAoB,CAAE,gBAAiB,GAAM,CAAC"}