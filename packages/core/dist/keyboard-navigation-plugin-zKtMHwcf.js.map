{"version":3,"file":"keyboard-navigation-plugin-zKtMHwcf.js","names":["keyboardNavigationPlugin: GridPlugin","focusState: VirtualFocusState","config: KeyboardConfig","gridDimensions: GridDimensions","gridContainer: HTMLElement | null","activeElement: HTMLElement | null","bindings: KeyBinding[]","parts: string[]"],"sources":["../src/plugins/core/keyboard-navigation-plugin.ts"],"sourcesContent":["/**\n * Keyboard Navigation Plugin - Core functionality\n *\n * Provides comprehensive keyboard navigation capabilities following WCAG 2.1 AA standards\n * and Excel-like navigation patterns. Implements virtual focus system with DOM synchronization\n * and configurable key bindings.\n *\n * Features:\n * - Arrow key navigation (Up/Down/Left/Right)\n * - Home/End navigation (row start/end, grid start/end)\n * - Page Up/Down navigation\n * - Tab/Shift+Tab for cell navigation\n * - Enter for edit mode activation\n * - F2 for edit mode\n * - Escape to exit edit mode\n * - Space for selection toggle\n * - Ctrl+A for select all\n * - Excel-style keyboard shortcuts\n * - Virtual focus system with ARIA attributes\n * - Integration with editing and selection plugins\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../index'\nimport type { GridAPI } from '../../types'\nimport type { CellPosition, InteractionPayload } from '../../renderers/base/interaction-contract'\nimport { createLogger } from '../../utils/logger'\n\ninterface VirtualFocusState {\n  activeCell: CellPosition | null\n  focusVisible: boolean\n  navigationMode: 'cell' | 'row' | 'column'\n  focusStack: CellPosition[]\n  lastDirection: NavigationDirection | null\n}\n\ninterface KeyboardConfig {\n  enableNavigation: boolean\n  enableEditing: boolean\n  enableSelection: boolean\n  enableShortcuts: boolean\n  customKeyBindings: Map<string, KeyBinding>\n  navigationBehavior: 'wrap' | 'stop' | 'cycle'\n  pageSize: number\n}\n\ninterface KeyBinding {\n  key: string\n  modifiers?: {\n    ctrl?: boolean\n    shift?: boolean\n    alt?: boolean\n    meta?: boolean\n  }\n  action: KeyboardAction\n  context?: 'always' | 'editing' | 'navigation'\n  description?: string\n}\n\ninterface KeyboardAction {\n  type: 'navigation' | 'editing' | 'selection' | 'custom'\n  command: string\n  parameters?: Record<string, any>\n}\n\ntype NavigationDirection =\n  | 'up'\n  | 'down'\n  | 'left'\n  | 'right'\n  | 'home'\n  | 'end'\n  | 'pageUp'\n  | 'pageDown'\n  | 'firstRow'\n  | 'lastRow'\n  | 'firstColumn'\n  | 'lastColumn'\n\ninterface GridDimensions {\n  rowCount: number\n  columnCount: number\n  visibleRowStart: number\n  visibleRowEnd: number\n  visibleColumnStart: number\n  visibleColumnEnd: number\n}\n\n// Logger for keyboard navigation plugin - created at module level\nconst logger = createLogger({ module: 'Plugin', operation: 'KeyboardNavigation' })\n\nexport const keyboardNavigationPlugin: GridPlugin = {\n  name: 'core-keyboard-navigation',\n  version: '1.0.0',\n  dependencies: [], // No special capabilities needed\n\n  install(api: GridAPI, _get: CapabilityGetter) {\n\n    // Internal navigation state\n    const focusState: VirtualFocusState = {\n      activeCell: null,\n      focusVisible: false,\n      navigationMode: 'cell',\n      focusStack: [],\n      lastDirection: null,\n    }\n\n    const config: KeyboardConfig = {\n      enableNavigation: true,\n      enableEditing: true,\n      enableSelection: true,\n      enableShortcuts: true,\n      customKeyBindings: new Map(),\n      navigationBehavior: 'wrap',\n      pageSize: 10,\n    }\n\n    // Grid dimensions cache\n    let gridDimensions: GridDimensions = {\n      rowCount: 0,\n      columnCount: 0,\n      visibleRowStart: 0,\n      visibleRowEnd: 0,\n      visibleColumnStart: 0,\n      visibleColumnEnd: 0,\n    }\n\n    // DOM elements cache\n    let gridContainer: HTMLElement | null = null\n    let activeElement: HTMLElement | null = null\n\n    // Event listeners registry\n    const eventListeners = new Map<string, (() => void)[]>()\n\n    // Setup default key bindings\n    setupDefaultKeyBindings()\n\n    // Extend GridAPI with keyboard navigation methods\n    const originalApi = api as any\n\n    // === CONFIGURATION METHODS ===\n    originalApi.setKeyboardConfig = (updates: Partial<KeyboardConfig>) => {\n      Object.assign(config, updates)\n      api.emit('keyboard-config-change', config)\n    }\n\n    originalApi.getKeyboardConfig = () => ({ ...config })\n\n    originalApi.registerKeyBinding = (binding: KeyBinding) => {\n      const key = createKeySignature(binding.key, binding.modifiers)\n      config.customKeyBindings.set(key, binding)\n      api.emit('key-binding-registered', { key, binding })\n    }\n\n    originalApi.unregisterKeyBinding = (key: string, modifiers?: KeyBinding['modifiers']) => {\n      const keySignature = createKeySignature(key, modifiers)\n      const wasRemoved = config.customKeyBindings.delete(keySignature)\n      if (wasRemoved) {\n        api.emit('key-binding-unregistered', { key: keySignature })\n      }\n      return wasRemoved\n    }\n\n    originalApi.getKeyBindings = () => {\n      return new Map(config.customKeyBindings)\n    }\n\n    // === FOCUS MANAGEMENT METHODS ===\n    originalApi.setActiveCell = (\n      position: CellPosition | null,\n      options: {\n        ensureVisible?: boolean\n        reason?: 'programmatic' | 'user' | 'navigation'\n        updateDOM?: boolean\n      } = {}\n    ) => {\n      const { ensureVisible = true, reason: _reason = 'programmatic', updateDOM = true } = options\n\n      // Validate position\n      if (position && !isValidCellPosition(position)) {\n        logger.warn('Invalid cell position:', { module: 'KeyboardNavigation' }, position)\n        return false\n      }\n\n      // Update focus stack\n      if (focusState.activeCell && position) {\n        focusState.focusStack.push(focusState.activeCell)\n        if (focusState.focusStack.length > 10) {\n          focusState.focusStack.shift() // Keep stack limited\n        }\n      }\n\n      // Set new active cell\n      // Note: Previous cell tracking available for undo functionality\n      focusState.activeCell = position\n      focusState.focusVisible = true\n\n      // Update DOM focus and ARIA attributes\n      if (updateDOM) {\n        updateDOMFocus(position)\n      }\n\n      // Ensure cell is visible in viewport\n      if (position && ensureVisible) {\n        ensureCellVisible(position)\n      }\n\n      // Update internal grid state (if available)\n      if ((api as any).__internal?.setFocusedCell) {\n        ;(api as any).__internal.setFocusedCell(position)\n      }\n\n      // Emit focus change event\n      api.emit('cell-focus-change', {\n        rowId: position ? position.rowId : null,\n        columnId: position ? position.columnId : null,\n      })\n\n      return true\n    }\n\n    originalApi.getActiveCell = () => focusState.activeCell\n\n    originalApi.getFocusState = () => ({ ...focusState })\n\n    originalApi.moveFocus = (\n      direction: NavigationDirection,\n      options: {\n        extend?: boolean\n        wrap?: boolean\n        pageSize?: number\n      } = {}\n    ) => {\n      if (!focusState.activeCell) {\n        // Initialize focus to first cell\n        const firstCell = getFirstCell()\n        if (firstCell) {\n          originalApi.setActiveCell(firstCell, { reason: 'navigation' })\n        }\n        return\n      }\n\n      const newPosition = calculateNewPosition(focusState.activeCell, direction, options)\n      if (newPosition) {\n        focusState.lastDirection = direction\n        originalApi.setActiveCell(newPosition, { reason: 'navigation' })\n\n        // Handle selection extension\n        if (options.extend && originalApi.isRowSelected && originalApi.selectRange) {\n          handleSelectionExtension(focusState.activeCell, newPosition)\n        }\n      }\n    }\n\n    originalApi.focusPreviousCell = () => {\n      if (focusState.focusStack.length > 0) {\n        const previousCell = focusState.focusStack.pop()\n        if (previousCell) {\n          originalApi.setActiveCell(previousCell, { reason: 'navigation' })\n        }\n      }\n    }\n\n    // === KEYBOARD EVENT HANDLING ===\n    originalApi.handleKeyboardEvent = (event: KeyboardEvent): boolean => {\n      if (!config.enableNavigation) {\n        return false\n      }\n\n      // Don't handle events from input elements unless they're our editors\n      if (\n        isInputElement(event.target as HTMLElement) &&\n        !isGridEditor(event.target as HTMLElement)\n      ) {\n        return false\n      }\n\n      const keySignature = createKeySignature(event.key, {\n        ctrl: event.ctrlKey,\n        shift: event.shiftKey,\n        alt: event.altKey,\n        meta: event.metaKey,\n      })\n\n      // Check custom key bindings first\n      const customBinding = config.customKeyBindings.get(keySignature)\n      if (customBinding && shouldExecuteBinding(customBinding)) {\n        return executeKeyBinding(customBinding, event)\n      }\n\n      // Handle built-in navigation keys\n      return handleBuiltinKeyboardEvent(event)\n    }\n\n    originalApi.initializeKeyboardHandling = (container: HTMLElement) => {\n      gridContainer = container\n\n      // Set up container for keyboard navigation\n      setupKeyboardContainer(container)\n\n      // Add keyboard event listener\n      const keydownHandler = (event: KeyboardEvent) => {\n        const handled = originalApi.handleKeyboardEvent(event)\n        if (handled) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n      }\n\n      container.addEventListener('keydown', keydownHandler)\n\n      // Store cleanup function\n      registerEventListener('keydown', () => {\n        container.removeEventListener('keydown', keydownHandler)\n      })\n\n      // Initialize focus\n      updateGridDimensions()\n      const firstCell = getFirstCell()\n      if (firstCell) {\n        originalApi.setActiveCell(firstCell, { reason: 'programmatic' })\n      }\n    }\n\n    // === INTEGRATION WITH OTHER PLUGINS ===\n    originalApi.enterEditMode = () => {\n      if (!config.enableEditing || !focusState.activeCell) {\n        return false\n      }\n\n      if (originalApi.startCellEdit) {\n        return originalApi.startCellEdit(\n          focusState.activeCell.rowId,\n          focusState.activeCell.columnId\n        )\n      }\n\n      // Fallback: emit edit start event\n      api.emit('cell-edit-start', {\n        rowId: focusState.activeCell.rowId,\n        columnId: focusState.activeCell.columnId,\n        value: null, // We don't have the value here\n      })\n\n      return true\n    }\n\n    originalApi.exitEditMode = (commit: boolean = true) => {\n      if (commit && originalApi.commitCellEdit) {\n        return originalApi.commitCellEdit()\n      } else if (!commit && originalApi.cancelCellEdit) {\n        originalApi.cancelCellEdit()\n        return true\n      }\n\n      // Fallback: emit edit cancel event\n      if (focusState.activeCell) {\n        api.emit('cell-edit-cancel', {\n          rowId: focusState.activeCell.rowId,\n          columnId: focusState.activeCell.columnId,\n          value: null, // We don't have the value here\n        })\n      }\n\n      return true\n    }\n\n    originalApi.toggleCellSelection = () => {\n      if (!config.enableSelection || !focusState.activeCell) {\n        return false\n      }\n\n      if (originalApi.toggleRowSelection) {\n        originalApi.toggleRowSelection(focusState.activeCell.rowId)\n        return true\n      }\n\n      // Fallback: emit selection event\n      api.emit('row-select', {\n        rowId: focusState.activeCell.rowId,\n        selected: true, // Assuming toggle means select\n        selectedRows: [], // We don't have access to current selection here\n      })\n\n      return true\n    }\n\n    // === HELPER FUNCTIONS ===\n    function setupDefaultKeyBindings() {\n      const bindings: KeyBinding[] = [\n        // Navigation\n        { key: 'ArrowUp', action: { type: 'navigation', command: 'moveUp' } },\n        { key: 'ArrowDown', action: { type: 'navigation', command: 'moveDown' } },\n        { key: 'ArrowLeft', action: { type: 'navigation', command: 'moveLeft' } },\n        { key: 'ArrowRight', action: { type: 'navigation', command: 'moveRight' } },\n        { key: 'Home', action: { type: 'navigation', command: 'moveHome' } },\n        { key: 'End', action: { type: 'navigation', command: 'moveEnd' } },\n        { key: 'PageUp', action: { type: 'navigation', command: 'pageUp' } },\n        { key: 'PageDown', action: { type: 'navigation', command: 'pageDown' } },\n\n        // Extended navigation with Ctrl\n        {\n          key: 'Home',\n          modifiers: { ctrl: true },\n          action: { type: 'navigation', command: 'moveFirstCell' },\n        },\n        {\n          key: 'End',\n          modifiers: { ctrl: true },\n          action: { type: 'navigation', command: 'moveLastCell' },\n        },\n        {\n          key: 'ArrowUp',\n          modifiers: { ctrl: true },\n          action: { type: 'navigation', command: 'moveFirstRow' },\n        },\n        {\n          key: 'ArrowDown',\n          modifiers: { ctrl: true },\n          action: { type: 'navigation', command: 'moveLastRow' },\n        },\n\n        // Selection extension\n        {\n          key: 'ArrowUp',\n          modifiers: { shift: true },\n          action: { type: 'selection', command: 'extendUp' },\n        },\n        {\n          key: 'ArrowDown',\n          modifiers: { shift: true },\n          action: { type: 'selection', command: 'extendDown' },\n        },\n        {\n          key: 'ArrowLeft',\n          modifiers: { shift: true },\n          action: { type: 'selection', command: 'extendLeft' },\n        },\n        {\n          key: 'ArrowRight',\n          modifiers: { shift: true },\n          action: { type: 'selection', command: 'extendRight' },\n        },\n\n        // Editing\n        { key: 'Enter', action: { type: 'editing', command: 'startEdit' }, context: 'navigation' },\n        { key: 'F2', action: { type: 'editing', command: 'startEdit' }, context: 'navigation' },\n        { key: 'Escape', action: { type: 'editing', command: 'cancelEdit' }, context: 'editing' },\n        { key: 'Enter', action: { type: 'editing', command: 'commitEdit' }, context: 'editing' },\n        {\n          key: 'Tab',\n          action: { type: 'editing', command: 'commitAndMoveNext' },\n          context: 'editing',\n        },\n        {\n          key: 'Tab',\n          modifiers: { shift: true },\n          action: { type: 'editing', command: 'commitAndMovePrev' },\n          context: 'editing',\n        },\n\n        // Selection\n        { key: ' ', action: { type: 'selection', command: 'toggle' } },\n        {\n          key: 'a',\n          modifiers: { ctrl: true },\n          action: { type: 'selection', command: 'selectAll' },\n        },\n\n        // Tab navigation\n        { key: 'Tab', action: { type: 'navigation', command: 'moveNext' }, context: 'navigation' },\n        {\n          key: 'Tab',\n          modifiers: { shift: true },\n          action: { type: 'navigation', command: 'movePrev' },\n          context: 'navigation',\n        },\n      ]\n\n      bindings.forEach(binding => {\n        const key = createKeySignature(binding.key, binding.modifiers)\n        config.customKeyBindings.set(key, binding)\n      })\n    }\n\n    function createKeySignature(key: string, modifiers?: KeyBinding['modifiers']): string {\n      const parts: string[] = []\n\n      if (modifiers?.ctrl) parts.push('Ctrl')\n      if (modifiers?.shift) parts.push('Shift')\n      if (modifiers?.alt) parts.push('Alt')\n      if (modifiers?.meta) parts.push('Meta')\n\n      parts.push(key)\n\n      return parts.join('+')\n    }\n\n    function shouldExecuteBinding(binding: KeyBinding): boolean {\n      if (!binding.context) return true\n\n      const isEditing = originalApi.isEditingCell && originalApi.isEditingCell()\n\n      switch (binding.context) {\n        case 'always':\n          return true\n        case 'editing':\n          return isEditing\n        case 'navigation':\n          return !isEditing\n        default:\n          return true\n      }\n    }\n\n    function executeKeyBinding(binding: KeyBinding, event: KeyboardEvent): boolean {\n      const { action } = binding\n\n      try {\n        switch (action.type) {\n          case 'navigation':\n            return executeNavigationAction(action.command, action.parameters)\n          case 'editing':\n            return executeEditingAction(action.command, action.parameters)\n          case 'selection':\n            return executeSelectionAction(action.command, action.parameters)\n          case 'custom':\n            return executeCustomAction(action.command, action.parameters, event)\n          default:\n            logger.warn('Unknown action type:', { module: 'KeyboardNavigation', action: action.type })\n            return false\n        }\n      } catch (error) {\n        logger.error('Error executing key binding:', { module: 'KeyboardNavigation' }, error)\n        return false\n      }\n    }\n\n    function executeNavigationAction(command: string, params?: Record<string, any>): boolean {\n      switch (command) {\n        case 'moveUp':\n          originalApi.moveFocus('up', params)\n          return true\n        case 'moveDown':\n          originalApi.moveFocus('down', params)\n          return true\n        case 'moveLeft':\n          originalApi.moveFocus('left', params)\n          return true\n        case 'moveRight':\n          originalApi.moveFocus('right', params)\n          return true\n        case 'moveHome':\n          originalApi.moveFocus('home', params)\n          return true\n        case 'moveEnd':\n          originalApi.moveFocus('end', params)\n          return true\n        case 'pageUp':\n          originalApi.moveFocus('pageUp', params)\n          return true\n        case 'pageDown':\n          originalApi.moveFocus('pageDown', params)\n          return true\n        case 'moveFirstCell':\n          originalApi.moveFocus('firstRow', params)\n          return true\n        case 'moveLastCell':\n          originalApi.moveFocus('lastRow', params)\n          return true\n        case 'moveFirstRow':\n          originalApi.moveFocus('firstRow', params)\n          return true\n        case 'moveLastRow':\n          originalApi.moveFocus('lastRow', params)\n          return true\n        case 'moveNext':\n          return moveToNextCell(1)\n        case 'movePrev':\n          return moveToNextCell(-1)\n        default:\n          logger.warn('Unknown navigation command:', { module: 'KeyboardNavigation', command })\n          return false\n      }\n    }\n\n    function executeEditingAction(command: string, _params?: Record<string, any>): boolean {\n      switch (command) {\n        case 'startEdit':\n          return originalApi.enterEditMode()\n        case 'commitEdit':\n          return originalApi.exitEditMode(true)\n        case 'cancelEdit':\n          return originalApi.exitEditMode(false)\n        case 'commitAndMoveNext':\n          if (originalApi.exitEditMode(true)) {\n            return moveToNextCell(1)\n          }\n          return false\n        case 'commitAndMovePrev':\n          if (originalApi.exitEditMode(true)) {\n            return moveToNextCell(-1)\n          }\n          return false\n        default:\n          logger.warn('Unknown editing command:', { module: 'KeyboardNavigation', command })\n          return false\n      }\n    }\n\n    function executeSelectionAction(command: string, params?: Record<string, any>): boolean {\n      switch (command) {\n        case 'toggle':\n          return originalApi.toggleCellSelection()\n        case 'selectAll':\n          if (originalApi.selectAll) {\n            originalApi.selectAll()\n            return true\n          }\n          return false\n        case 'extendUp':\n          originalApi.moveFocus('up', { extend: true, ...params })\n          return true\n        case 'extendDown':\n          originalApi.moveFocus('down', { extend: true, ...params })\n          return true\n        case 'extendLeft':\n          originalApi.moveFocus('left', { extend: true, ...params })\n          return true\n        case 'extendRight':\n          originalApi.moveFocus('right', { extend: true, ...params })\n          return true\n        default:\n          logger.warn('Unknown selection command:', { module: 'KeyboardNavigation', command })\n          return false\n      }\n    }\n\n    function executeCustomAction(\n      command: string,\n      params?: Record<string, any>,\n      event?: KeyboardEvent\n    ): boolean {\n      // Emit custom action event for external handling\n      api.emit('keyboard-custom-action', {\n        action: command,\n        context: {\n          parameters: params,\n          event,\n          activeCell: focusState.activeCell,\n        },\n      })\n      return true\n    }\n\n    function handleBuiltinKeyboardEvent(_event: KeyboardEvent): boolean {\n      // Handle events not covered by custom bindings\n      // This is a fallback for any missed cases\n      return false\n    }\n\n    function calculateNewPosition(\n      current: CellPosition,\n      direction: NavigationDirection,\n      options: { wrap?: boolean; pageSize?: number } = {}\n    ): CellPosition | null {\n      const { wrap = config.navigationBehavior === 'wrap', pageSize = config.pageSize } = options\n      updateGridDimensions()\n\n      let newRowIndex = current.rowIndex\n      let newColumnIndex = current.columnIndex\n\n      switch (direction) {\n        case 'up':\n          newRowIndex = Math.max(0, current.rowIndex - 1)\n          if (wrap && newRowIndex === current.rowIndex && current.rowIndex === 0) {\n            newRowIndex = gridDimensions.rowCount - 1\n          }\n          break\n\n        case 'down':\n          newRowIndex = Math.min(gridDimensions.rowCount - 1, current.rowIndex + 1)\n          if (\n            wrap &&\n            newRowIndex === current.rowIndex &&\n            current.rowIndex === gridDimensions.rowCount - 1\n          ) {\n            newRowIndex = 0\n          }\n          break\n\n        case 'left':\n          newColumnIndex = Math.max(0, current.columnIndex - 1)\n          if (wrap && newColumnIndex === current.columnIndex && current.columnIndex === 0) {\n            newColumnIndex = gridDimensions.columnCount - 1\n          }\n          break\n\n        case 'right':\n          newColumnIndex = Math.min(gridDimensions.columnCount - 1, current.columnIndex + 1)\n          if (\n            wrap &&\n            newColumnIndex === current.columnIndex &&\n            current.columnIndex === gridDimensions.columnCount - 1\n          ) {\n            newColumnIndex = 0\n          }\n          break\n\n        case 'home':\n          newColumnIndex = 0\n          break\n\n        case 'end':\n          newColumnIndex = gridDimensions.columnCount - 1\n          break\n\n        case 'pageUp':\n          newRowIndex = Math.max(0, current.rowIndex - pageSize)\n          break\n\n        case 'pageDown':\n          newRowIndex = Math.min(gridDimensions.rowCount - 1, current.rowIndex + pageSize)\n          break\n\n        case 'firstRow':\n          newRowIndex = 0\n          newColumnIndex = 0\n          break\n\n        case 'lastRow':\n          newRowIndex = gridDimensions.rowCount - 1\n          newColumnIndex = gridDimensions.columnCount - 1\n          break\n\n        case 'firstColumn':\n          newColumnIndex = 0\n          break\n\n        case 'lastColumn':\n          newColumnIndex = gridDimensions.columnCount - 1\n          break\n\n        default:\n          return null\n      }\n\n      // Don't move if position didn't change (unless wrapping)\n      if (newRowIndex === current.rowIndex && newColumnIndex === current.columnIndex && !wrap) {\n        return null\n      }\n\n      return createCellPosition(newRowIndex, newColumnIndex)\n    }\n\n    function createCellPosition(rowIndex: number, columnIndex: number): CellPosition | null {\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      if (\n        rowIndex < 0 ||\n        rowIndex >= data.length ||\n        columnIndex < 0 ||\n        columnIndex >= columns.length\n      ) {\n        return null\n      }\n\n      const row = data[rowIndex]\n      const column = columns[columnIndex]\n\n      if (!row || !column) {\n        return null\n      }\n\n      return {\n        rowIndex,\n        columnIndex,\n        rowId: row.id || rowIndex,\n        columnId: column.id,\n      }\n    }\n\n    function getFirstCell(): CellPosition | null {\n      return createCellPosition(0, 0)\n    }\n\n    function isValidCellPosition(position: CellPosition): boolean {\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      return (\n        position.rowIndex >= 0 &&\n        position.rowIndex < data.length &&\n        position.columnIndex >= 0 &&\n        position.columnIndex < columns.length\n      )\n    }\n\n    function updateGridDimensions() {\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      gridDimensions = {\n        rowCount: data.length,\n        columnCount: columns.length,\n        visibleRowStart: 0,\n        visibleRowEnd: data.length - 1,\n        visibleColumnStart: 0,\n        visibleColumnEnd: columns.length - 1,\n      }\n    }\n\n    function updateDOMFocus(position: CellPosition | null) {\n      // Clear previous focus styling\n      if (activeElement) {\n        activeElement.classList.remove('grid-cell-focused')\n        activeElement.removeAttribute('tabindex')\n        activeElement.setAttribute('aria-selected', 'false')\n      }\n\n      if (!position || !gridContainer) {\n        activeElement = null\n        return\n      }\n\n      // Find the DOM element for the new active cell\n      const cellSelector = `[data-row-id=\"${position.rowId}\"][data-column-id=\"${position.columnId}\"]`\n      const cellElement = gridContainer.querySelector(cellSelector) as HTMLElement\n\n      if (cellElement) {\n        // Update visual focus\n        cellElement.classList.add('grid-cell-focused')\n        cellElement.setAttribute('tabindex', '0')\n        cellElement.setAttribute('aria-selected', 'true')\n\n        // Update ARIA attributes for accessibility\n        updateARIAAttributes(cellElement, position)\n\n        activeElement = cellElement\n\n        // Set DOM focus\n        cellElement.focus({ preventScroll: true })\n      }\n    }\n\n    function updateARIAAttributes(element: HTMLElement, position: CellPosition) {\n      // Set ARIA role and properties for accessibility\n      element.setAttribute('role', 'gridcell')\n      element.setAttribute('aria-rowindex', String(position.rowIndex + 1))\n      element.setAttribute('aria-colindex', String(position.columnIndex + 1))\n\n      // Update container ARIA attributes\n      if (gridContainer) {\n        gridContainer.setAttribute(\n          'aria-activedescendant',\n          element.id || `cell-${position.rowId}-${position.columnId}`\n        )\n        gridContainer.setAttribute('aria-rowcount', String(gridDimensions.rowCount))\n        gridContainer.setAttribute('aria-colcount', String(gridDimensions.columnCount))\n      }\n    }\n\n    function ensureCellVisible(position: CellPosition) {\n      if (!gridContainer || !originalApi.__internal?.updateScrollPosition) {\n        return\n      }\n\n      // Calculate if cell is visible and scroll if needed\n      const cellElement = gridContainer.querySelector(\n        `[data-row-id=\"${position.rowId}\"][data-column-id=\"${position.columnId}\"]`\n      ) as HTMLElement\n\n      if (cellElement) {\n        cellElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest',\n          inline: 'nearest',\n        })\n      }\n    }\n\n    function setupKeyboardContainer(container: HTMLElement) {\n      // Configure container for keyboard navigation\n      container.setAttribute('role', 'grid')\n      container.setAttribute('tabindex', '0')\n      container.setAttribute('aria-label', 'Data grid with keyboard navigation')\n      container.setAttribute('aria-multiselectable', 'true')\n\n      // Add CSS class for styling\n      container.classList.add('keyboard-navigation-enabled')\n    }\n\n    function moveToNextCell(direction: 1 | -1): boolean {\n      if (!focusState.activeCell) return false\n\n      const columns = api.getState().columns\n      let newRowIndex = focusState.activeCell.rowIndex\n      let newColumnIndex = focusState.activeCell.columnIndex\n\n      if (direction === 1) {\n        newColumnIndex++\n        if (newColumnIndex >= columns.length) {\n          newColumnIndex = 0\n          newRowIndex++\n        }\n      } else {\n        newColumnIndex--\n        if (newColumnIndex < 0) {\n          newColumnIndex = columns.length - 1\n          newRowIndex--\n        }\n      }\n\n      const newPosition = createCellPosition(newRowIndex, newColumnIndex)\n      if (newPosition) {\n        originalApi.setActiveCell(newPosition, { reason: 'navigation' })\n        return true\n      }\n\n      return false\n    }\n\n    function handleSelectionExtension(startPosition: CellPosition, endPosition: CellPosition) {\n      if (!originalApi.selectRange) return\n\n      originalApi.selectRange(startPosition.rowId, endPosition.rowId)\n    }\n\n    function isInputElement(element: HTMLElement): boolean {\n      const tagName = element.tagName.toLowerCase()\n      return tagName === 'input' || tagName === 'textarea' || tagName === 'select'\n    }\n\n    function isGridEditor(element: HTMLElement): boolean {\n      return (\n        element.classList.contains('grid-cell-editor') ||\n        element.closest('.grid-cell-editor') !== null\n      )\n    }\n\n    function registerEventListener(event: string, cleanup: () => void) {\n      if (!eventListeners.has(event)) {\n        eventListeners.set(event, [])\n      }\n      eventListeners.get(event)!.push(cleanup)\n    }\n\n    // === EVENT INTEGRATION ===\n    // Listen for interaction contract events\n    if (originalApi.on) {\n      originalApi.on('cell-click', (payload: InteractionPayload) => {\n        if (payload.position) {\n          originalApi.setActiveCell(payload.position, { reason: 'user' })\n        }\n      })\n\n      originalApi.on('cell-focus', (payload: InteractionPayload) => {\n        if (payload.position) {\n          originalApi.setActiveCell(payload.position, { reason: 'user' })\n        }\n      })\n\n      // Listen for data changes to update dimensions\n      originalApi.on('data-changed', () => {\n        updateGridDimensions()\n\n        // Validate current focus\n        if (focusState.activeCell && !isValidCellPosition(focusState.activeCell)) {\n          const firstCell = getFirstCell()\n          if (firstCell) {\n            originalApi.setActiveCell(firstCell, { reason: 'programmatic' })\n          }\n        }\n      })\n\n      originalApi.on('columns-changed', () => {\n        updateGridDimensions()\n      })\n    }\n\n    logger.info('Comprehensive keyboard navigation installed')\n  },\n\n  cleanup() {\n    // Clean up event listeners\n    const logger = createLogger({ module: 'Plugin', operation: 'KeyboardNavigation' })\n    logger.info('Cleaned up')\n  },\n}\n"],"mappings":"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"}