{"version":3,"file":"selection-plugin-CoUp6zlZ.js","names":["selectionPlugin: GridPlugin","selectionState: SelectionState"],"sources":["../src/plugins/core/selection-plugin.ts"],"sourcesContent":["/**\n * Selection Plugin - Core functionality\n *\n * Provides enhanced selection capabilities including multi-select,\n * range selection, and selection persistence.\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../index'\nimport type { GridAPI, RowData } from '../../types'\nimport { createLogger } from '../../utils/logger'\n\ninterface SelectionState {\n  selectedRows: Set<string | number>\n  lastSelectedRow: string | number | null\n  selectionMode: 'single' | 'multi' | 'range'\n  persistSelection: boolean\n}\n\nexport const selectionPlugin: GridPlugin = {\n  name: 'core-selection',\n  version: '1.0.0',\n  dependencies: [], // No special capabilities needed\n\n  install(api: GridAPI, _get: CapabilityGetter) {\n    const logger = createLogger({ module: 'Plugin', operation: 'SelectionPlugin' })\n    // Internal selection state\n    const selectionState: SelectionState = {\n      selectedRows: new Set(),\n      lastSelectedRow: null,\n      selectionMode: 'multi',\n      persistSelection: false,\n    }\n\n    // Extend GridAPI with enhanced selection methods\n    const originalApi = api as any\n\n    originalApi.setSelectionMode = (mode: 'single' | 'multi' | 'range') => {\n      selectionState.selectionMode = mode\n\n      // Clear selection if switching to single mode with multiple selected\n      if (mode === 'single' && selectionState.selectedRows.size > 1) {\n        const firstSelected = Array.from(selectionState.selectedRows)[0]\n        selectionState.selectedRows.clear()\n        if (firstSelected) {\n          selectionState.selectedRows.add(firstSelected)\n        }\n      }\n\n      api.emit('selection-mode-change', { mode })\n    }\n\n    originalApi.getSelectionMode = () => selectionState.selectionMode\n\n    originalApi.selectRow = (rowId: string | number, addToSelection = false) => {\n      const { selectionMode } = selectionState\n\n      if (selectionMode === 'single' || !addToSelection) {\n        selectionState.selectedRows.clear()\n      }\n\n      selectionState.selectedRows.add(rowId)\n      selectionState.lastSelectedRow = rowId\n\n      // Emit selection change\n      api.emit('row-select', {\n        rowId,\n        selected: true,\n        selectedRows: Array.from(selectionState.selectedRows),\n      })\n    }\n\n    originalApi.deselectRow = (rowId: string | number) => {\n      const wasSelected = selectionState.selectedRows.has(rowId)\n      selectionState.selectedRows.delete(rowId)\n\n      if (selectionState.lastSelectedRow === rowId) {\n        selectionState.lastSelectedRow = null\n      }\n\n      if (wasSelected) {\n        api.emit('row-select', {\n          rowId,\n          selected: false,\n          selectedRows: Array.from(selectionState.selectedRows),\n        })\n      }\n    }\n\n    originalApi.toggleRowSelection = (rowId: string | number, addToSelection = false) => {\n      if (selectionState.selectedRows.has(rowId)) {\n        originalApi.deselectRow(rowId)\n      } else {\n        originalApi.selectRow(rowId, addToSelection)\n      }\n    }\n\n    originalApi.selectRange = (startRowId: string | number, endRowId: string | number) => {\n      if (selectionState.selectionMode === 'single') {\n        originalApi.selectRow(endRowId)\n        return\n      }\n\n      const data = api.getData()\n      const startIndex = data.findIndex(row => (row.id || row.index) === startRowId)\n      const endIndex = data.findIndex(row => (row.id || row.index) === endRowId)\n\n      if (startIndex === -1 || endIndex === -1) return\n\n      const [minIndex, maxIndex] = [Math.min(startIndex, endIndex), Math.max(startIndex, endIndex)]\n\n      // Clear previous selection unless in range mode\n      if (selectionState.selectionMode !== 'range') {\n        selectionState.selectedRows.clear()\n      }\n\n      // Select range\n      for (let i = minIndex; i <= maxIndex; i++) {\n        const row = data[i]\n        if (row) {\n          const rowId = row.id || i\n          selectionState.selectedRows.add(rowId)\n        }\n      }\n\n      selectionState.lastSelectedRow = endRowId\n\n      api.emit('range-select', {\n        start: minIndex,\n        end: maxIndex,\n      })\n    }\n\n    originalApi.selectAll = () => {\n      if (selectionState.selectionMode === 'single') return\n\n      const data = api.getFilteredData() // Use filtered data for select all\n      selectionState.selectedRows.clear()\n\n      data.forEach(row => {\n        const rowId = row.id || row.index\n        if (rowId !== undefined && (typeof rowId === 'string' || typeof rowId === 'number')) {\n          selectionState.selectedRows.add(rowId)\n        }\n      })\n\n      api.emit('select-all', {\n        count: selectionState.selectedRows.size,\n      })\n    }\n\n    originalApi.clearSelection = () => {\n      const hadSelection = selectionState.selectedRows.size > 0\n      selectionState.selectedRows.clear()\n      selectionState.lastSelectedRow = null\n\n      if (hadSelection) {\n        api.emit('selection-clear', {\n          previousCount: selectionState.selectedRows.size,\n        })\n      }\n    }\n\n    originalApi.getSelectedRows = () => {\n      return Array.from(selectionState.selectedRows)\n    }\n\n    originalApi.getSelectedRowData = (): RowData[] => {\n      const data = api.getData()\n      const selectedIds = Array.from(selectionState.selectedRows)\n\n      return data.filter(row => {\n        const rowId = row.id || row.index\n        return rowId !== undefined && selectedIds.includes(rowId as string | number)\n      })\n    }\n\n    originalApi.isRowSelected = (rowId: string | number) => {\n      return selectionState.selectedRows.has(rowId)\n    }\n\n    originalApi.getSelectionCount = () => {\n      return selectionState.selectedRows.size\n    }\n\n    originalApi.selectByIndex = (index: number, addToSelection = false) => {\n      const data = api.getData()\n      if (index >= 0 && index < data.length) {\n        const row = data[index]\n        if (row) {\n          const rowId = row.id || index\n          originalApi.selectRow(rowId, addToSelection)\n        }\n      }\n    }\n\n    originalApi.selectByCondition = (predicate: (row: RowData) => boolean) => {\n      if (selectionState.selectionMode === 'single') return\n\n      const data = api.getFilteredData()\n      selectionState.selectedRows.clear()\n\n      data.forEach(row => {\n        if (predicate(row)) {\n          const rowId = row.id || row.index\n          if (rowId !== undefined && (typeof rowId === 'string' || typeof rowId === 'number')) {\n            selectionState.selectedRows.add(rowId)\n          }\n        }\n      })\n\n      api.emit('conditional-select', {\n        condition: 'custom-predicate',\n        count: selectionState.selectedRows.size,\n      })\n    }\n\n    // Selection persistence\n    originalApi.setSelectionPersistence = (persist: boolean) => {\n      selectionState.persistSelection = persist\n    }\n\n    originalApi.getSelectionPersistence = () => selectionState.persistSelection\n\n    originalApi.saveSelectionState = () => {\n      return {\n        selectedRows: Array.from(selectionState.selectedRows),\n        lastSelectedRow: selectionState.lastSelectedRow,\n        selectionMode: selectionState.selectionMode,\n      }\n    }\n\n    originalApi.restoreSelectionState = (state: any) => {\n      if (state.selectedRows) {\n        selectionState.selectedRows = new Set(state.selectedRows)\n      }\n      if (state.lastSelectedRow !== undefined) {\n        selectionState.lastSelectedRow = state.lastSelectedRow\n      }\n      if (state.selectionMode) {\n        selectionState.selectionMode = state.selectionMode\n      }\n\n      api.emit('selection-restore', {\n        count: selectionState.selectedRows.size,\n      })\n    }\n\n    // Handle keyboard selection (Shift+Click, Ctrl+Click)\n    originalApi.handleSelectionInput = (\n      rowId: string | number,\n      event: { shiftKey?: boolean; ctrlKey?: boolean; metaKey?: boolean }\n    ) => {\n      const { shiftKey, ctrlKey, metaKey } = event\n      const isMultiSelect = ctrlKey || metaKey\n\n      if (shiftKey && selectionState.lastSelectedRow) {\n        // Range selection\n        originalApi.selectRange(selectionState.lastSelectedRow, rowId)\n      } else if (isMultiSelect) {\n        // Add to selection\n        originalApi.toggleRowSelection(rowId, true)\n      } else {\n        // Single selection\n        originalApi.selectRow(rowId, false)\n      }\n    }\n\n    // Note: Data change handling for selection persistence could be implemented\n    // when data-changed events become available in the current architecture\n\n    // Register for data changes\n    api.emit('data-listener-add', 'selection-data-change-handler')\n\n    logger.info('Enhanced selection functionality installed')\n  },\n\n  cleanup() {\n    const logger = createLogger({ module: 'Plugin', operation: 'SelectionPlugin' })\n    logger.info('Cleaned up')\n  },\n}\n"],"mappings":"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"}