{"version":3,"file":"filtering-plugin-A3EMZfyC.js","names":["filteringPlugin: GridPlugin","activeFilters: ExtendedFilterConfig[]","worker: Worker | null","lastSignature: string","lastFilteredData: any[] | null","inflightId: string | null","offConfigChanged: (() => void) | null","filteringInterceptor: DataInterceptor","extendedFilter: ExtendedFilterConfig","quickFilter: ExtendedFilterConfig"],"sources":["../src/plugins/core/filter-parsers.ts","../src/plugins/core/filter-ops.ts","../src/plugins/core/filtering-plugin.ts"],"sourcesContent":["// Shared parsing helpers for filter predicates across inline and worker paths.\n\nexport function toLower(v: any): string {\n  return String(v ?? '').toLowerCase()\n}\n\nexport function parseNumber(v: any): number | null {\n  if (typeof v === 'number' && Number.isFinite(v)) return v\n  if (typeof v === 'string' && v.trim() !== '') {\n    const nv = Number(v)\n    return Number.isFinite(nv) ? nv : null\n  }\n  return null\n}\n\nexport function parseDateTime(v: any): number | null {\n  if (v instanceof Date) return v.getTime()\n  if (typeof v === 'number' && Number.isFinite(v)) return v\n  if (typeof v === 'string' && v.trim() !== '') {\n    const t = Date.parse(v)\n    return Number.isFinite(t) ? t : null\n  }\n  return null\n}\n\nexport function parseClockTime(v: any): number | null {\n  if (typeof v !== 'string') return null\n  const s = v.trim()\n  const m = s.match(/^(\\d{1,2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{1,3}))?)?(?:\\s*(AM|PM))?$/i)\n  if (!m) return null\n  let hh = parseInt(m[1]!, 10)\n  const mm = parseInt(m[2]!, 10)\n  const ss = m[3] ? parseInt(m[3], 10) : 0\n  if (mm >= 60 || ss >= 60) return null\n  const mer = m[5]\n  if (mer) {\n    const upper = mer.toUpperCase()\n    if (upper === 'PM' && hh < 12) hh += 12\n    if (upper === 'AM' && hh === 12) hh = 0\n  }\n  if (hh >= 24) return null\n  return hh * 3600 + mm * 60 + ss\n}\n\nexport function parseDuration(v: any): number | null {\n  if (typeof v === 'number' && Number.isFinite(v)) return v\n  if (typeof v !== 'string') return null\n  const s = v.trim()\n  if (!s) return null\n  const iso = s.match(/^P(?=\\d|T)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$/i)\n  if (iso) {\n    let ms = 0\n    const year = iso[1] ? parseInt(iso[1], 10) : 0\n    const month = iso[2] ? parseInt(iso[2], 10) : 0\n    const week = iso[3] ? parseInt(iso[3], 10) : 0\n    const day = iso[4] ? parseInt(iso[4], 10) : 0\n    const hour = iso[6] ? parseInt(iso[6], 10) : 0\n    const minute = iso[7] ? parseInt(iso[7], 10) : 0\n    const second = iso[8] ? parseInt(iso[8], 10) : 0\n    ms += year * 365 * 24 * 3600 * 1000\n    ms += month * 30 * 24 * 3600 * 1000\n    ms += week * 7 * 24 * 3600 * 1000\n    ms += day * 24 * 3600 * 1000\n    ms += hour * 3600 * 1000\n    ms += minute * 60 * 1000\n    ms += second * 1000\n    return ms\n  }\n  if (/(\\d+\\s+(years?|months?|weeks?|days?|hours?|hrs?|minutes?|mins?|seconds?|secs?))/i.test(s)) {\n    const parts = s.toLowerCase().split(/\\s+/)\n    let ms = 0\n    for (let i = 0; i < parts.length; i++) {\n      const rawValue = parts[i]\n      if (!rawValue) continue\n      const n = parseFloat(rawValue)\n      if (!Number.isFinite(n)) continue\n      const unit = parts[i + 1]\n      if (!unit) continue\n      const normalizedUnit = unit.toLowerCase()\n      if (/^years?/.test(normalizedUnit)) ms += n * 365 * 24 * 3600 * 1000\n      else if (/^months?/.test(normalizedUnit)) ms += n * 30 * 24 * 3600 * 1000\n      else if (/^weeks?/.test(normalizedUnit)) ms += n * 7 * 24 * 3600 * 1000\n      else if (/^days?/.test(normalizedUnit)) ms += n * 24 * 3600 * 1000\n      else if (/^(hours?|hrs?)$/.test(normalizedUnit)) ms += n * 3600 * 1000\n      else if (/^(minutes?|mins?)$/.test(normalizedUnit)) ms += n * 60 * 1000\n      else if (/^(seconds?|secs?)$/.test(normalizedUnit)) ms += n * 1000\n      i += 1\n    }\n    return ms || null\n  }\n  const m = s.match(/^(\\d{1,3}):(\\d{2})(?::(\\d{2}))?$/)\n  if (m) {\n    const hh = parseInt(m[1]!, 10)\n    const mm = parseInt(m[2]!, 10)\n    const ss = m[3] ? parseInt(m[3], 10) : 0\n    if (mm >= 60 || ss >= 60) return null\n    if (hh >= 24) return (hh * 3600 + mm * 60 + ss) * 1000\n  }\n  return null\n}\n\nexport interface TypeAwareEquality {\n  equals(candidate: any): boolean\n  notEquals(candidate: any): boolean\n}\n\nexport function createTypeAwareEquality(value: any): TypeAwareEquality {\n  const durF = parseDuration(value)\n  const ctF = parseClockTime(value)\n  const dtF = parseDateTime(value)\n  const nf = parseNumber(value)\n\n  return {\n    equals(candidate: any) {\n      const durV = parseDuration(candidate)\n      if (durF !== null && durV !== null) return durV === durF\n      const ctV = parseClockTime(candidate)\n      if (ctF !== null && ctV !== null) return ctV === ctF\n      const dtV = parseDateTime(candidate)\n      if (dtF !== null && dtV !== null) return dtV === dtF\n      const nv = parseNumber(candidate)\n      if (nf !== null && nv !== null) return nv === nf\n      return candidate === value\n    },\n    notEquals(candidate: any) {\n      const durV = parseDuration(candidate)\n      if (durF !== null && durV !== null) return durV !== durF\n      const ctV = parseClockTime(candidate)\n      if (ctF !== null && ctV !== null) return ctV !== ctF\n      const dtV = parseDateTime(candidate)\n      if (dtF !== null && dtV !== null) return dtV !== dtF\n      const nv = parseNumber(candidate)\n      if (nf !== null && nv !== null) return nv !== nf\n      return candidate !== value\n    },\n  }\n}\n","import type { FilterConfig, RowData, ColumnDef } from '../../types'\nimport {\n  createTypeAwareEquality,\n  parseClockTime,\n  parseDateTime,\n  parseDuration,\n  parseNumber,\n  toLower,\n} from './filter-parsers'\n\nexport type CompiledPredicate = (row: RowData) => boolean\n\nexport interface CompileContext {\n  columns?: ColumnDef[]\n  locale?: string\n  timezoneOffset?: number // minutes\n}\n\nexport function compilePredicate(rule: FilterConfig): CompiledPredicate {\n  const { field, operator } = rule\n  const value = rule.value as any\n  switch (operator) {\n    // text\n    case 'equals': {\n      const matcher = createTypeAwareEquality(value)\n      return (row: RowData) => matcher.equals(row[field])\n    }\n    case 'notEquals': {\n      const matcher = createTypeAwareEquality(value)\n      return (row: RowData) => matcher.notEquals(row[field])\n    }\n    case 'contains': {\n      const needle = toLower(value)\n      return (row: RowData) => toLower(row[field]).includes(needle)\n    }\n    case 'startsWith': {\n      const needle = toLower(value)\n      return (row: RowData) => toLower(row[field]).startsWith(needle)\n    }\n    case 'endsWith': {\n      const needle = toLower(value)\n      return (row: RowData) => toLower(row[field]).endsWith(needle)\n    }\n    case 'isEmpty': {\n      return (row: RowData) => row[field] === null || row[field] === undefined || String(row[field]) === ''\n    }\n    case 'notEmpty': {\n      return (row: RowData) => !(row[field] === null || row[field] === undefined || String(row[field]) === '')\n    }\n    case 'gt': {\n      const nf = parseNumber(value)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        return nf !== null && nv !== null && nv > nf\n      }\n    }\n    case 'lt': {\n      const nf = parseNumber(value)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        return nf !== null && nv !== null && nv < nf\n      }\n    }\n    case 'gte': {\n      const nf = parseNumber(value)\n      const durF = parseDuration(value)\n      const dtF = parseDateTime(value)\n      const ctF = parseClockTime(value)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        if (nf !== null && nv !== null) return nv >= nf\n        const durV = parseDuration(row[field])\n        if (durF !== null && durV !== null) return durV >= durF\n        const dtV = parseDateTime(row[field])\n        if (dtF !== null && dtV !== null) return dtV >= dtF\n        const ctV = parseClockTime(row[field])\n        return ctF !== null && ctV !== null && ctV >= ctF\n      }\n    }\n    case 'lte': {\n      const nf = parseNumber(value)\n      const durF = parseDuration(value)\n      const dtF = parseDateTime(value)\n      const ctF = parseClockTime(value)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        if (nf !== null && nv !== null) return nv <= nf\n        const durV = parseDuration(row[field])\n        if (durF !== null && durV !== null) return durV <= durF\n        const dtV = parseDateTime(row[field])\n        if (dtF !== null && dtV !== null) return dtV <= dtF\n        const ctV = parseClockTime(row[field])\n        return ctF !== null && ctV !== null && ctV <= ctF\n      }\n    }\n    case 'between': {\n      const arr = Array.isArray(value) ? value : []\n      const [a, b] = (arr as [any, any]) || []\n      const na = parseNumber(a), nb = parseNumber(b)\n      const dura = parseDuration(a), durb = parseDuration(b)\n      const dta = parseDateTime(a), dtb = parseDateTime(b)\n      const cta = parseClockTime(a), ctb = parseClockTime(b)\n      return (row: RowData) => {\n        const nv = parseNumber(row[field])\n        if (nv !== null && na !== null && nb !== null) return nv >= Math.min(na, nb) && nv <= Math.max(na, nb)\n        const durV = parseDuration(row[field])\n        if (durV !== null && dura !== null && durb !== null) return durV >= Math.min(dura, durb) && durV <= Math.max(dura, durb)\n        const dtV = parseDateTime(row[field])\n        if (dtV !== null && dta !== null && dtb !== null) return dtV >= Math.min(dta, dtb) && dtV <= Math.max(dta, dtb)\n        const ctV = parseClockTime(row[field])\n        return ctV !== null && cta !== null && ctb !== null && ctV >= Math.min(cta, ctb) && ctV <= Math.max(cta, ctb)\n      }\n    }\n    case 'in':\n    case 'oneOf': {\n      const list = Array.isArray(value) ? value : [value]\n      return (row: RowData) => list.some(v => v === row[field])\n    }\n    case 'notIn': {\n      const list = Array.isArray(value) ? value : [value]\n      return (row: RowData) => !list.some(v => v === row[field])\n    }\n    default: {\n      return () => true\n    }\n  }\n}\n\nexport function combinePredicates(preds: CompiledPredicate[], join: 'AND' | 'OR' = 'AND'): CompiledPredicate {\n  if (preds.length === 0) return () => true\n  if (join === 'OR') return (row: RowData) => preds.some(predicate => predicate(row))\n  return (row: RowData) => preds.every(predicate => predicate(row))\n}\n\nexport function compileFilterSet(filters: FilterConfig[]): CompiledPredicate {\n  const candidates = filters.filter(f => f.field !== '__global__')\n  if (candidates.length === 0) return () => true\n  const preds = candidates.map(compilePredicate)\n  return combinePredicates(preds, 'AND')\n}\n\nexport function signatureForFilters(filters: FilterConfig[]): string {\n  const serialisable = filters.filter(f => f.field !== '__global__')\n  try { return JSON.stringify(serialisable) } catch { return String(serialisable?.length || 0) }\n}\n","/**\n * Filtering Plugin - Core functionality\n *\n * Provides advanced filtering capability using the enhanced data-pipeline system.\n * Supports multiple filter types and complex filter conditions.\n */\n\nimport type { GridPlugin, CapabilityGetter, DataInterceptor } from '../index'\nimport type { GridAPI, FilterConfig } from '../../types'\nimport { createLogger } from '../../utils/logger'\nimport { compileFilterSet, signatureForFilters } from './filter-ops'\n\ninterface ExtendedFilterConfig extends FilterConfig {\n  id?: string\n  enabled?: boolean\n  metadata?: Record<string, any>\n}\n\nexport const filteringPlugin: GridPlugin = {\n  name: 'core-filtering',\n  version: '1.0.0',\n  dependencies: ['data-pipeline'],\n\n  install(api: GridAPI, get: CapabilityGetter) {\n    const logger = createLogger({ module: 'Plugin', operation: 'FilteringPlugin' })\n    const dataPipeline = get('data-pipeline')\n\n    if (!dataPipeline) {\n      logger.warn('data-pipeline capability not available')\n      return\n    }\n\n    // Internal filtering state\n    let activeFilters: ExtendedFilterConfig[] = []\n    // Worker-first mode\n    const WORKER_THRESHOLD = 10000\n    let worker: Worker | null = null\n    let lastSignature: string = ''\n    let lastFilteredData: any[] | null = null\n    let inflightId: string | null = null\n    let filterIdCounter = 0\n    let offConfigChanged: (() => void) | null = null\n    const jobSignatures = new Map<string, string>()\n\n    // Global search evaluation function\n    const evaluateGlobalFilter = (row: any, searchTerm: string, fields: string[]): boolean => {\n      const needle = String(searchTerm ?? '').toLowerCase()\n      if (!needle) return true\n      return fields.some(field => {\n        const value = String((row as Record<string, unknown>)[field] ?? '').toLowerCase()\n        return value.includes(needle)\n      })\n    }\n\n    // Create filtering interceptor\n    const filteringInterceptor: DataInterceptor = {\n      name: 'core-filtering',\n      type: 'filter',\n      priority: 200, // Priority within 'filter' type; pipeline runs filter before sort\n      enabled: true,\n      transform: data => {\n        if (!activeFilters.length || !data.length) {\n          return data\n        }\n\n        const enabledFilters = activeFilters.filter(f => f.enabled !== false)\n        if (!enabledFilters.length) {\n          return data\n        }\n\n        // Worker-first: if dataset large, return last worker result when available\n        try {\n          const useWorker = (api.getData() || []).length >= WORKER_THRESHOLD\n          const publicFilters = toPublicFilters(enabledFilters)\n          const hasGlobal = publicFilters.some(f => f.field === '__global__')\n          const sig = signatureForFilters(publicFilters.filter(f => f.field !== '__global__'))\n          if (useWorker && !hasGlobal) {\n            if (lastSignature === sig && Array.isArray(lastFilteredData)) {\n              return lastFilteredData\n            }\n            return Array.isArray(lastFilteredData) ? lastFilteredData : data\n          }\n        } catch {}\n\n        // Inline filtering path (small datasets)\n        // Precompile and apply\n        const compiled = compileFilterSet(toPublicFilters(enabledFilters))\n        try {\n          const out = [] as any[]\n          for (let i = 0; i < data.length; i++) {\n            const row = data[i]\n            // global quick filter handling\n            const globals = enabledFilters.filter(f => f.field === '__global__')\n            let ok = true\n            if (globals.length) {\n              for (const g of globals) {\n                const targetFields = g.metadata?.fields || Object.keys(row)\n                if (!evaluateGlobalFilter(row, String(g.value ?? ''), targetFields)) { ok = false; break }\n              }\n            }\n            if (ok && compiled(row)) out.push(row)\n          }\n          return out\n        } catch {\n          return data\n        }\n      },\n      metadata: {\n        description: 'Core filtering functionality with global search support',\n        version: '1.0.0',\n      },\n    }\n\n    // Register filtering data interceptor\n    dataPipeline.registerDataInterceptor('filter', filteringInterceptor)\n\n    // Helper: map internal filters to public FilterConfig[] (only enabled)\n    const toPublicFilters = (filters: ExtendedFilterConfig[]): FilterConfig[] =>\n      filters\n        .filter(f => f.enabled !== false)\n        .map(({ field, operator, value }) => ({ field, operator, value }))\n\n    // Worker scheduling inside closure to access current state\n    const tryScheduleWorker = () => {\n      try {\n        const data = api.getData() || []\n        const filters = toPublicFilters(activeFilters)\n        const hasGlobal = filters.some(f => f.field === '__global__')\n        const workerFilters = filters.filter(f => f.field !== '__global__')\n        const signature = signatureForFilters(workerFilters)\n        if (data.length < WORKER_THRESHOLD || workerFilters.length === 0 || hasGlobal) {\n          lastSignature = workerFilters.length ? signature : ''\n          lastFilteredData = null\n          inflightId = null\n          jobSignatures.clear()\n          return\n        }\n        if (!worker) {\n          worker = createWorker()\n          if (worker) {\n            worker.onmessage = (ev: MessageEvent<any>) => {\n              const msg = ev.data\n              if (!msg) return\n              const jobSignature = jobSignatures.get(msg.id)\n              if (msg.id !== inflightId) {\n                jobSignatures.delete(msg.id)\n                return\n              }\n              if (msg.type === 'result') {\n                lastSignature = jobSignature ?? ''\n                lastFilteredData = msg.data\n                inflightId = null\n                jobSignatures.delete(msg.id)\n                // Ask pipeline to re-run synchronously using cached result\n                api.emit('data-refresh-requested', { source: 'filter-worker' } as any)\n                logger.info(`Worker filtered ${msg.data?.length ?? 0} rows in ${msg.duration}ms`)\n              } else if (msg.type === 'progress') {\n                try {\n                  api.emit('filter-progress', {\n                    processed: Number.isFinite(msg.processed) ? msg.processed : 0,\n                    total: Number.isFinite(msg.total) ? msg.total : 0,\n                  })\n                } catch {}\n              } else if (msg.type === 'error') {\n                jobSignatures.delete(msg.id)\n                inflightId = null\n                lastFilteredData = null\n                logger.warn('Filter worker error:', msg.message)\n              }\n            }\n          }\n        }\n        if (!worker) return\n        if (inflightId) {\n          jobSignatures.delete(inflightId)\n        }\n        inflightId = `fw-${Date.now()}-${Math.random().toString(36).slice(2, 7)}`\n        jobSignatures.set(inflightId, signature)\n        const payload = { id: inflightId, data, filters: workerFilters }\n        worker.postMessage(payload)\n      } catch (e) {\n        logger.warn('Failed to schedule worker:', e)\n      }\n    }\n\n    // Extend GridAPI with filtering methods\n    const originalApi = api as any\n\n    originalApi.addFilter = (filter: FilterConfig) => {\n      // Enforce column filterability (except global quick filter)\n      if (filter.field !== '__global__') {\n        const cols = api.getState().columns || []\n        const target = cols.find((c: any) => c.field === filter.field)\n        if (target && target.filterable === false) {\n          logger.warn(`Column '${filter.field}' is not filterable`)\n          return null\n        }\n      }\n      const extendedFilter: ExtendedFilterConfig = {\n        ...filter,\n        id: `${filter.field}_${Date.now()}_${++filterIdCounter}`,\n        enabled: true,\n      }\n\n      activeFilters.push(extendedFilter)\n\n      // Update grid configuration (public shape)\n      api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n      // Emit filter change event (public shape)\n      api.emit('filter-change', toPublicFilters(activeFilters))\n\n      tryScheduleWorker()\n      return extendedFilter.id\n    }\n\n    originalApi.removeFilter = (filterId: string) => {\n      const index = activeFilters.findIndex(f => f.id === filterId)\n      if (index !== -1) {\n        activeFilters.splice(index, 1)\n\n        // Update grid configuration\n        api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n        // Emit filter change event\n        api.emit('filter-change', toPublicFilters(activeFilters))\n\n        tryScheduleWorker()\n        return true\n      }\n      return false\n    }\n\n    originalApi.updateFilter = (filterId: string, updates: Partial<ExtendedFilterConfig>) => {\n      const filter = activeFilters.find(f => f.id === filterId)\n      if (filter) {\n        Object.assign(filter, updates)\n\n        // Update grid configuration\n        api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n        // Emit filter change event\n        api.emit('filter-change', toPublicFilters(activeFilters))\n\n        tryScheduleWorker()\n        return true\n      }\n      return false\n    }\n\n    originalApi.clearFilters = () => {\n      activeFilters = []\n\n      // Update grid configuration\n      api.updateConfig({ filters: [] })\n\n      // Emit filter change event\n      api.emit('filter-change', [])\n\n      tryScheduleWorker()\n    }\n\n    originalApi.getActiveFilters = () => [...activeFilters]\n\n    originalApi.toggleFilter = (filterId: string) => {\n      const filter = activeFilters.find(f => f.id === filterId)\n      if (filter) {\n        filter.enabled = !filter.enabled\n\n        // Update grid configuration\n        api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n        // Emit filter change event\n        api.emit('filter-change', toPublicFilters(activeFilters))\n\n        tryScheduleWorker()\n        return filter.enabled\n      }\n      return false\n    }\n\n    // Quick filter methods for common use cases\n    originalApi.quickFilter = (searchTerm: string, fields?: string[]) => {\n      // Clear existing quick filters\n      activeFilters = activeFilters.filter(f => !f.id?.startsWith('quickfilter_'))\n\n      if (searchTerm.trim()) {\n        // Derive fields from columns (respect filterable)\n        const cols = api.getState().columns || []\n        let targetFields =\n          fields && fields.length > 0\n            ? fields\n            : cols\n                .filter((c: any) => c.filterable !== false)\n                .map((c: any) => c.field)\n\n        // Fallback: if no columns available, use keys from first row\n        if ((!targetFields || targetFields.length === 0)) {\n          const data = api.getData()\n          if (Array.isArray(data) && data.length > 0) {\n            targetFields = Object.keys(data[0] || {})\n          }\n        }\n\n        // Create a global search filter\n        const quickFilter: ExtendedFilterConfig = {\n          field: '__global__',\n          operator: 'contains',\n          value: searchTerm,\n          id: 'quickfilter_global',\n          enabled: true,\n          metadata: {\n            fields: targetFields,\n            isGlobalSearch: true,\n          },\n        }\n\n        activeFilters.push(quickFilter)\n      }\n\n      // Update grid configuration\n      api.updateConfig({ filters: toPublicFilters(activeFilters) })\n\n      // Emit filter change event\n      api.emit('filter-change', toPublicFilters(activeFilters))\n\n      tryScheduleWorker()\n    }\n\n    // Sync with external filter config updates\n    const handleConfigUpdate = (newConfig: import('../../types').GridConfig) => {\n      const incoming = Array.isArray(newConfig.filters) ? (newConfig.filters as FilterConfig[]) : []\n      const currentPublic = toPublicFilters(activeFilters)\n      if (JSON.stringify(incoming) === JSON.stringify(currentPublic)) {\n        tryScheduleWorker()\n        return\n      }\n\n      activeFilters = incoming.map(f => ({ ...f, id: `${f.field}_${Date.now()}_${++filterIdCounter}`, enabled: true }))\n      api.emit('filter-change', toPublicFilters(activeFilters))\n\n      // Worker-first filtering for large datasets\n      tryScheduleWorker()\n    }\n    if (typeof api.on === 'function') {\n      offConfigChanged = api.on('config-changed', handleConfigUpdate)\n      // Re-run worker on data changes too\n      api.on('data-changed', () => tryScheduleWorker())\n      api.on('filter-cancel' as any, () => {\n        try { if (worker) worker.terminate() } catch {}\n        worker = null\n        inflightId = null\n        lastFilteredData = null\n        jobSignatures.clear()\n        logger.info('Filter worker canceled by user')\n      })\n    }\n\n    // Store cleanup function\n    originalApi._filteringPluginCleanup = () => {\n      dataPipeline.removeDataInterceptor('filter', 'core-filtering')\n      if (offConfigChanged) {\n        try { offConfigChanged() } catch {}\n        offConfigChanged = null\n      }\n    }\n\n    logger.info('Core filtering functionality installed with enhanced data pipeline')\n  },\n\n  cleanup() {\n    const logger = createLogger({ module: 'Plugin', operation: 'FilteringPlugin' })\n    logger.info('Cleaned up')\n  },\n}\n\n// Worker scheduling (module-local)\nfunction createWorker(): Worker | null {\n  try {\n    return new Worker(new URL('../utils/filter-worker.ts', import.meta.url), { type: 'module' })\n  } catch {\n    return null\n  }\n}\n"],"mappings":"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"}