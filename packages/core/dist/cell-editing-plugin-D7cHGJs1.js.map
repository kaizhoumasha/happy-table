{"version":3,"file":"cell-editing-plugin-D7cHGJs1.js","names":["cellEditingPlugin: GridPlugin","editState: CellEditState"],"sources":["../src/plugins/core/cell-editing-plugin.ts"],"sourcesContent":["/**\n * Cell Editing Plugin - Core functionality\n *\n * Provides comprehensive cell editing capabilities including:\n * - Mode switching between display and edit modes\n * - Dynamic editor injection based on column configuration\n * - Data synchronization through GridAPI\n * - Event handling for keyboard and mouse interactions\n * - Input validation before data updates\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../index'\nimport type { GridAPI, RowData, ColumnDef, CellValue, CellEditorConfig, CellValidator } from '../../types'\nimport { createLogger } from '../../utils/logger'\n\ninterface CellEditState {\n  activeCell: { rowId: string | number; columnId: string } | null\n  editMode: boolean\n  editValue: CellValue\n  originalValue: CellValue\n  validators: Map<string, CellValidator>\n  editors: Map<string, CellEditorConfig>\n  errorState: { message: string; columnId: string } | null\n}\n\ninterface ValidationResult {\n  valid: boolean\n  message?: string\n}\n\ninterface CellEditPayload {\n  rowId: string | number\n  columnId: string\n  value: CellValue\n  oldValue: CellValue\n  row: RowData\n  column: ColumnDef\n}\n\nconst logger = createLogger({ module: 'Plugin', operation: 'CellEditing' })\n\nexport const cellEditingPlugin: GridPlugin = {\n  name: 'core-cell-editing',\n  version: '1.0.0',\n  dependencies: [], // No special capabilities needed\n\n  install(api: GridAPI, _get: CapabilityGetter) {\n\n    // Internal editing state\n    const editState: CellEditState = {\n      activeCell: null,\n      editMode: false,\n      editValue: null,\n      originalValue: null,\n      validators: new Map(),\n      editors: new Map(),\n      errorState: null,\n    }\n\n    // Register built-in editors\n    setupBuiltinEditors()\n\n    // Extend GridAPI with cell editing methods\n    const originalApi = api as GridAPI & Record<string, unknown>\n\n    // Editor registration methods\n    originalApi.registerCellEditor = (type: string, config: CellEditorConfig) => {\n      editState.editors.set(type, config)\n      logger.info(`Registered editor: ${type}`)\n    }\n\n    originalApi.unregisterCellEditor = (type: string) => {\n      editState.editors.delete(type)\n      logger.info(`Unregistered editor: ${type}`)\n    }\n\n    originalApi.getCellEditor = (type: string): CellEditorConfig | undefined => {\n      return editState.editors.get(type)\n    }\n\n    originalApi.listCellEditors = (): string[] => {\n      return Array.from(editState.editors.keys())\n    }\n\n    // Validator registration methods\n    originalApi.registerCellValidator = (columnId: string, validator: CellValidator) => {\n      editState.validators.set(columnId, validator)\n    }\n\n    originalApi.unregisterCellValidator = (columnId: string) => {\n      editState.validators.delete(columnId)\n    }\n\n    // Cell editing control methods\n    originalApi.startCellEdit = (rowId: string | number, columnId: string): boolean => {\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      const row = data.find(r => (r.id || r.index) === rowId)\n      const column = columns.find((c: ColumnDef) => c.id === columnId)\n\n      if (!row || !column) {\n        logger.warn(`Invalid cell position: ${rowId}, ${columnId}`)\n        return false\n      }\n\n      // Check if column is editable\n      if (column.editable === false) {\n        logger.warn(`Column ${columnId} is not editable`)\n        return false\n      }\n\n      // Check if already editing this cell\n      if (\n        editState.activeCell?.rowId === rowId &&\n        editState.activeCell?.columnId === columnId &&\n        editState.editMode\n      ) {\n        return true\n      }\n\n      // Cancel current edit if editing another cell\n      if (editState.editMode && editState.activeCell) {\n        originalApi.cancelCellEdit?.()\n      }\n\n      // Start editing\n      const value = row[column.field]\n      editState.activeCell = { rowId, columnId }\n      editState.editMode = true\n      editState.editValue = value\n      editState.originalValue = value\n      editState.errorState = null\n\n      // Emit edit start event\n      api.emit('cell-edit-start', {\n        rowId,\n        columnId,\n        value,\n        row,\n        column,\n      } as CellEditPayload)\n\n      return true\n    }\n\n    originalApi.commitCellEdit = async (): Promise<boolean> => {\n      if (!editState.editMode || !editState.activeCell) {\n        return false\n      }\n\n      const { rowId, columnId } = editState.activeCell\n      const data = api.getData()\n      const columns = api.getState().columns\n\n      const row = data.find(r => (r.id || r.index) === rowId)\n      const column = columns.find((c: ColumnDef) => c.id === columnId)\n\n      if (!row || !column) {\n        return false\n      }\n\n      // Validate the new value\n      const validationResult = await validateCellValue(editState.editValue, row, column)\n      if (!validationResult.valid) {\n        editState.errorState = {\n          message: validationResult.message || 'Invalid value',\n          columnId,\n        }\n\n        api.emit('cell-edit-error', {\n          rowId,\n          columnId,\n          error: validationResult.message || 'Validation failed',\n        })\n\n        return false\n      }\n\n      // Update the data\n      const oldValue = editState.originalValue\n      const newValue = editState.editValue\n\n      // Use the edit value directly (parsing can be handled by editor component)\n      const finalValue = newValue\n\n      // Update row data\n      row[column.field] = finalValue\n\n      // Update grid data\n      api.setData([...data])\n\n      // Clear edit state\n      editState.activeCell = null\n      editState.editMode = false\n      editState.editValue = null\n      editState.originalValue = null\n      editState.errorState = null\n\n      // Emit edit complete event\n      api.emit('cell-edit-complete', {\n        rowId,\n        columnId,\n        oldValue,\n        newValue: finalValue,\n      })\n\n      return true\n    }\n\n    originalApi.cancelCellEdit = () => {\n      if (!editState.editMode || !editState.activeCell) {\n        return\n      }\n\n      const { rowId, columnId } = editState.activeCell\n\n      // Emit edit cancel event\n      api.emit('cell-edit-cancel', {\n        rowId,\n        columnId,\n        value: editState.originalValue,\n      })\n\n      // Clear edit state\n      editState.activeCell = null\n      editState.editMode = false\n      editState.editValue = null\n      editState.originalValue = null\n      editState.errorState = null\n    }\n\n    originalApi.updateCellEditValue = (value: any) => {\n      if (editState.editMode) {\n        editState.editValue = value\n        editState.errorState = null // Clear error when value changes\n      }\n    }\n\n    // State access methods\n    originalApi.isEditingCell = (rowId?: string | number, columnId?: string): boolean => {\n      if (!editState.editMode || !editState.activeCell) {\n        return false\n      }\n\n      if (rowId !== undefined && columnId !== undefined) {\n        return editState.activeCell.rowId === rowId && editState.activeCell.columnId === columnId\n      }\n\n      return true\n    }\n\n    originalApi.getEditingCell = () => {\n      return editState.editMode ? editState.activeCell : null\n    }\n\n    originalApi.getEditValue = () => {\n      return editState.editMode ? editState.editValue : null\n    }\n\n    originalApi.getCellEditError = () => {\n      return editState.errorState ? editState.errorState.message : null\n    }\n\n    // Keyboard interaction handling\n    originalApi.handleCellEditKeydown = (event: KeyboardEvent): boolean => {\n      if (!editState.editMode) {\n        return false\n      }\n\n      switch (event.key) {\n        case 'Enter':\n          if (!event.shiftKey) {\n            event.preventDefault()\n            originalApi.commitCellEdit?.()\n            return true\n          }\n          break\n        case 'Escape':\n          event.preventDefault()\n          originalApi.cancelCellEdit?.()\n          return true\n        case 'Tab':\n          event.preventDefault()\n          if (originalApi.commitCellEdit?.()) {\n            // Move to next editable cell\n            const direction = event.shiftKey ? 'prev' : 'next'\n            moveToNextEditableCell(direction)\n          }\n          return true\n      }\n\n      return false\n    }\n\n    // Double-click to edit handler\n    originalApi.handleCellDoubleClick = (rowId: string | number, columnId: string): boolean => {\n      return originalApi.startCellEdit?.(rowId, columnId) || false\n    }\n\n    // Helper functions\n    function setupBuiltinEditors() {\n      // Text editor\n      editState.editors.set('text', {\n        component: 'CellTextEditor',\n      })\n\n      // Number editor\n      editState.editors.set('number', {\n        component: 'CellNumberEditor',\n      })\n\n      // Select editor\n      editState.editors.set('select', {\n        component: 'CellSelectEditor',\n      })\n\n      // Date editor\n      editState.editors.set('date', {\n        component: 'CellDateEditor',\n      })\n\n      // Boolean editor\n      editState.editors.set('boolean', {\n        component: 'CellBooleanEditor',\n      })\n    }\n\n\n    async function validateCellValue(\n      value: any,\n      row: RowData,\n      column: ColumnDef\n    ): Promise<ValidationResult> {\n      // Check column-specific validator first\n      const validator = editState.validators.get(column.id)\n      if (validator) {\n        const result = validator(value, row, column)\n        if (!result.valid) {\n          return result\n        }\n      }\n\n      // Editor validation removed - use column-level validators instead\n\n      // Check required validation\n      if (column.required && (value === null || value === '')) {\n        return {\n          valid: false,\n          message: `${column.title} is required`,\n        }\n      }\n\n      return { valid: true }\n    }\n\n    function moveToNextEditableCell(direction: 'next' | 'prev') {\n      if (!editState.activeCell) return\n\n      const data = api.getData()\n      const columns = api.getState().columns.filter((c: ColumnDef) => c.editable !== false)\n\n      const currentRowIndex = data.findIndex(r => (r.id || r.index) === editState.activeCell!.rowId)\n      const currentColIndex = columns.findIndex(\n        (c: ColumnDef) => c.id === editState.activeCell!.columnId\n      )\n\n      if (currentRowIndex === -1 || currentColIndex === -1) return\n\n      let nextRowIndex = currentRowIndex\n      let nextColIndex = currentColIndex\n\n      if (direction === 'next') {\n        nextColIndex++\n        if (nextColIndex >= columns.length) {\n          nextColIndex = 0\n          nextRowIndex++\n          if (nextRowIndex >= data.length) {\n            nextRowIndex = 0\n          }\n        }\n      } else {\n        nextColIndex--\n        if (nextColIndex < 0) {\n          nextColIndex = columns.length - 1\n          nextRowIndex--\n          if (nextRowIndex < 0) {\n            nextRowIndex = data.length - 1\n          }\n        }\n      }\n\n      const nextRow = data[nextRowIndex]\n      const nextColumn = columns[nextColIndex]\n\n      if (nextRow && nextColumn) {\n        const nextRowId = nextRow.id || nextRowIndex\n        if (typeof nextRowId === 'string' || typeof nextRowId === 'number') {\n          originalApi.startCellEdit?.(nextRowId, nextColumn.id)\n        }\n      }\n    }\n\n    // Listen for interaction contract events\n    if (originalApi.on) {\n      originalApi.on('cell-double-click', (payload: any) => {\n        if (payload.position) {\n          originalApi.handleCellDoubleClick?.(payload.position.rowId, payload.position.columnId)\n        }\n      })\n\n      // Note: keyboard-navigation event not defined in GridEvents\n      // TODO: Add keyboard-navigation to GridEvents or handle differently\n    }\n\n    logger.info('Cell editing functionality installed')\n  },\n\n  cleanup() {\n    logger.info('Cell editing plugin cleaned up')\n  },\n}\n"],"mappings":"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"}