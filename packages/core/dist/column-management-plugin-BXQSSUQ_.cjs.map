{"version":3,"file":"column-management-plugin-BXQSSUQ_.cjs","names":["resizeFrame: number | null","pendingWidth: number | null","resizeEdge: 'left' | 'right'","columnManagementPlugin: GridPlugin","columnState: InternalColumnState","cleanupFns: Array<() => void>","left: string[]","right: string[]"],"sources":["../src/utils/column-constants.ts","../src/plugins/core/column-management-plugin.ts"],"sourcesContent":["/**\n * Column Width Constants\n *\n * Centralized configuration for column width defaults across the codebase.\n * Following the Single Source of Truth principle.\n */\n\n/**\n * Default column width in pixels\n * Used when column.width is not specified\n */\nexport const DEFAULT_COLUMN_WIDTH = 150\n\n/**\n * Minimum column width in pixels\n * Used for column resizing constraints\n */\nexport const DEFAULT_MIN_COLUMN_WIDTH = 50\n\n/**\n * Maximum column width in pixels\n * Used for column resizing constraints\n */\nexport const DEFAULT_MAX_COLUMN_WIDTH = 500\n\n/**\n * Column width estimation range\n */\nexport const COLUMN_WIDTH_RANGE = {\n  MIN: 80,\n  MAX: 300,\n  DEFAULT: DEFAULT_COLUMN_WIDTH,\n} as const\n/**\n * Normalize column definition with default width values\n * This ensures all columns have width/minWidth/maxWidth defined\n * @param column - Column definition to normalize\n * @returns Normalized column with default values applied\n */\nexport function normalizeColumn<T extends { width?: number; minWidth?: number; maxWidth?: number }>(\n  column: T\n): T & { width: number; minWidth: number; maxWidth: number } {\n  return {\n    ...column,\n    width: column.width ?? DEFAULT_COLUMN_WIDTH,\n    minWidth: column.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH,\n    maxWidth: column.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH,\n  } as T & { width: number; minWidth: number; maxWidth: number }\n}\n","/**\n * Column Management Plugin - Core functionality\n *\n * Provides column operations including reordering, resizing, visibility,\n * and pinning. Integrates with the data pipeline for column-based operations.\n */\n\nimport type { GridPlugin, CapabilityGetter } from '../index'\nimport type { GridAPI, ColumnDef, ExtendedGridAPI, ColumnState } from '../../types'\nimport { createLogger } from '../../utils/logger'\nimport {\n  DEFAULT_COLUMN_WIDTH,\n  DEFAULT_MIN_COLUMN_WIDTH,\n  DEFAULT_MAX_COLUMN_WIDTH,\n} from '../../utils/column-constants'\n\ninterface InternalColumnState {\n  order: string[]\n  widths: Map<string, number>\n  visibility: Map<string, boolean>\n  pinned: Map<string, 'left' | 'right' | null>\n  activeResize: {\n    columnId: string\n    startX: number\n    startWidth: number\n    minWidth: number\n    maxWidth: number\n    lastWidth: number\n    edge: 'left' | 'right'\n  } | null\n}\n\nconst clampColumnWidth = (width: number, minWidth: number, maxWidth: number) => {\n  return Math.min(maxWidth, Math.max(minWidth, width))\n}\n\nfunction ensureColumnStateIntegrity(\n  columnState: InternalColumnState,\n  columns: ColumnDef[],\n  options: { resetOrder?: boolean } = {}\n) {\n  if (!columns.length) {\n    columnState.order = options.resetOrder ? [] : columnState.order\n    return\n  }\n\n  const columnIds = columns.map(column => column.id)\n  const columnIdSet = new Set(columnIds)\n\n  if (options.resetOrder || columnState.order.length === 0) {\n    columnState.order = [...columnIds]\n  } else {\n    const preservedOrder = columnState.order.filter(id => columnIdSet.has(id))\n    const missingColumns = columnIds.filter(id => !preservedOrder.includes(id))\n    columnState.order = [...preservedOrder, ...missingColumns]\n  }\n\n  const pruneMap = <T>(map: Map<string, T>) => {\n    for (const key of Array.from(map.keys())) {\n      if (!columnIdSet.has(key)) {\n        map.delete(key)\n      }\n    }\n  }\n\n  pruneMap(columnState.widths)\n  pruneMap(columnState.visibility)\n  pruneMap(columnState.pinned)\n\n  columns.forEach(column => {\n    const minWidth = column.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n    const maxWidth = column.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n    const stateWidth = columnState.widths.get(column.id)\n    const baseWidth = column.width\n    const fallbackWidth = baseWidth ?? DEFAULT_COLUMN_WIDTH\n\n    const shouldSyncToBase =\n      typeof stateWidth === 'number'\n        ? typeof baseWidth === 'number' &&\n          Math.abs(baseWidth - stateWidth) >= 0.5 &&\n          columnState.activeResize?.columnId !== column.id\n        : false\n\n    const candidateWidth = shouldSyncToBase ? baseWidth : stateWidth\n    const columnWidth = clampColumnWidth(candidateWidth ?? fallbackWidth, minWidth, maxWidth)\n\n    columnState.widths.set(column.id, columnWidth)\n\n    if (!columnState.visibility.has(column.id)) {\n      // If column.visible is explicitly false, honor it. Otherwise, default to true.\n      const initialVisibility = column.visible !== false\n      columnState.visibility.set(column.id, initialVisibility)\n    }\n\n    if (!columnState.pinned.has(column.id)) {\n      columnState.pinned.set(column.id, column.pinned ?? null)\n    }\n  })\n}\n\nfunction applyColumnState(columnState: InternalColumnState, baseColumns: ColumnDef[]): ColumnDef[] {\n  const columnMap = new Map(baseColumns.map((col: ColumnDef) => [col.id, col]))\n\n  ensureColumnStateIntegrity(columnState, baseColumns)\n\n  return columnState.order\n    .map(id => columnMap.get(id))\n    .filter((col): col is ColumnDef => {\n      return (\n        col !== undefined &&\n        col !== null &&\n        typeof col === 'object' &&\n        'id' in col &&\n        columnState.visibility.get(col.id as string) !== false\n      )\n    })\n    .map((col: ColumnDef) => {\n      const minWidth = col.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n      const maxWidth = col.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n      const storedWidth = columnState.widths.get(col.id) ?? col.width ?? DEFAULT_COLUMN_WIDTH\n      const width = clampColumnWidth(storedWidth, minWidth, maxWidth)\n\n      if (width !== storedWidth) {\n        columnState.widths.set(col.id, width)\n      }\n\n      const pinned = columnState.pinned.get(col.id) ?? col.pinned ?? null\n\n      return {\n        ...col,\n        width,\n        pinned: pinned || undefined,\n      }\n    })\n}\n\ninterface ColumnResizeController {\n  handleResizeStart: (payload: { columnId: string; startX: number; currentWidth: number }) => void\n  cleanup: () => void\n}\n\nfunction createResizeController(\n  api: ExtendedGridAPI,\n  columnState: InternalColumnState\n): ColumnResizeController {\n  let resizeFrame: number | null = null\n  let pendingWidth: number | null = null\n  let globalResizeActive = false\n\n  const flushPendingResize = (force = false) => {\n    if (resizeFrame !== null) {\n      window.cancelAnimationFrame(resizeFrame)\n      resizeFrame = null\n    }\n\n    const activeResize = columnState.activeResize\n    if (!activeResize) return\n\n    const widthToApply = pendingWidth ?? (force ? activeResize.lastWidth : null)\n\n    pendingWidth = null\n\n    if (widthToApply === null || widthToApply === undefined) return\n\n    api.resizeColumn?.(activeResize.columnId, widthToApply)\n  }\n\n  const removeGlobalResizeListeners = () => {\n    if (!globalResizeActive) return\n    window.removeEventListener('mousemove', handleResizeMove)\n    window.removeEventListener('mouseup', handleResizeEnd)\n    window.removeEventListener('blur', handleResizeCancel)\n    globalResizeActive = false\n  }\n\n  const stopActiveResize = () => {\n    if (resizeFrame !== null) {\n      window.cancelAnimationFrame(resizeFrame)\n      resizeFrame = null\n    }\n    columnState.activeResize = null\n    pendingWidth = null\n    removeGlobalResizeListeners()\n  }\n\n  const flushAndStop = (force = false) => {\n    flushPendingResize(force)\n    stopActiveResize()\n  }\n\n  const scheduleResize = (width: number) => {\n    pendingWidth = width\n\n    if (resizeFrame !== null) return\n\n    resizeFrame = window.requestAnimationFrame(() => {\n      resizeFrame = null\n      flushPendingResize()\n    })\n  }\n\n  function handleResizeMove(event: MouseEvent) {\n    const activeResize = columnState.activeResize\n    if (!activeResize) return\n\n    const rawDelta = event.clientX - activeResize.startX\n    const delta = activeResize.edge === 'left' ? -rawDelta : rawDelta\n    const nextWidth = clampColumnWidth(\n      activeResize.startWidth + delta,\n      activeResize.minWidth,\n      activeResize.maxWidth\n    )\n\n    if (Math.abs(nextWidth - activeResize.lastWidth) < 0.5) {\n      return\n    }\n\n    activeResize.lastWidth = nextWidth\n    scheduleResize(nextWidth)\n  }\n\n  const handleResizeEnd = () => {\n    flushAndStop(true)\n  }\n\n  const handleResizeCancel = () => {\n    flushAndStop(true)\n  }\n\n  const handleResizeStart = (payload: { columnId: string; startX: number; currentWidth: number }) => {\n    if (!payload) {\n      return\n    }\n\n    const { columnId, startX, currentWidth } = payload\n\n    if (columnState.activeResize) {\n      flushAndStop(true)\n    }\n\n    const columns = api.getState().columns || []\n    const column = columns.find((col: ColumnDef) => col.id === columnId)\n\n    if (!column || column.resizable === false) {\n      return\n    }\n\n    const minWidth = column.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n    const maxWidth = column.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n    const widthFromState = columnState.widths.get(columnId)\n    const startingWidth =\n      widthFromState ?? column.width ?? currentWidth ?? DEFAULT_COLUMN_WIDTH\n\n    const pinnedPosition = columnState.pinned.get(columnId) ?? column.pinned ?? null\n    const resizeEdge: 'left' | 'right' = pinnedPosition === 'right' ? 'left' : 'right'\n\n    columnState.activeResize = {\n      columnId,\n      startX,\n      startWidth: clampColumnWidth(startingWidth, minWidth, maxWidth),\n      minWidth,\n      maxWidth,\n      lastWidth: clampColumnWidth(startingWidth, minWidth, maxWidth),\n      edge: resizeEdge,\n    }\n\n    if (!globalResizeActive) {\n      window.addEventListener('mousemove', handleResizeMove)\n      window.addEventListener('mouseup', handleResizeEnd)\n      window.addEventListener('blur', handleResizeCancel)\n      globalResizeActive = true\n    }\n  }\n\n  return {\n    handleResizeStart,\n    cleanup: () => {\n      flushAndStop(true)\n    },\n  }\n}\n\nexport const columnManagementPlugin: GridPlugin = {\n  name: 'core-column-management',\n  version: '1.0.0',\n  dependencies: [], // No special capabilities needed\n\n  install(api: GridAPI, _get: CapabilityGetter) {\n    const logger = createLogger({ module: 'Plugin', operation: 'ColumnManagementPlugin' })\n    // Internal column state\n    const columnState: InternalColumnState = {\n      order: [],\n      widths: new Map(),\n      visibility: new Map(),\n      pinned: new Map(),\n      activeResize: null,\n    }\n\n    // Initialize column state from current columns, allowing optional order reset\n    const initializeColumnState = (options: { resetOrder?: boolean } = {}) => {\n      const currentColumns = api.getState().columns || []\n      ensureColumnStateIntegrity(columnState, currentColumns, options)\n    }\n\n    // Apply column state to column definitions\n    const buildColumnsFromState = (): ColumnDef[] => {\n      const baseColumns = api.getState().columns || []\n      return applyColumnState(columnState, baseColumns)\n    }\n\n    // Extend GridAPI with column management methods\n    const originalApi = api as ExtendedGridAPI\n\n    // Track subscriptions for cleanup\n    const cleanupFns: Array<() => void> = []\n    const resizeController = createResizeController(originalApi, columnState)\n\n    // Column ordering\n    originalApi.moveColumn = (columnId: string, targetIndex: number) => {\n      const currentIndex = columnState.order.indexOf(columnId)\n      if (currentIndex === -1) return false\n\n      // Remove from current position\n      columnState.order.splice(currentIndex, 1)\n\n      // Insert at target position\n      const clampedIndex = Math.max(0, Math.min(targetIndex, columnState.order.length))\n      columnState.order.splice(clampedIndex, 0, columnId)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-move', {\n        fromIndex: currentIndex,\n        toIndex: clampedIndex,\n      })\n\n      return true\n    }\n\n    originalApi.swapColumns = (columnId1: string, columnId2: string) => {\n      const index1 = columnState.order.indexOf(columnId1)\n      const index2 = columnState.order.indexOf(columnId2)\n\n      if (index1 === -1 || index2 === -1) return false\n\n      // Swap positions\n      columnState.order[index1] = columnId2\n      columnState.order[index2] = columnId1\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-swap', {\n        index1,\n        index2,\n      })\n\n      return true\n    }\n\n    // Column resizing\n    originalApi.resizeColumn = (columnId: string, width: number) => {\n      const columns = api.getState().columns || []\n      const targetColumn = columns.find((col: ColumnDef) => col.id === columnId)\n\n      const minWidth = targetColumn?.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n      const maxWidth = targetColumn?.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n      const currentWidth = columnState.widths.get(columnId) ??\n        targetColumn?.width ??\n        DEFAULT_COLUMN_WIDTH\n\n      const constrainedWidth = clampColumnWidth(width, minWidth, maxWidth)\n\n      if (Math.abs(constrainedWidth - currentWidth) < 0.5) {\n        return false\n      }\n\n      columnState.widths.set(columnId, constrainedWidth)\n\n      const updateColumnFn = api.updateColumn?.bind(api)\n      if (typeof updateColumnFn === 'function') {\n        updateColumnFn(columnId, { width: constrainedWidth })\n      } else {\n        const updatedColumns = buildColumnsFromState()\n        api.setColumns(updatedColumns)\n      }\n\n      api.emit('column-resize', {\n        columnId,\n        width: constrainedWidth,\n      })\n\n      return true\n    }\n\n    originalApi.autoSizeColumn = (columnId: string) => {\n      // Get visible data to calculate optimal width\n      const data = api.getState().data || []\n      const column = api.getState().columns?.find((col: ColumnDef) => col.id === columnId)\n\n      if (!column) return false\n\n      // Calculate optimal width based on content\n      // This is a simplified version - in practice you'd measure actual text\n      const maxLength = Math.max(\n        column.title?.length || 0,\n        ...data.map((row: Record<string, unknown>) => String(row[column.field] || '').length)\n      )\n\n      const calculatedWidth = Math.max(80, Math.min(300, maxLength * 8))\n      return originalApi.resizeColumn?.(columnId, calculatedWidth) ?? false\n    }\n\n    // Column visibility\n    originalApi.hideColumn = (columnId: string) => {\n      if (columnState.visibility.get(columnId) === false) return false\n      columnState.visibility.set(columnId, false)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-hide', {\n        columnId,\n      })\n\n      return true\n    }\n\n    originalApi.showColumn = (columnId: string) => {\n      if (columnState.visibility.get(columnId) !== false) return false\n      columnState.visibility.set(columnId, true)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-show', {\n        columnId,\n      })\n\n      return true\n    }\n\n    originalApi.toggleColumnVisibility = (columnId: string) => {\n      const isVisible = columnState.visibility.get(columnId) !== false\n      return isVisible \n        ? (originalApi.hideColumn?.(columnId) ?? false) \n        : (originalApi.showColumn?.(columnId) ?? false)\n    }\n\n    originalApi.getHiddenColumns = () => {\n      return Array.from(columnState.visibility.entries())\n        .filter(([, visible]) => !visible)\n        .map(([id]) => id)\n    }\n\n    // Column pinning\n    originalApi.pinColumn = (columnId: string, position: 'left' | 'right') => {\n      columnState.pinned.set(columnId, position)\n\n      // Move pinned columns to appropriate positions\n      if (position === 'left') {\n        // Move to beginning\n        const index = columnState.order.indexOf(columnId)\n        if (index > -1) {\n          columnState.order.splice(index, 1)\n          columnState.order.unshift(columnId)\n        }\n      } else {\n        // Move to end\n        const index = columnState.order.indexOf(columnId)\n        if (index > -1) {\n          columnState.order.splice(index, 1)\n          columnState.order.push(columnId)\n        }\n      }\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-pin', {\n        columnId,\n        side: position,\n      })\n\n      return true\n    }\n\n    originalApi.unpinColumn = (columnId: string) => {\n      columnState.pinned.set(columnId, null)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-unpin', {\n        columnId,\n      })\n\n      return true\n    }\n\n    originalApi.getPinnedColumns = () => {\n      const left: string[] = []\n      const right: string[] = []\n\n      columnState.pinned.forEach((position, id) => {\n        if (position === 'left') left.push(id)\n        else if (position === 'right') right.push(id)\n      })\n\n      return { left, right }\n    }\n\n    // Bulk operations\n    originalApi.setColumnOrder = (order: string[]) => {\n      // Validate all column IDs exist\n      const currentColumns = api.getState().columns || []\n      const existingIds = new Set(currentColumns.map((col: ColumnDef) => col.id))\n\n      if (!order.every((id: string) => existingIds.has(id))) {\n        return false\n      }\n\n      const oldOrder = [...columnState.order]\n      columnState.order = [...order]\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-order-change', {\n        oldOrder,\n        newOrder: order,\n      })\n\n      return true\n    }\n\n    originalApi.resetColumns = () => {\n      // Reset to original state\n      columnState.order = []\n      columnState.widths.clear()\n      columnState.visibility.clear()\n      columnState.pinned.clear()\n\n      initializeColumnState({ resetOrder: true })\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('columns-reset', {\n        columns: updatedColumns,\n      })\n\n      return true\n    }\n\n    originalApi.getColumnState = () => {\n      return {\n        order: [...columnState.order],\n        widths: new Map(columnState.widths),\n        visibility: new Map(columnState.visibility),\n        pinned: new Map(columnState.pinned),\n      }\n    }\n\n    originalApi.setColumnState = (state: Partial<ColumnState>) => {\n      if (state.order) columnState.order = [...state.order]\n      if (state.widths) columnState.widths = new Map(state.widths)\n      if (state.visibility) columnState.visibility = new Map(state.visibility)\n      if (state.pinned) columnState.pinned = new Map(state.pinned)\n\n      // Update columns\n      const updatedColumns = buildColumnsFromState()\n      api.setColumns(updatedColumns)\n\n      api.emit('column-state-change', {\n        state: originalApi.getColumnState?.(),\n      })\n\n      return true\n    }\n\n    // Initialize state\n    initializeColumnState({ resetOrder: true })\n\n    // Helper function to handle columns-changed event (KISS principle)\n    function handleColumnsChanged(incomingColumns: unknown) {\n      if (!Array.isArray(incomingColumns)) return\n\n      // Sync internal state with incoming columns (reads visible: false)\n      ensureColumnStateIntegrity(columnState, incomingColumns)\n\n      // Build filtered column array based on visibility\n      const filteredColumns = buildColumnsFromState()\n\n      // Update grid only if visibility filtering removed columns (prevents infinite loop)\n      if (filteredColumns.length !== incomingColumns.length) {\n        api.setColumns(filteredColumns)\n      }\n    }\n\n    // React to external column changes to keep internal state aligned\n    if (typeof api.on === 'function') {\n      const offColumnsChanged = api.on('columns-changed', handleColumnsChanged)\n      cleanupFns.push(offColumnsChanged)\n\n      const offColumnUpdated = api.on('column-updated', payload => {\n        if (!payload) {\n          return\n        }\n\n        const { columnId, updates } = payload\n        if (!columnId || typeof updates !== 'object' || updates === null) {\n          return\n        }\n\n        if (typeof updates.width === 'number') {\n          const columns = api.getState().columns || []\n          const column = columns.find((col: ColumnDef) => col.id === columnId)\n          const minWidth = column?.minWidth ?? DEFAULT_MIN_COLUMN_WIDTH\n          const maxWidth = column?.maxWidth ?? DEFAULT_MAX_COLUMN_WIDTH\n          const constrainedWidth = clampColumnWidth(updates.width, minWidth, maxWidth)\n          columnState.widths.set(columnId, constrainedWidth)\n        }\n\n        if (Object.prototype.hasOwnProperty.call(updates, 'pinned')) {\n          const pinnedValue = updates.pinned\n          if (pinnedValue === 'left' || pinnedValue === 'right') {\n            columnState.pinned.set(columnId, pinnedValue)\n          } else if (pinnedValue === undefined || pinnedValue === null) {\n            columnState.pinned.set(columnId, null)\n          }\n        }\n      })\n      cleanupFns.push(offColumnUpdated)\n\n      const offColumnSort = api.on('column-sort', payload => {\n        if (!payload) {\n          return\n        }\n\n        const { columnId, field, ctrlKey } = payload\n        const columns = api.getState().columns || []\n        const column = columns.find((col: ColumnDef) => col.id === columnId || col.field === field)\n\n        if (!column) {\n          logger.debug('column-sort event ignored: column not found', {\n            columnId,\n            field,\n          })\n          return\n        }\n\n        if (column.sortable === false) {\n          logger.debug('column-sort event ignored: column not sortable', {\n            columnId,\n            field,\n          })\n          return\n        }\n\n        const targetField = column.field || field\n\n        if (!targetField) {\n          logger.warn('column-sort event missing field information', {\n            columnId,\n            field,\n          })\n          return\n        }\n\n        const sortByColumn =\n          typeof originalApi.sortByColumn === 'function'\n            ? originalApi.sortByColumn.bind(originalApi)\n            : null\n        const addSortField =\n          typeof originalApi.addSortField === 'function'\n            ? originalApi.addSortField.bind(originalApi)\n            : null\n\n        if (ctrlKey && addSortField) {\n          addSortField(targetField)\n          logger.debug('column-sort event applied via multi-sort', {\n            columnId,\n            field: targetField,\n            ctrlKey,\n          })\n          return\n        }\n\n        if (sortByColumn) {\n          sortByColumn(targetField)\n          logger.debug('column-sort event applied via primary sort', {\n            columnId,\n            field: targetField,\n            ctrlKey,\n          })\n        } else if (addSortField) {\n          addSortField(targetField)\n          logger.debug('column-sort event fallback to addSortField', {\n            columnId,\n            field: targetField,\n            ctrlKey,\n          })\n        } else {\n          logger.warn('column-sort event ignored: sorting capability unavailable', {\n            columnId,\n            field: targetField,\n          })\n        }\n      })\n\n      cleanupFns.push(offColumnSort)\n\n      const offResizeStart = api.on('column-resize-start', payload => {\n        resizeController.handleResizeStart(payload)\n      })\n\n      cleanupFns.push(offResizeStart)\n    }\n\n    api.registerMemoryCleanup?.(() => {\n      cleanupFns.forEach(cleanup => {\n        cleanup()\n      })\n      cleanupFns.length = 0\n      resizeController.cleanup()\n      columnState.activeResize = null\n    })\n\n    logger.info('Column management functionality installed', {\n      features: ['reorder', 'resize', 'visibility', 'pinning', 'sorting', 'state persistence'],\n    })\n\n    // Note: 'columns-change' event not defined in GridEvents\n    // TODO: Add columns-change to GridEvents or handle differently\n    // if (api.on) {\n    //   api.on('columns-change', () => {\n    //     initializeColumnState()\n    //   })\n    // }\n  },\n}\n"],"mappings":"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"}